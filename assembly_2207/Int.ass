CompileCommand: print *IntegerLinearRegression.fit bool print = true
# JMH version: 1.32
# VM version: JDK 16-internal, OpenJDK 64-Bit Server VM, 16-internal+0-adhoc.ominil.jdk16
# VM invoker: /Library/Java/JavaVirtualMachines/macosx-x86_64-server-fastdebug/jdk/bin/java
# VM options: --add-modules=jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*IntegerLinearRegression::fit -XX:PrintAssemblyOptions=intel -XX:-UseCompressedOops
# Blackhole mode: full + dont-inline hint
# Warmup: 100 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jml.regression.linear.BenchmarkLinearRegression.testIntLinearRegression

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
ComOppielneJCDoKm m6a4n-dB:i tp rSienrtv e*rI nVtMe gwearrLniinnega:r Rpergirnetsisnigo no.ff iats sbeomobll yp rciondte  =i str enaue
bled; turning on DebugNonSafepoints to gain additional output
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)    2536  976 %     3       org.jml.regression.linear.IntegerLinearRegression::fit @ 25 (153 bytes)
 total in heap  [0x0000000112f16790,0x0000000112f175f8] = 3688
 relocation     [0x0000000112f16908,0x0000000112f16a38] = 304
 main code      [0x0000000112f16a40,0x0000000112f17080] = 1600
 stub code      [0x0000000112f17080,0x0000000112f170e8] = 104
 oops           [0x0000000112f170e8,0x0000000112f170f0] = 8
 metadata       [0x0000000112f170f0,0x0000000112f170f8] = 8
 scopes data    [0x0000000112f170f8,0x0000000112f17260] = 360
 scopes pcs     [0x0000000112f17260,0x0000000112f17590] = 816
 dependencies   [0x0000000112f17590,0x0000000112f17598] = 8
 nul chk table  [0x0000000112f17598,0x0000000112f175f8] = 96

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
 ;;  block B10 [0, 0]
  0x0000000112f16a40: 448b 5608 | 49c1 e203 

  0x0000000112f16a48: ;   {runtime_call ic_miss_stub}
  0x0000000112f16a48: 4c3b d00f | 85cf ee9f | ff90 9090 | 9090 9090 | 9090 9090 | 9090 9090 
[Verified Entry Point]
  0x0000000112f16a60: 8984 2400 | a0fe ff55 | 4883 ec60 

  0x0000000112f16a6c: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16a6c: 48bf b000 | 706e 0200 | 0000 8b9f | 1c01 0000 | 83c3 0289 | 9f1c 0100 | 0081 e3fe | 0700 0083 
  0x0000000112f16a8c: fb00 0f84 

  0x0000000112f16a90: ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@0 (line 11)
  0x0000000112f16a90: 7303 0000 
 ;;  block B11 [0, 0]
 ;;  block B0 [0, 4]
  0x0000000112f16a94: ; implicit exception: dispatches to 0x0000000112f16e28
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
  0x0000000112f16a94: 8b7a 0c8b 

  0x0000000112f16a98: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
  0x0000000112f16a98: 590c 3bfb 

  0x0000000112f16a9c: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16a9c: 48bf b000 | 706e 0200 | 0000 48bb | 7001 0000 | 0000 0000 | 0f85 0a00 | 0000 48bb | 6001 0000 
  0x0000000112f16abc: 0000 0000 | 488b 041f | 488d 4001 | 4889 041f 
 ;;   50 branch [NE] [B2] 
  0x0000000112f16acc: 0f85 2902 

  0x0000000112f16ad0: ;*if_icmpeq {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
  0x0000000112f16ad0: 0000 488b | fabb 0000 | 0000 41b8 | 0000 0000 | b800 0000 | 00e9 7b00 

  0x0000000112f16ae8: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x0000000112f16ae8: 0000 9090 | 9090 9090 
 ;;  block B4 [32, 51]
  0x0000000112f16af0: 3b5f 0c0f | 8361 0300 | 0048 63d3 

  0x0000000112f16afc: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x0000000112f16afc: 8b54 9710 | 03d0 3b59 | 0c0f 83a3 | 0300 0048 | 63c3 8b44 

  0x0000000112f16b10: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x0000000112f16b10: 8110 4103 

  0x0000000112f16b14: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16b14: c0ff c349 | b8b0 0070 | 6e02 0000 | 0045 8b88 | 2001 0000 | 4183 c102 | 4589 8820 | 0100 0041 
  0x0000000112f16b34: 81e1 fe3f | 0000 4183 | f900 0f84 

  0x0000000112f16b40: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x0000000112f16b40: 8c03 0000 | 4d8b 9730 

  0x0000000112f16b48: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x0000000112f16b48: 0100 0041 

  0x0000000112f16b4c: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16b4c: 8502 49b8 | b000 706e | 0200 0000 | 41ff 80b0 | 0100 004c | 8bc0 488b 

  0x0000000112f16b64: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x0000000112f16b64: c244 8b4f 

  0x0000000112f16b68: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
  0x0000000112f16b68: 0c41 3bd9 

  0x0000000112f16b6c: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16b6c: 48ba b000 | 706e 0200 | 0000 49bb | a001 0000 | 0000 0000 | 0f8c 0a00 | 0000 49bb | 9001 0000 
  0x0000000112f16b8c: 0000 0000 | 4e8b 2c1a | 4d8d 6d01 | 4e89 2c1a 
 ;;  122 branch [LT] [B4] 
  0x0000000112f16b9c: 0f8c 4eff 

  0x0000000112f16ba0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x0000000112f16ba0: ffff 81f8 | 0000 0080 | 0f85 0c00 | 0000 33d2 | 4183 f9ff | 0f84 0400 | 0000 9941 | f7f9 488b 
  0x0000000112f16bc0: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x0000000112f16bc0: d849 8bc0 | 81f8 0000 | 0080 0f85 | 0c00 0000 | 33d2 4183 | f9ff 0f84 | 0400 0000 | 9941 f7f9 
  0x0000000112f16be0: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
  0x0000000112f16be0: 4c8b c0b8 | 0000 0000 | ba00 0000 | 0041 bb00 | 0000 00e9 

  0x0000000112f16bf4: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
  0x0000000112f16bf4: 8800 0000 
 ;;  block B7 [83, 126]
  0x0000000112f16bf8: 3b47 0c0f | 833b 0300 | 004c 63e8 | 468b 6caf 

  0x0000000112f16c08: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
  0x0000000112f16c08: 1044 2beb | 4d8b f545 | 0faf f545 | 03f3 3b41 | 0c0f 8371 | 0300 004c | 63d8 468b 

  0x0000000112f16c24: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x0000000112f16c24: 5c99 1045 | 2bd8 450f | afdd 4403 

  0x0000000112f16c30: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16c30: daff c048 | bab0 0070 | 6e02 0000 | 0044 8baa | 2001 0000 | 4183 c502 | 4489 aa20 | 0100 0041 
  0x0000000112f16c50: 81e5 fe3f | 0000 4183 | fd00 0f84 

  0x0000000112f16c5c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x0000000112f16c5c: 5203 0000 | 4d8b 9730 

  0x0000000112f16c64: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
                      ;   {poll}
  0x0000000112f16c64: 0100 0041 

  0x0000000112f16c68: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16c68: 8502 48ba | b000 706e | 0200 0000 | ff82 e801 | 0000 498b 

  0x0000000112f16c7c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x0000000112f16c7c: d34d 8bde 
 ;;  block B6 [76, 80]
  0x0000000112f16c80: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16c80: 413b c149 | bdb0 0070 | 6e02 0000 | 0049 bed8 | 0100 0000 | 0000 000f | 8c0a 0000 | 0049 bec8 
  0x0000000112f16ca0: 0100 0000 | 0000 004f | 8b64 3500 | 4d8d 6424 | 014f 8964 | 3500 0f8c 

  0x0000000112f16cb8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x0000000112f16cb8: 3cff ffff 
 ;;  block B8 [129, 152]
  0x0000000112f16cbc: 488b c281 | f800 0000 | 800f 850c | 0000 0033 | d241 83fb | ff0f 8404 | 0000 0099 

  0x0000000112f16cd8: ; implicit exception: dispatches to 0x0000000112f16fd3
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x0000000112f16cd8: 41f7 fb89 

  0x0000000112f16cdc: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x0000000112f16cdc: 4610 0faf | c344 2bc0 

  0x0000000112f16ce4: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
  0x0000000112f16ce4: 4489 460c | 4883 c460 

  0x0000000112f16cec: ;   {poll_return}
  0x0000000112f16cec: 5d49 3ba7 | 2801 0000 | 0f87 0b03 

  0x0000000112f16cf8: ;*return {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@152 (line 33)
  0x0000000112f16cf8: 0000 c390 | 9090 9090 

  0x0000000112f16d00: ;   {no_reloc}
  0x0000000112f16d00: e925 0300 | 0000 0000 | 0000 498b | 8748 0100 | 0048 8d78 | 3849 3bbf | 5801 0000 | 0f87 1203 
  0x0000000112f16d20: 0000 4989 | bf48 0100 | 0048 c700 | 0100 0000 | 488b ca48 | c1e9 0389 | 4808 4833 | c989 480c 
  0x0000000112f16d40: 4833 c948 | bf05 0000 | 0000 0000 | 0048 894c | f808 48ff 

  0x0000000112f16d54: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x0000000112f16d54: cf75 f648 

  0x0000000112f16d58: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16d58: 8bd0 48be | b000 706e | 0200 0000 | 4883 8680 | 0100 0001 

  0x0000000112f16d6c: ;   {oop("Arrays length are not equals"{0x0000000199b00000})}
  0x0000000112f16d6c: 48ba 0000 | b099 0100 | 0000 488b 

  0x0000000112f16d78: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
  0x0000000112f16d78: f048 8944 

  0x0000000112f16d7c: ;   {optimized virtual_call}
  0x0000000112f16d7c: 2450 90e8 

  0x0000000112f16d80: ; ImmutableOopMap {[80]=Oop }
                      ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
  0x0000000112f16d80: 9cee 9fff | 488b 4424 | 50e9 d202 

  0x0000000112f16d8c: ;*athrow {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@16 (line 11)
  0x0000000112f16d8c: 0000 8984 | 2400 a0fe | ff55 4883 | ec60 488b | 5e48 488b | 4640 488b | 5638 8b4e | 3044 8b46 
  0x0000000112f16dac: 2844 8b4e | 2048 8bfe | 4889 5c24 | 4848 8944 | 2440 4889 | 5424 3889 | 4c24 3044 | 8944 242c 
  0x0000000112f16dcc: 4489 4c24 

  0x0000000112f16dd0: ;   {runtime_call SharedRuntime::OSR_migration_end(long*)}
  0x0000000112f16dd0: 28e8 cab2 | 49f7 448b | 4c24 2849 | 8bd9 448b | 4424 2c8b | 4c24 3048 | 8bc1 488b | 5424 3848 
  0x0000000112f16df0: 8bca 488b | 5424 4048 | 8bfa 488b | 5424 4848 | 8bf2 e95e 

  0x0000000112f16e04: ;   {metadata({method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16e04: fdff ff49 | ba00 fb48 | 6e02 0000 | 004c 8954 | 2408 48c7 | 0424 ffff 

  0x0000000112f16e1c: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112f16e1c: ffff e89d 

  0x0000000112f16e20: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*synchronization entry
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
  0x0000000112f16e20: 3794 ffe9 | 6cfc ffff 
 ;; ImplicitNullCheckStub slow case
  0x0000000112f16e28: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16e28: e813 9794 

  0x0000000112f16e2c: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
                      ;   {external_word}
  0x0000000112f16e2c: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f16e38: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16e38: 83e4 f0e8 | 10b1 1ff7 

  0x0000000112f16e40: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16e40: f4e8 fa96 

  0x0000000112f16e44: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
                      ;   {external_word}
  0x0000000112f16e44: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f16e54: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16e54: e8f7 b01f | f7f4 4889 | 1c24 4889 

  0x0000000112f16e60: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f16e60: 7c24 08e8 

  0x0000000112f16e64: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x0000000112f16e64: d89f 94ff 

  0x0000000112f16e68: ;   {external_word}
  0x0000000112f16e68: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f16e74: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16e74: e4f0 e8d5 | b01f f7f4 
 ;; ImplicitNullCheckStub slow case
  0x0000000112f16e7c: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16e7c: e8bf 9694 

  0x0000000112f16e80: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000112f16e80: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f16e8c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16e8c: 83e4 f0e8 | bcb0 1ff7 

  0x0000000112f16e94: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16e94: f4e8 a696 

  0x0000000112f16e98: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000112f16e98: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f16ea8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16ea8: e8a3 b01f | f7f4 4889 | 1c24 4889 

  0x0000000112f16eb4: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f16eb4: 4c24 08e8 

  0x0000000112f16eb8: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x0000000112f16eb8: 849f 94ff 

  0x0000000112f16ebc: ;   {external_word}
  0x0000000112f16ebc: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f16ec8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16ec8: e4f0 e881 | b01f f7f4 
 ;; CounterOverflowStub slow case
  0x0000000112f16ed0: ;   {metadata({method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16ed0: 49ba 00fb | 486e 0200 | 0000 4c89 | 5424 0848 | c704 2433 

  0x0000000112f16ee4: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112f16ee4: 0000 00e8 

  0x0000000112f16ee8: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x0000000112f16ee8: d436 94ff | e953 fcff 

  0x0000000112f16ef0: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16ef0: ffe8 4a96 

  0x0000000112f16ef4: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
                      ;   {external_word}
  0x0000000112f16ef4: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f16f04: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16f04: e847 b01f 

  0x0000000112f16f08: ;   {runtime_call throw_div0_exception Runtime1 stub}
  0x0000000112f16f08: f7f4 e831 

  0x0000000112f16f0c: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
                      ;   {external_word}
  0x0000000112f16f0c: 9994 ff48 | bf69 7b75 | 0a01 0000 | 0048 83e4 

  0x0000000112f16f1c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16f1c: f0e8 2eb0 

  0x0000000112f16f20: ;   {runtime_call throw_div0_exception Runtime1 stub}
  0x0000000112f16f20: 1ff7 f4e8 

  0x0000000112f16f24: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
  0x0000000112f16f24: 1899 94ff 

  0x0000000112f16f28: ;   {external_word}
  0x0000000112f16f28: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f16f34: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16f34: e4f0 e815 | b01f f7f4 
 ;; RangeCheckStub slow case
  0x0000000112f16f3c: 4889 0424 | 4889 7c24 

  0x0000000112f16f44: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f16f44: 08e8 f69e 

  0x0000000112f16f48: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
                      ;   {external_word}
  0x0000000112f16f48: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f16f58: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16f58: e8f3 af1f 

  0x0000000112f16f5c: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16f5c: f7f4 e8dd 

  0x0000000112f16f60: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
                      ;   {external_word}
  0x0000000112f16f60: 9594 ff48 | bf69 7b75 | 0a01 0000 | 0048 83e4 

  0x0000000112f16f70: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16f70: f0e8 daaf 

  0x0000000112f16f74: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16f74: 1ff7 f4e8 

  0x0000000112f16f78: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x0000000112f16f78: c495 94ff 

  0x0000000112f16f7c: ;   {external_word}
  0x0000000112f16f7c: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f16f88: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16f88: e4f0 e8c1 | af1f f7f4 
 ;; RangeCheckStub slow case
  0x0000000112f16f90: 4889 0424 | 4889 4c24 

  0x0000000112f16f98: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f16f98: 08e8 a29e 

  0x0000000112f16f9c: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
                      ;   {external_word}
  0x0000000112f16f9c: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f16fac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16fac: e89f af1f 

  0x0000000112f16fb0: ;   {metadata({method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f16fb0: f7f4 49ba | 00fb 486e | 0200 0000 | 4c89 5424 | 0848 c704 | 247e 0000 

  0x0000000112f16fc8: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112f16fc8: 00e8 f235 

  0x0000000112f16fcc: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x0000000112f16fcc: 94ff e98d 

  0x0000000112f16fd0: ;   {runtime_call throw_div0_exception Runtime1 stub}
  0x0000000112f16fd0: fcff ffe8 

  0x0000000112f16fd4: ; ImmutableOopMap {rsi=Oop }
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x0000000112f16fd4: 6898 94ff 

  0x0000000112f16fd8: ;   {external_word}
  0x0000000112f16fd8: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f16fe4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16fe4: e4f0 e865 | af1f f7f4 
 ;; ImplicitNullCheckStub slow case
  0x0000000112f16fec: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f16fec: e84f 9594 

  0x0000000112f16ff0: ; ImmutableOopMap {rsi=Oop }
                      ;*putfield slope {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
                      ;   {external_word}
  0x0000000112f16ff0: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f16ffc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f16ffc: 83e4 f0e8 | 4caf 1ff7 

  0x0000000112f17004: ;   {internal_word}
  0x0000000112f17004: f449 baed | 6cf1 1201 | 0000 004d | 8997 e803 

  0x0000000112f17014: ;   {runtime_call SafepointBlob}
  0x0000000112f17014: 0000 e905 

  0x0000000112f17018: ;   {metadata(NULL)}
  0x0000000112f17018: 02a0 ff48 | ba00 0000 | 0000 0000 | 00b8 000f 

  0x0000000112f17028: ;   {runtime_call load_klass_patching Runtime1 stub}
  0x0000000112f17028: 050a e851 

  0x0000000112f1702c: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x0000000112f1702c: 4894 ffe9 | ccfc ffff 
 ;; NewInstanceStub slow case
  0x0000000112f17034: ;   {runtime_call fast_new_instance Runtime1 stub}
  0x0000000112f17034: 488b d2e8 

  0x0000000112f17038: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x0000000112f17038: 848a 94ff | e916 fdff | ff90 9049 | 8b87 5004 | 0000 49c7 | 8750 0400 | 0000 0000 | 0049 c787 
  0x0000000112f17058: 5804 0000 | 0000 0000 | 4883 c460 

  0x0000000112f17064: ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000112f17064: 5de9 d6a7 | 94ff f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Stub Code]
  0x0000000112f17080: ;   {no_reloc}
  0x0000000112f17080: 9090 9090 

  0x0000000112f17084: ;   {static_stub}
  0x0000000112f17084: 9048 bb00 | 0000 0000 

  0x0000000112f1708c: ;   {runtime_call}
  0x0000000112f1708c: 0000 00e9 | fbff ffff 
[Exception Handler]
  0x0000000112f17094: 48bb adde | 0000 0000 | 0000 48b9 | adde 0000 | 0000 0000 | 48be adde | 0000 0000 | 0000 48bf 
  0x0000000112f170b4: adde 0000 | 0000 0000 

  0x0000000112f170bc: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000000112f170bc: e81f 7094 

  0x0000000112f170c0: ;   {external_word}
  0x0000000112f170c0: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f170cc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f170cc: 83e4 f0e8 | 7cae 1ff7 

  0x0000000112f170d4: ;   {section_word}
  0x0000000112f170d4: f449 bad5 | 70f1 1201 | 0000 0041 

  0x0000000112f170e0: ;   {runtime_call DeoptimizationBlob}
  0x0000000112f170e0: 52e9 7af7 | 9fff f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x0000000112f170e8:   0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x0000000112f170f0:   0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x0000000112f16a3f offset=ffffffff bits=0):
PcDesc(pc=0x0000000112f16a94 offset=54 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@0 (line 11)
PcDesc(pc=0x0000000112f16a97 offset=57 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
PcDesc(pc=0x0000000112f16a9a offset=5a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
PcDesc(pc=0x0000000112f16ad2 offset=92 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
PcDesc(pc=0x0000000112f16aea offset=aa bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
PcDesc(pc=0x0000000112f16b00 offset=c0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
PcDesc(pc=0x0000000112f16b12 offset=d2 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x0000000112f16b44 offset=104 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000112f16b4b offset=10b bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16b65 offset=125 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000112f16b69 offset=129 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
PcDesc(pc=0x0000000112f16ba2 offset=162 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x0000000112f16bc1 offset=181 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
PcDesc(pc=0x0000000112f16be3 offset=1a3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
PcDesc(pc=0x0000000112f16bf8 offset=1b8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
PcDesc(pc=0x0000000112f16c09 offset=1c9 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
PcDesc(pc=0x0000000112f16c27 offset=1e7 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x0000000112f16c60 offset=220 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x0000000112f16c67 offset=227 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
PcDesc(pc=0x0000000112f16c80 offset=240 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x0000000112f16cbc offset=27c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x0000000112f16cdb offset=29b bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
PcDesc(pc=0x0000000112f16cde offset=29e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
PcDesc(pc=0x0000000112f16ce8 offset=2a8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
PcDesc(pc=0x0000000112f16cfb offset=2bb bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@152 (line 33)
PcDesc(pc=0x0000000112f16d57 offset=317 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
PcDesc(pc=0x0000000112f16d79 offset=339 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
PcDesc(pc=0x0000000112f16d84 offset=344 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[80],oop
PcDesc(pc=0x0000000112f16d8e offset=34e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@16 (line 11)
PcDesc(pc=0x0000000112f16e23 offset=3e3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16e2d offset=3ed bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16e46 offset=406 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16e68 offset=428 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16e81 offset=441 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16e9a offset=45a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16ebc offset=47c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16eec offset=4ac bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16ef6 offset=4b6 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16f0f offset=4cf bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16f28 offset=4e8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16f4a offset=50a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16f63 offset=523 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16f7c offset=53c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16f9e offset=55e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16fce offset=58e bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
PcDesc(pc=0x0000000112f16fd8 offset=598 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f16ff1 offset=5b1 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1702f offset=5ef bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1703c offset=5fc bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f170e9 offset=6a9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 23 OopMaps

ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop } pc offsets: 267 551 
ImmutableOopMap {[80]=Oop } pc offsets: 836 
ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop } pc offsets: 995 1005 1030 
ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop } pc offsets: 1064 1089 1114 1148 1196 1206 1231 1256 1290 1315 1340 1374 1422 
ImmutableOopMap {rsi=Oop } pc offsets: 1432 1457 
ImmutableOopMap {} pc offsets: 1519 1532 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x0000000112f16a94 offset=54):
   org.jml.regression.linear.IntegerLinearRegression::fit@0 (line 11)
ScopeDesc(pc=0x0000000112f16a97 offset=57):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x0000000112f16a9a offset=5a):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x0000000112f16ad2 offset=92):
   org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
ScopeDesc(pc=0x0000000112f16aea offset=aa):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x0000000112f16b00 offset=c0):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x0000000112f16b12 offset=d2):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x0000000112f16b44 offset=104):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000112f16b4b offset=10b):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16b65 offset=125):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000112f16b69 offset=129):
   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x0000000112f16ba2 offset=162):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x0000000112f16bc1 offset=181):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x0000000112f16be3 offset=1a3):
   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
ScopeDesc(pc=0x0000000112f16bf8 offset=1b8):
   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
ScopeDesc(pc=0x0000000112f16c09 offset=1c9):
   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
ScopeDesc(pc=0x0000000112f16c27 offset=1e7):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x0000000112f16c60 offset=220):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x0000000112f16c67 offset=227):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
ScopeDesc(pc=0x0000000112f16c80 offset=240):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x0000000112f16cbc offset=27c):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x0000000112f16cdb offset=29b):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
ScopeDesc(pc=0x0000000112f16cde offset=29e):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
ScopeDesc(pc=0x0000000112f16ce8 offset=2a8):
   org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
ScopeDesc(pc=0x0000000112f16cfb offset=2bb):
   org.jml.regression.linear.IntegerLinearRegression::fit@152 (line 33)
ScopeDesc(pc=0x0000000112f16d57 offset=317):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
ScopeDesc(pc=0x0000000112f16d79 offset=339):
   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
ScopeDesc(pc=0x0000000112f16d84 offset=344):
   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[80],oop
ScopeDesc(pc=0x0000000112f16d8e offset=34e):
   org.jml.regression.linear.IntegerLinearRegression::fit@16 (line 11)
ScopeDesc(pc=0x0000000112f16e23 offset=3e3):
   org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16e2d offset=3ed):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16e46 offset=406):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16e68 offset=428):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16e81 offset=441):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16e9a offset=45a):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16ebc offset=47c):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16eec offset=4ac):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16ef6 offset=4b6):
   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16f0f offset=4cf):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16f28 offset=4e8):
   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16f4a offset=50a):
   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16f63 offset=523):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16f7c offset=53c):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16f9e offset=55e):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16fce offset=58e):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
ScopeDesc(pc=0x0000000112f16fd8 offset=598):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f16ff1 offset=5b1):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1702f offset=5ef):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1703c offset=5fc):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x0000000112f16908: 600b
relocInfo@0x0000000112f16908 [type=6(runtime_call) addr=0x0000000112f16a4b offset=11] | [destination=0x0000000112915920]
         @0x0000000112f1690a: c021
relocInfo@0x0000000112f1690a [type=12(metadata) addr=0x0000000112f16a6c offset=33] | [metadata_addr=0x0000000112f16a6e *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1690c: c030
relocInfo@0x0000000112f1690c [type=12(metadata) addr=0x0000000112f16a9c offset=48] | [metadata_addr=0x0000000112f16a9e *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1690e: c07b
relocInfo@0x0000000112f1690e [type=12(metadata) addr=0x0000000112f16b17 offset=123] | [metadata_addr=0x0000000112f16b19 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f16910: a034
relocInfo@0x0000000112f16910 [type=10(poll) addr=0x0000000112f16b4b offset=52]
         @0x0000000112f16912: c003
relocInfo@0x0000000112f16912 [type=12(metadata) addr=0x0000000112f16b4e offset=3] | [metadata_addr=0x0000000112f16b50 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f16914: c01e
relocInfo@0x0000000112f16914 [type=12(metadata) addr=0x0000000112f16b6c offset=30] | [metadata_addr=0x0000000112f16b6e *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f16916: c0c7
relocInfo@0x0000000112f16916 [type=12(metadata) addr=0x0000000112f16c33 offset=199] | [metadata_addr=0x0000000112f16c35 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f16918: a034
relocInfo@0x0000000112f16918 [type=10(poll) addr=0x0000000112f16c67 offset=52]
         @0x0000000112f1691a: c003
relocInfo@0x0000000112f1691a [type=12(metadata) addr=0x0000000112f16c6a offset=3] | [metadata_addr=0x0000000112f16c6c *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1691c: c019
relocInfo@0x0000000112f1691c [type=12(metadata) addr=0x0000000112f16c83 offset=25] | [metadata_addr=0x0000000112f16c85 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1691e: b06a
relocInfo@0x0000000112f1691e [type=11(poll_return) addr=0x0000000112f16ced offset=106]
         @0x0000000112f16920: 0013
relocInfo@0x0000000112f16920 [type=0(none) addr=0x0000000112f16d00 offset=19]
         @0x0000000112f16922: c05a
relocInfo@0x0000000112f16922 [type=12(metadata) addr=0x0000000112f16d5a offset=90] | [metadata_addr=0x0000000112f16d5c *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f16924: 1012
relocInfo@0x0000000112f16924 [type=1(oop) addr=0x0000000112f16d6c offset=18] | [oop_addr=0x0000000112f16d6e *=0x0000000199b00000 offset=0]
         @0x0000000112f16926: 3413
relocInfo@0x0000000112f16926 [type=3(opt_virtual_call) addr=0x0000000112f16d7f offset=19 format=1] | [destination=0x0000000112915c20 metadata=0x0000000000000000]
         @0x0000000112f16928: 6452
relocInfo@0x0000000112f16928 [type=6(runtime_call) addr=0x0000000112f16dd1 offset=82 format=1] | [destination=0x000000010a3b20a0]
         @0x0000000112f1692a: c036
relocInfo@0x0000000112f1692a [type=12(metadata) addr=0x0000000112f16e07 offset=54] | [metadata_addr=0x0000000112f16e09 *=0x000000026e48fb00 offset=0]metadata_value=0x000000026e48fb00: {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1692c: 6417
relocInfo@0x0000000112f1692c [type=6(runtime_call) addr=0x0000000112f16e1e offset=23 format=1] | [destination=0x000000011285a5c0]
         @0x0000000112f1692e: 640a
relocInfo@0x0000000112f1692e [type=6(runtime_call) addr=0x0000000112f16e28 offset=10 format=1] | [destination=0x0000000112860540]
         @0x0000000112f16930: f8030a757b6900017005
relocInfo@0x0000000112f16938 [type=7(external_word) addr=0x0000000112f16e2d offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1693a: 640e
relocInfo@0x0000000112f1693a [type=6(runtime_call) addr=0x0000000112f16e3b offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1693c: 6406
relocInfo@0x0000000112f1693c [type=6(runtime_call) addr=0x0000000112f16e41 offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1693e: f8030a757b6900017005
relocInfo@0x0000000112f16946 [type=7(external_word) addr=0x0000000112f16e46 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16948: 640e
relocInfo@0x0000000112f16948 [type=6(runtime_call) addr=0x0000000112f16e54 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1694a: 640f
relocInfo@0x0000000112f1694a [type=6(runtime_call) addr=0x0000000112f16e63 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f1694c: f8030a757b6900017005
relocInfo@0x0000000112f16954 [type=7(external_word) addr=0x0000000112f16e68 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16956: 640e
relocInfo@0x0000000112f16956 [type=6(runtime_call) addr=0x0000000112f16e76 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16958: 6406
relocInfo@0x0000000112f16958 [type=6(runtime_call) addr=0x0000000112f16e7c offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1695a: f8030a757b6900017005
relocInfo@0x0000000112f16962 [type=7(external_word) addr=0x0000000112f16e81 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16964: 640e
relocInfo@0x0000000112f16964 [type=6(runtime_call) addr=0x0000000112f16e8f offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16966: 6406
relocInfo@0x0000000112f16966 [type=6(runtime_call) addr=0x0000000112f16e95 offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f16968: f8030a757b6900017005
relocInfo@0x0000000112f16970 [type=7(external_word) addr=0x0000000112f16e9a offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16972: 640e
relocInfo@0x0000000112f16972 [type=6(runtime_call) addr=0x0000000112f16ea8 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16974: 640f
relocInfo@0x0000000112f16974 [type=6(runtime_call) addr=0x0000000112f16eb7 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f16976: f8030a757b6900017005
relocInfo@0x0000000112f1697e [type=7(external_word) addr=0x0000000112f16ebc offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16980: 640e
relocInfo@0x0000000112f16980 [type=6(runtime_call) addr=0x0000000112f16eca offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16982: c006
relocInfo@0x0000000112f16982 [type=12(metadata) addr=0x0000000112f16ed0 offset=6] | [metadata_addr=0x0000000112f16ed2 *=0x000000026e48fb00 offset=0]metadata_value=0x000000026e48fb00: {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f16984: 6417
relocInfo@0x0000000112f16984 [type=6(runtime_call) addr=0x0000000112f16ee7 offset=23 format=1] | [destination=0x000000011285a5c0]
         @0x0000000112f16986: 640a
relocInfo@0x0000000112f16986 [type=6(runtime_call) addr=0x0000000112f16ef1 offset=10 format=1] | [destination=0x0000000112860540]
         @0x0000000112f16988: f8030a757b6900017005
relocInfo@0x0000000112f16990 [type=7(external_word) addr=0x0000000112f16ef6 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16992: 640e
relocInfo@0x0000000112f16992 [type=6(runtime_call) addr=0x0000000112f16f04 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16994: 6406
relocInfo@0x0000000112f16994 [type=6(runtime_call) addr=0x0000000112f16f0a offset=6 format=1] | [destination=0x0000000112860840]
         @0x0000000112f16996: f8030a757b6900017005
relocInfo@0x0000000112f1699e [type=7(external_word) addr=0x0000000112f16f0f offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169a0: 640e
relocInfo@0x0000000112f169a0 [type=6(runtime_call) addr=0x0000000112f16f1d offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169a2: 6406
relocInfo@0x0000000112f169a2 [type=6(runtime_call) addr=0x0000000112f16f23 offset=6 format=1] | [destination=0x0000000112860840]
         @0x0000000112f169a4: f8030a757b6900017005
relocInfo@0x0000000112f169ac [type=7(external_word) addr=0x0000000112f16f28 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169ae: 640e
relocInfo@0x0000000112f169ae [type=6(runtime_call) addr=0x0000000112f16f36 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169b0: 640f
relocInfo@0x0000000112f169b0 [type=6(runtime_call) addr=0x0000000112f16f45 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f169b2: f8030a757b6900017005
relocInfo@0x0000000112f169ba [type=7(external_word) addr=0x0000000112f16f4a offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169bc: 640e
relocInfo@0x0000000112f169bc [type=6(runtime_call) addr=0x0000000112f16f58 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169be: 6406
relocInfo@0x0000000112f169be [type=6(runtime_call) addr=0x0000000112f16f5e offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f169c0: f8030a757b6900017005
relocInfo@0x0000000112f169c8 [type=7(external_word) addr=0x0000000112f16f63 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169ca: 640e
relocInfo@0x0000000112f169ca [type=6(runtime_call) addr=0x0000000112f16f71 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169cc: 6406
relocInfo@0x0000000112f169cc [type=6(runtime_call) addr=0x0000000112f16f77 offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f169ce: f8030a757b6900017005
relocInfo@0x0000000112f169d6 [type=7(external_word) addr=0x0000000112f16f7c offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169d8: 640e
relocInfo@0x0000000112f169d8 [type=6(runtime_call) addr=0x0000000112f16f8a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169da: 640f
relocInfo@0x0000000112f169da [type=6(runtime_call) addr=0x0000000112f16f99 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f169dc: f8030a757b6900017005
relocInfo@0x0000000112f169e4 [type=7(external_word) addr=0x0000000112f16f9e offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169e6: 640e
relocInfo@0x0000000112f169e6 [type=6(runtime_call) addr=0x0000000112f16fac offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169e8: c006
relocInfo@0x0000000112f169e8 [type=12(metadata) addr=0x0000000112f16fb2 offset=6] | [metadata_addr=0x0000000112f16fb4 *=0x000000026e48fb00 offset=0]metadata_value=0x000000026e48fb00: {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f169ea: 6417
relocInfo@0x0000000112f169ea [type=6(runtime_call) addr=0x0000000112f16fc9 offset=23 format=1] | [destination=0x000000011285a5c0]
         @0x0000000112f169ec: 640a
relocInfo@0x0000000112f169ec [type=6(runtime_call) addr=0x0000000112f16fd3 offset=10 format=1] | [destination=0x0000000112860840]
         @0x0000000112f169ee: f8030a757b6900017005
relocInfo@0x0000000112f169f6 [type=7(external_word) addr=0x0000000112f16fd8 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f169f8: 640e
relocInfo@0x0000000112f169f8 [type=6(runtime_call) addr=0x0000000112f16fe6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f169fa: 6406
relocInfo@0x0000000112f169fa [type=6(runtime_call) addr=0x0000000112f16fec offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f169fc: f8030a757b6900017005
relocInfo@0x0000000112f16a04 [type=7(external_word) addr=0x0000000112f16ff1 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16a06: 640e
relocInfo@0x0000000112f16a06 [type=6(runtime_call) addr=0x0000000112f16fff offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16a08: f3188006
relocInfo@0x0000000112f16a0a [type=8(internal_word) addr=0x0000000112f17005 offset=6 data=792] | [target=0x0000000112f16ced]
         @0x0000000112f16a0c: 6411
relocInfo@0x0000000112f16a0c [type=6(runtime_call) addr=0x0000000112f17016 offset=17 format=1] | [destination=0x0000000112917220]
         @0x0000000112f16a0e: c005
relocInfo@0x0000000112f16a0e [type=12(metadata) addr=0x0000000112f1701b offset=5] | [metadata_addr=0x0000000112f1701d *=0x0000000000000000 offset=0]
         @0x0000000112f16a10: 640f
relocInfo@0x0000000112f16a10 [type=6(runtime_call) addr=0x0000000112f1702a offset=15 format=1] | [destination=0x000000011285b880]
         @0x0000000112f16a12: 640d
relocInfo@0x0000000112f16a12 [type=6(runtime_call) addr=0x0000000112f17037 offset=13 format=1] | [destination=0x000000011285fac0]
         @0x0000000112f16a14: 642e
relocInfo@0x0000000112f16a14 [type=6(runtime_call) addr=0x0000000112f17065 offset=46 format=1] | [destination=0x0000000112861840]
         @0x0000000112f16a16: 001b
relocInfo@0x0000000112f16a16 [type=0(none) addr=0x0000000112f17080 offset=27]
         @0x0000000112f16a18: f801fcc15005
relocInfo@0x0000000112f16a1c [type=5(static_stub) addr=0x0000000112f17085 offset=5 data=-831] | [static_call=0x0000000112f16d7f]
         @0x0000000112f16a1e: c000
relocInfo@0x0000000112f16a1e [type=12(metadata) addr=0x0000000112f17085 offset=0] | [metadata_addr=0x0000000112f17087 *=0x0000000000000000 offset=0]
         @0x0000000112f16a20: 640a
relocInfo@0x0000000112f16a20 [type=6(runtime_call) addr=0x0000000112f1708f offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x0000000112f16a22: 642d
relocInfo@0x0000000112f16a22 [type=6(runtime_call) addr=0x0000000112f170bc offset=45 format=1] | [destination=0x000000011285e0e0]
         @0x0000000112f16a24: f8030a757b6900017005
relocInfo@0x0000000112f16a2c [type=7(external_word) addr=0x0000000112f170c1 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f16a2e: 640e
relocInfo@0x0000000112f16a2e [type=6(runtime_call) addr=0x0000000112f170cf offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f16a30: f801feae9006
relocInfo@0x0000000112f16a34 [type=9(section_word) addr=0x0000000112f170d5 offset=6 data=-338] | [target=0x0000000112f170d5]
         @0x0000000112f16a36: 640c
relocInfo@0x0000000112f16a36 [type=6(runtime_call) addr=0x0000000112f170e1 offset=12 format=1] | [destination=0x0000000112916860]
         @0x0000000112f16a38: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 11 entries, 92 bytes):
{
   < 0x0000000112f16a94, 0x0000000112f16e28 > < 0x0000000112f16a97, 0x0000000112f16e41 > < 0x0000000112f16b02, 0x0000000112f16e7c > 
   < 0x0000000112f16b02, 0x0000000112f16e95 > < 0x0000000112f16b65, 0x0000000112f16ef1 > < 0x0000000112f16bbb, 0x0000000112f16f0a > 
   < 0x0000000112f16bdd, 0x0000000112f16f23 > < 0x0000000112f16c16, 0x0000000112f16f5e > < 0x0000000112f16c16, 0x0000000112f16f77 > 
   < 0x0000000112f16cd8, 0x0000000112f16fd3 > < 0x0000000112f16cdb, 0x0000000112f16fec > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 977 ------------------------
{method}
 - this oop:          0x000000026e48fb00
 - method holder:     'org/jml/regression/linear/IntegerLinearRegression'
 - constants:         0x000000026e48f5c0 constant pool [70]/operands[5] {0x000000026e48f5c0} for 'org/jml/regression/linear/IntegerLinearRegression' cache=0x000000026e48fec0
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([I[I)V'
 - max stack:         5
 - max locals:        10
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000011280de20
 - adapters:          AHE@0x00007fceee102e70: 0xbbb00000 i2c: 0x0000000112885ee0 c2i: 0x0000000112885fbf c2iUV: 0x0000000112885f92 c2iNCI: 0x0000000112885ffc
 - compiled entry     0x0000000112885fbf
 - code size:         153
 - code start:        0x000000026e48f9c8
 - code end (excl):   0x000000026e48fa61
 - method data:       0x000000026e7000b0
 - checked ex length: 0
 - linenumber start:  0x000000026e48fa61
 - localvar length:   11
 - localvar start:    0x000000026e48fa7a

------------------------ OptoAssembly for Compile_id = 977 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N436: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c     movq    R10, [RSI + #72 (8-bit)]	# ptr
020     movq    [rsp + #0], R10	# spill
024     movq    RBP, [RSI + #64 (8-bit)]	# ptr
028     movl    RBX, [RSI + #32 (8-bit)]	# int
02b     movq    R13, [RSI + #56 (8-bit)]	# ptr
02f     movl    R12, [RSI + #48 (8-bit)]	# int
033     movl    R14, [RSI + #40 (8-bit)]	# int
037     movq    RDI, RSI	# spill
        nop 	# 6 bytes pad for loops and calls
040     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
04d     movq    R10, [rsp + #0]	# spill
051     testq   R10, R10	# ptr
054     je     B36  P=0.001000 C=-1.000000

05a     B2: #	out( B44 B3 ) <- in( B1 )  Freq: 0.999
05a     movq    R11, R10	# spill
05d     movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
061     cmpl    R10, narrowklass: precise klass org/jml/regression/linear/IntegerLinearRegression: 0x00007fcef1575a20:Constant:exact *	# compressed klass ptr
068     jne,u   B44  P=0.000001 C=-1.000000

06e     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06e     movq    RDX, R11	# spill
071     # checkcastPP of RDX

071     B4: #	out( B37 B5 ) <- in( B3 B36 )  Freq: 0.999999
071     testq   RBP, RBP	# ptr
074     je     B37  P=0.001000 C=-1.000000

07a     B5: #	out( B44 B6 ) <- in( B4 )  Freq: 0.998999
07a     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 2 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass [I: 0x00007fcef1215850:Constant:exact *	# compressed klass ptr
087     jne,u   B44  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     movq    R8, RBP	# spill
090     # checkcastPP of R8

090     B7: #	out( B38 B8 ) <- in( B6 B37 )  Freq: 0.999998
090     testq   R13, R13	# ptr
093     je     B38  P=0.001000 C=-1.000000

099     B8: #	out( B44 B9 ) <- in( B7 )  Freq: 0.998998
099     movl    R9, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R9, narrowklass: precise klass [I: 0x00007fcef1215850:Constant:exact *	# compressed klass ptr
0a7     jne,u   B44  P=0.000001 C=-1.000000

0ad     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0ad     # checkcastPP of R13

0ad     B10: #	out( B45 B11 ) <- in( B9 B38 )  Freq: 0.999997
0ad     movl    RCX, [R8 + #12 (8-bit)]	# range
0b1     NullCheck R8

0b1     B11: #	out( B45 B12 ) <- in( B10 )  Freq: 0.999996
0b1     movl    R9, [R13 + #12 (8-bit)]	# range
0b5     NullCheck R13

0b5     B12: #	out( B33 B13 ) <- in( B11 )  Freq: 0.999995
0b5     cmpl    RBX, RCX
0b7     jge     B33  P=0.000000 C=5885839.000000

0bd     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0bd     movl    R10, RBX	# spill
0c0     incl    R10	# int
0c3     xorl    RDI, RDI	# int
0c5     cmpl    R10, RDI
0c8     cmovllt R10, RDI	# max
0cc     cmpl    R10, RCX
0cf     cmovlgt R10, RCX	# min

0d3     B14: #	out( B34 B15 ) <- in( B13 B16 ) Loop( B14-B16 inner pre of N371) Freq: 1.99998
0d3     cmpl    RBX, RCX	# unsigned
0d5     jnb,u   B34  P=0.000001 C=-1.000000

0db     B15: #	out( B35 B16 ) <- in( B14 )  Freq: 1.99998
0db     addl    R12, [R8 + #16 + RBX << #2]	# int
0e0     cmpl    RBX, R9	# unsigned
0e3     jnb,u   B35  P=0.000001 C=-1.000000

0e9     B16: #	out( B14 B17 ) <- in( B15 )  Freq: 1.99998
0e9     addl    R14, [R13 + #16 + RBX << #2]	# int
0ee     incl    RBX	# int
0f0     cmpl    RBX, R10
0f3     jl,s   B14	# loop end  P=0.500000 C=5885839.000000

0f5     B17: #	out( B28 B18 ) <- in( B16 )  Freq: 0.99999
0f5     cmpl    RCX, R9
0f8     movl    R10, RCX	# spill
0fb     cmovlgt R10, R9	# min
0ff     movl    RSI, R10	# spill
102     addl    RSI, #-7	# int
105     movl    R11, #-2147483648	# int
10b     cmpl    R10, RSI
10e     cmovll RSI, R11	# signed, int
112     cmpl    RBX, RSI
114     jge     B28  P=0.000001 C=-1.000000

11a     B18: #	out( B39 B19 ) <- in( B17 )  Freq: 0.999989
11a     # castII of RBX
11a     cmpl    RBX, RCX	# unsigned
        nop 	# 4 bytes pad for loops and calls
120     jnb,u   B39  P=0.000001 C=-1.000000

126     B19: #	out( B40 B20 ) <- in( B18 )  Freq: 0.999988
126     cmpl    RBX, R9	# unsigned
129     jnb,u   B40  P=0.000001 C=-1.000000

12f     B20: #	out( B41 B21 ) <- in( B19 )  Freq: 0.999987
12f     movl    R11, RBX	# spill
132     addl    R11, #7	# int
136     cmpl    R11, R9	# unsigned
139     jnb,u   B41  P=0.000001 C=-1.000000

13f     B21: #	out( B42 B22 ) <- in( B20 )  Freq: 0.999986
        nop 	# 1 bytes pad for loops and calls
140     cmpl    R11, RCX	# unsigned
143     jnb,u   B42  P=0.000001 C=-1.000000

149     B22: #	out( B43 B23 ) <- in( B21 )  Freq: 0.999985
149     cmpl    RBX, RCX	# unsigned
14b     jnb,u   B43  P=0.000001 C=-1.000000

151     B23: #	out( B25 ) <- in( B22 )  Freq: 0.999984
151     movl    R10, #8000	# int
157     # TLS is in R15
157     jmp,s   B25

159     B24: #	out( B28 B25 ) <- in( B27 ) top-of-loop Freq: 999984
159     movq    R11, [R15 + #304 (32-bit)]	# ptr
160     testl   rax, [R11]	# Safepoint: poll for GC        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:51 (line 15) L[0]=RDX L[1]=R8 L[2]=R13 L[3]=R12 L[4]=R14 L[5]=RBX L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r8=Oop rdx=Oop r13=Oop off=352/0x160}
163     cmpl    RBX, RSI
165     jge     B28  P=0.000000 C=5885839.000000

16b     B25: #	out( B26 ) <- in( B23 B24 ) Loop( B25-B24 ) Freq: 999984
16b     movl    R11, RSI	# spill
16e     subl    R11, RBX	# int
171     cmpl    RSI, RBX
173     cmovll R11, RDI	# signed, int
177     cmpl    R11, #8000	# unsigned
17e     cmovlnbe R11, R10	# unsigned, int
182     addl    R11, RBX	# int
        nop 	# 11 bytes pad for loops and calls

190     B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner main of N171 strip mined) Freq: 9.99984e+11
190     addl    R14, [R13 + #16 + RBX << #2]	# int
195     addl    R12, [R8 + #16 + RBX << #2]	# int
19a     movslq  RAX, RBX	# i2l
19d     addl    R12, [R8 + #20 + RAX << #2]	# int
1a2     addl    R14, [R13 + #20 + RAX << #2]	# int
1a7     addl    R12, [R8 + #24 + RAX << #2]	# int
1ac     addl    R14, [R13 + #24 + RAX << #2]	# int
1b1     addl    R12, [R8 + #28 + RAX << #2]	# int
1b6     addl    R14, [R13 + #28 + RAX << #2]	# int
1bb     addl    R12, [R8 + #32 + RAX << #2]	# int
1c0     addl    R14, [R13 + #32 + RAX << #2]	# int
1c5     addl    R12, [R8 + #36 + RAX << #2]	# int
1ca     addl    R14, [R13 + #36 + RAX << #2]	# int
1cf     addl    R12, [R8 + #40 + RAX << #2]	# int
1d4     addl    R14, [R13 + #40 + RAX << #2]	# int
1d9     addl    R12, [R8 + #44 + RAX << #2]	# int
1de     addl    R14, [R13 + #44 + RAX << #2]	# int
1e3     addl    RBX, #8	# int
1e6     cmpl    RBX, R11
1e9     jl,s   B26	# loop end  P=1.000000 C=5885839.000000

1eb     B27: #	out( B24 ) <- in( B26 )  Freq: 476830
1eb     jmp     B24

1f0     B28: #	out( B33 B29 ) <- in( B17 B24 )  Freq: 0.999985
1f0     cmpl    RBX, RCX
1f2     jge,s   B33  P=0.000001 C=-1.000000

1f4     B29: #	out( B30 ) <- in( B28 )  Freq: 0.999984
1f4     # castII of RBX

1f4     B30: #	out( B34 B31 ) <- in( B29 B32 ) Loop( B30-B32 inner post of N371) Freq: 328960
1f4     cmpl    RBX, RCX	# unsigned
1f6     jnb,u   B34  P=0.000001 C=-1.000000

1fc     B31: #	out( B35 B32 ) <- in( B30 )  Freq: 328960
1fc     addl    R12, [R8 + #16 + RBX << #2]	# int
201     cmpl    RBX, R9	# unsigned
204     jnb,u   B35  P=0.000001 C=-1.000000

20a     B32: #	out( B30 B33 ) <- in( B31 )  Freq: 328960
20a     addl    R14, [R13 + #16 + RBX << #2]	# int
20f     incl    RBX	# int
211     cmpl    RBX, RCX
213     jl,s   B30	# loop end  P=0.999999 C=5885839.000000

215     B33: #	out( N436 ) <- in( B12 B32 B28 )  Freq: 0.333329
215     movl    RSI, #-187	# int
21a     movq    RBP, RDX	# spill
21d     movq    [rsp + #0], R8	# spill
221     movq    [rsp + #8], R13	# spill
226     movl    [rsp + #16], R12	# spill
22b     movl    [rsp + #20], R14	# spill
230     movl    [rsp + #28], RBX	# spill
234     movl    [rsp + #32], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
23b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:29 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=576/0x240}
240     stop	# ShouldNotReachHere

254     B34: #	out( N436 ) <- in( B30 B14 )  Freq: 0.33333
254     movl    RSI, #-28	# int
259     movq    RBP, RDX	# spill
25c     movq    [rsp + #8], R13	# spill
261     movl    [rsp + #16], R14	# spill
266     movl    [rsp + #24], R12	# spill
26b     movq    [rsp + #32], R8	# spill
270     movl    [rsp + #28], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
277     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:36 (line 16) L[0]=RBP L[1]=rsp + #32 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #32 STK[2]=rsp + #28
        # OopMap {rbp=Oop [8]=Oop [32]=Oop off=636/0x27c}
27c     stop	# ShouldNotReachHere

290     B35: #	out( N436 ) <- in( B31 B15 )  Freq: 0.33333
290     movl    RSI, #-28	# int
295     movq    RBP, RDX	# spill
298     movq    [rsp + #0], R8	# spill
29c     movl    [rsp + #16], R12	# spill
2a1     movl    [rsp + #24], R14	# spill
2a6     movq    [rsp + #32], R13	# spill
2ab     movl    [rsp + #28], RBX	# spill
2af     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:44 (line 17) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #32 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #32 STK[2]=rsp + #28
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=692/0x2b4}
2b4     stop	# ShouldNotReachHere

2c8     B36: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
2c8     xorl    RDX, RDX	# ptr
2ca     movq    R11, R10	# spill
2cd     jmp     B4

2d2     B37: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
2d2     xorl    R8, R8	# ptr
2d5     jmp     B7

2da     B38: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
2da     xorl    R13, R13	# ptr
        nop 	# 3 bytes pad for loops and calls
2e0     jmp     B10

2e5     B39: #	out( N436 ) <- in( B18 )  Freq: 1.01327e-06
2e5     stop	# ShouldNotReachHere

2f9     B40: #	out( N436 ) <- in( B19 )  Freq: 1.01327e-06
2f9     stop	# ShouldNotReachHere

30d     B41: #	out( N436 ) <- in( B20 )  Freq: 1.01327e-06
30d     stop	# ShouldNotReachHere

321     B42: #	out( N436 ) <- in( B21 )  Freq: 1.01327e-06
321     stop	# ShouldNotReachHere

335     B43: #	out( N436 ) <- in( B22 )  Freq: 1.01326e-06
335     stop	# ShouldNotReachHere

349     B44: #	out( N436 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
349     movl    RSI, #-115	# int
34e     movq    [rsp + #0], R13	# spill
352     movl    [rsp + #8], R12	# spill
357     movl    [rsp + #12], R14	# spill
35c     movl    [rsp + #16], RBX	# spill
360     movq    [rsp + #24], R11	# spill
        nop 	# 2 bytes pad for loops and calls
367     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:25 (line 15) L[0]=rsp + #24 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #12 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [0]=Oop [24]=Oop off=876/0x36c}
36c     stop	# ShouldNotReachHere

380     B45: #	out( N436 ) <- in( B11 B10 )  Freq: 2.02655e-06
380     movl    RSI, #-138	# int
385     movq    RBP, RDX	# spill
388     movq    [rsp + #0], R8	# spill
38c     movq    [rsp + #8], R13	# spill
391     movl    [rsp + #16], R12	# spill
396     movl    [rsp + #20], R14	# spill
39b     movl    [rsp + #24], RBX	# spill
39f     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:25 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=rsp + #24 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=932/0x3a4}
3a4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2575  977 %     4       org.jml.regression.linear.IntegerLinearRegression::fit @ 25 (153 bytes)
 total in heap  [0x000000011a391090,0x000000011a3919a0] = 2320
 relocation     [0x000000011a391208,0x000000011a3912a0] = 152
 main code      [0x000000011a3912a0,0x000000011a391660] = 960
 stub code      [0x000000011a391660,0x000000011a391678] = 24
 oops           [0x000000011a391678,0x000000011a391680] = 8
 metadata       [0x000000011a391680,0x000000011a391698] = 24
 scopes data    [0x000000011a391698,0x000000011a391790] = 248
 scopes pcs     [0x000000011a391790,0x000000011a391980] = 496
 dependencies   [0x000000011a391980,0x000000011a391988] = 8
 nul chk table  [0x000000011a391988,0x000000011a3919a0] = 24

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
 ;; N436: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a3912a0: ;   {runtime_call os::breakpoint()}
  0x000000011a3912a0: e8fb 7cf1 | ef90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a3912b0: 8984 2400 | a0fe ff55 | 4883 ec40 | 4c8b 5648 | 4c89 1424 | 488b 6e40 | 8b5e 204c | 8b6e 3844 
  0x000000011a3912d0: 8b66 3044 | 8b76 2848 | 8bfe 9090 | 9090 9090 | 49ba a020 | 3b0a 0100 | 0000 41ff | d24c 8b14 
  0x000000011a3912f0: 244d 85d2 | 0f84 6e02 | 0000 4d8b | da45 8b52 

  0x000000011a391300: ;   {metadata('org/jml/regression/linear/IntegerLinearRegression')}
  0x000000011a391300: 0841 81fa | 201d 8245 | 0f85 db02 | 0000 498b | d348 85ed | 0f84 5802 | 0000 448b | 5508 9090 
  0x000000011a391320: ;   {metadata({type array int})}
  0x000000011a391320: 4181 fa86 | 8180 450f | 85bc 0200 | 004c 8bc5 
 ;; B7: #	out( B38 B8 ) <- in( B6 B37 )  Freq: 0.999998
  0x000000011a391330: 4d85 ed0f | 8441 0200 | 0045 8b4d | 0890 9090 

  0x000000011a391340: ;   {metadata({type array int})}
  0x000000011a391340: 4181 f986 | 8180 450f | 859c 0200 

  0x000000011a39134c: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a39134c: 0041 8b48 

  0x000000011a391350: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
  0x000000011a391350: 0c45 8b4d 

  0x000000011a391354: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a391354: 0c3b d90f | 8d58 0100 

  0x000000011a39135c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a39135c: 0044 8bd3 | 41ff c233 | ff44 3bd7 | 440f 4cd7 | 443b d144 

  0x000000011a391370: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a391370: 0f4f d13b | d90f 8379 | 0100 0045 

  0x000000011a39137c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a39137c: 0364 9810 | 413b d90f | 83a7 0100 | 0045 0374 

  0x000000011a39138c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a39138c: 9d10 ffc3 | 413b da7c 

  0x000000011a391394: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a391394: de41 3bc9 | 448b d145 | 0f4f d141 | 8bf2 83c6 | f941 bb00 | 0000 8044 | 3bd6 410f | 4cf3 3bde 
  0x000000011a3913b4: 0f8d d600 | 0000 3bd9 | 9090 9090 | 0f83 bf01 | 0000 413b | d90f 83ca | 0100 0044 | 8bdb 4183 
  0x000000011a3913d4: c307 453b | d90f 83ce | 0100 0090 | 443b d90f | 83d8 0100 | 003b d90f | 83e4 0100 | 0041 ba40 
  0x000000011a3913f4: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a3913f4: 1f00 00eb | 124d 8b9f 

  0x000000011a3913fc: ; ImmutableOopMap {r8=Oop rdx=Oop r13=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a3913fc: 3001 0000 

  0x000000011a391400: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x000000011a391400: 4185 033b | de0f 8d85 | 0000 0044 | 8bde 442b | db3b f344 | 0f4c df41 | 81fb 401f | 0000 450f 
  0x000000011a391420: 47da 4403 | db90 9090 | 9090 9090 

  0x000000011a39142c: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a39142c: 9090 9090 
 ;; B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner main of N171 strip mined) Freq: 9.99984e+11
  0x000000011a391430: 4503 749d | 1045 0364 | 9810 4863 | c345 0364 | 8014 4503 | 7485 1445 | 0364 8018 | 4503 7485 
  0x000000011a391450: 1845 0364 | 801c 4503 | 7485 1c45 | 0364 8020 | 4503 7485 | 2045 0364 | 8024 4503 | 7485 2445 
  0x000000011a391470: 0364 8028 | 4503 7485 | 2845 0364 

  0x000000011a39147c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a39147c: 802c 4503 

  0x000000011a391480: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a391480: 7485 2c83 

  0x000000011a391484: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
  0x000000011a391484: c308 413b 

  0x000000011a391488: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a391488: db7c a5e9 | 69ff ffff 
 ;; B28: #	out( B33 B29 ) <- in( B17 B24 )  Freq: 0.999985
  0x000000011a391490: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a391490: 3bd9 7d21 
 ;; B29: #	out( B30 ) <- in( B28 )  Freq: 0.999984
 ;; B30: #	out( B34 B31 ) <- in( B29 B32 ) Loop( B30-B32 inner post of N371) Freq: 328960
  0x000000011a391494: 3bd9 0f83 | 5800 0000 
 ;; B31: #	out( B35 B32 ) <- in( B30 )  Freq: 328960
  0x000000011a39149c: 4503 6498 

  0x000000011a3914a0: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a3914a0: 1041 3bd9 | 0f83 8600 | 0000 4503 

  0x000000011a3914ac: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a3914ac: 749d 10ff 

  0x000000011a3914b0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
  0x000000011a3914b0: c33b d97c 

  0x000000011a3914b4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a3914b4: dfbe 45ff | ffff 488b | ea4c 8904 | 244c 896c | 2408 4489 | 6424 1044 | 8974 2414 | 895c 241c 
  0x000000011a3914d4: 894c 2420 

  0x000000011a3914d8: ;   {runtime_call UncommonTrapBlob}
  0x000000011a3914d8: 9090 90e8 

  0x000000011a3914dc: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a3914dc: 6050 58f8 

  0x000000011a3914e0: ;   {external_word}
  0x000000011a3914e0: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a3914ec: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3914ec: e4f0 e85d | 0ad8 eff4 
 ;; B34: #	out( N436 ) <- in( B30 B14 )  Freq: 0.33333
  0x000000011a3914f4: bee4 ffff | ff48 8bea | 4c89 6c24 | 0844 8974 | 2410 4489 | 6424 184c | 8944 2420 | 895c 241c 
  0x000000011a391514: ;   {runtime_call UncommonTrapBlob}
  0x000000011a391514: 9090 90e8 

  0x000000011a391518: ; ImmutableOopMap {rbp=Oop [8]=Oop [32]=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x000000011a391518: 2450 58f8 

  0x000000011a39151c: ;   {external_word}
  0x000000011a39151c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a391528: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a391528: e4f0 e821 | 0ad8 eff4 
 ;; B35: #	out( N436 ) <- in( B31 B15 )  Freq: 0.33333
  0x000000011a391530: bee4 ffff | ff48 8bea | 4c89 0424 | 4489 6424 | 1044 8974 | 2418 4c89 | 6c24 2089 

  0x000000011a39154c: ;   {runtime_call UncommonTrapBlob}
  0x000000011a39154c: 5c24 1ce8 

  0x000000011a391550: ; ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a391550: ec4f 58f8 

  0x000000011a391554: ;   {external_word}
  0x000000011a391554: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a391560: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a391560: e4f0 e8e9 

  0x000000011a391564: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a391564: 09d8 eff4 
 ;; B36: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x000000011a391568: 33d2 4d8b | dae9 9ffd | ffff 4533 | c0e9 b6fd | ffff 4533 | ed90 9090 | e9c8 fdff 

  0x000000011a391584: ;   {external_word}
  0x000000011a391584: ff48 bfa6 | 3d85 0a01 | 0000 0048 

  0x000000011a391590: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a391590: 83e4 f0e8 | b809 d8ef 

  0x000000011a391598: ;   {external_word}
  0x000000011a391598: f448 bfa6 | 3d85 0a01 | 0000 0048 

  0x000000011a3915a4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3915a4: 83e4 f0e8 | a409 d8ef 

  0x000000011a3915ac: ;   {external_word}
  0x000000011a3915ac: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3915b8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3915b8: 83e4 f0e8 | 9009 d8ef 

  0x000000011a3915c0: ;   {external_word}
  0x000000011a3915c0: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3915cc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3915cc: 83e4 f0e8 | 7c09 d8ef 

  0x000000011a3915d4: ;   {external_word}
  0x000000011a3915d4: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3915e0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3915e0: 83e4 f0e8 | 6809 d8ef | f4be 8dff | ffff 4c89 | 2c24 4489 | 6424 0844 | 8974 240c | 895c 2410 
  0x000000011a391600: 4c89 5c24 

  0x000000011a391604: ;   {runtime_call UncommonTrapBlob}
  0x000000011a391604: 1890 90e8 

  0x000000011a391608: ; ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a391608: 344f 58f8 

  0x000000011a39160c: ;   {external_word}
  0x000000011a39160c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a391618: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a391618: e4f0 e831 | 09d8 eff4 
 ;; B45: #	out( N436 ) <- in( B11 B10 )  Freq: 2.02655e-06
  0x000000011a391620: be76 ffff | ff48 8bea | 4c89 0424 | 4c89 6c24 | 0844 8964 | 2410 4489 | 7424 1489 

  0x000000011a39163c: ;   {runtime_call UncommonTrapBlob}
  0x000000011a39163c: 5c24 18e8 

  0x000000011a391640: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a391640: fc4e 58f8 

  0x000000011a391644: ;   {external_word}
  0x000000011a391644: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a391650: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a391650: e4f0 e8f9 

  0x000000011a391654: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a391654: 08d8 eff4 | f4f4 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011a391660: ;   {no_reloc}
  0x000000011a391660: e9bb fa4c | f8e8 0000 | 0000 4883 

  0x000000011a39166c: ;   {runtime_call DeoptimizationBlob}
  0x000000011a39166c: 2c24 05e9 | ec51 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011a391678:   0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011a391680:   0x000000022c10e900 'org/jml/regression/linear/IntegerLinearRegression'
  0x000000011a391688:   0x000000022c040c30 {type array int}
  0x000000011a391690:   0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011a39129f offset=ffffffff bits=0):
PcDesc(pc=0x000000011a39134d offset=ad bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
PcDesc(pc=0x000000011a391351 offset=b1 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
PcDesc(pc=0x000000011a391355 offset=b5 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a39135d offset=bd bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a391373 offset=d3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a391380 offset=e0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a39138e offset=ee bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a391390 offset=f0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a391395 offset=f5 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a3913f7 offset=157 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a391400 offset=160 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rdx [4],oop
    - l1: reg r8 [16],oop
    - l2: reg r13 [26],oop
    - l3: reg r12 [24],int
    - l4: reg r14 [28],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a391403 offset=163 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a391430 offset=190 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a39147e offset=1de bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a391483 offset=1e3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a391486 offset=1e6 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a39148b offset=1eb bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a391494 offset=1f4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a3914a1 offset=201 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a3914af offset=20f bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a3914b1 offset=211 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a3914b5 offset=215 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a3914e0 offset=240 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[28]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[28]
    - @1: stack[32]
PcDesc(pc=0x000000011a39151c offset=27c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: stack[16]
    - l5: stack[28]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[24]
    - @1: stack[32],oop
    - @2: stack[28]
PcDesc(pc=0x000000011a391554 offset=2b4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[32],oop
    - l3: stack[16]
    - l4: empty
    - l5: stack[28]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[24]
    - @1: stack[32],oop
    - @2: stack[28]
PcDesc(pc=0x000000011a391568 offset=2c8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a39160c offset=36c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[24],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8]
    - l4: stack[12]
    - l5: stack[16]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a391644 offset=3a4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[24]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a391658 offset=3b8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
PcDesc(pc=0x000000011a391679 offset=3d9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 6 OopMaps

ImmutableOopMap {r8=Oop rdx=Oop r13=Oop } pc offsets: 352 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 576 
ImmutableOopMap {rbp=Oop [8]=Oop [32]=Oop } pc offsets: 636 
ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop } pc offsets: 692 
ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop } pc offsets: 876 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 932 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011a39134d offset=ad):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x000000011a391351 offset=b1):
   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x000000011a391355 offset=b5):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a39135d offset=bd):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a391373 offset=d3):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a391380 offset=e0):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a39138e offset=ee):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a391390 offset=f0):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a391395 offset=f5):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a3913f7 offset=157):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a391400 offset=160):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rdx [4],oop
    - l1: reg r8 [16],oop
    - l2: reg r13 [26],oop
    - l3: reg r12 [24],int
    - l4: reg r14 [28],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a391403 offset=163):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a391430 offset=190):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a39147e offset=1de):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a391483 offset=1e3):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a391486 offset=1e6):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a39148b offset=1eb):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a391494 offset=1f4):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a3914a1 offset=201):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a3914af offset=20f):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a3914b1 offset=211):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a3914b5 offset=215):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a3914e0 offset=240):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[28]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[28]
    - @1: stack[32]
ScopeDesc(pc=0x000000011a39151c offset=27c):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: stack[16]
    - l5: stack[28]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[24]
    - @1: stack[32],oop
    - @2: stack[28]
ScopeDesc(pc=0x000000011a391554 offset=2b4):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[32],oop
    - l3: stack[16]
    - l4: empty
    - l5: stack[28]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[24]
    - @1: stack[32],oop
    - @2: stack[28]
ScopeDesc(pc=0x000000011a391568 offset=2c8):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a39160c offset=36c):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[24],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8]
    - l4: stack[12]
    - l5: stack[16]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a391644 offset=3a4):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[24]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a391658 offset=3b8):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011a391208: 6400
relocInfo@0x000000011a391208 [type=6(runtime_call) addr=0x000000011a3912a0 offset=0 format=1] | [destination=0x000000010a2a8fa0]
         @0x000000011a39120a: f001cc61
relocInfo@0x000000011a39120c [type=12(metadata) addr=0x000000011a391301 offset=97 format=3 data=1] | [metadata_addr=0x000000011a391680 *=0x000000022c10e900 offset=0]metadata_value=0x000000022c10e900: 'org/jml/regression/linear/IntegerLinearRegression'
         @0x000000011a39120e: f002cc1f
relocInfo@0x000000011a391210 [type=12(metadata) addr=0x000000011a391320 offset=31 format=3 data=2] | [metadata_addr=0x000000011a391688 *=0x000000022c040c30 offset=0]metadata_value=0x000000022c040c30: {type array int}
         @0x000000011a391212: f002cc20
relocInfo@0x000000011a391214 [type=12(metadata) addr=0x000000011a391340 offset=32 format=3 data=2] | [metadata_addr=0x000000011a391688 *=0x000000022c040c30 offset=0]metadata_value=0x000000022c040c30: {type array int}
         @0x000000011a391216: a0c0
relocInfo@0x000000011a391216 [type=10(poll) addr=0x000000011a391400 offset=192]
         @0x000000011a391218: 64db
relocInfo@0x000000011a391218 [type=6(runtime_call) addr=0x000000011a3914db offset=219 format=1] | [destination=0x0000000112916540]
         @0x000000011a39121a: f8030a7d877700017005
relocInfo@0x000000011a391222 [type=7(external_word) addr=0x000000011a3914e0 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391224: 640e
relocInfo@0x000000011a391224 [type=6(runtime_call) addr=0x000000011a3914ee offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391226: 6429
relocInfo@0x000000011a391226 [type=6(runtime_call) addr=0x000000011a391517 offset=41 format=1] | [destination=0x0000000112916540]
         @0x000000011a391228: f8030a7d877700017005
relocInfo@0x000000011a391230 [type=7(external_word) addr=0x000000011a39151c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391232: 640e
relocInfo@0x000000011a391232 [type=6(runtime_call) addr=0x000000011a39152a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391234: 6425
relocInfo@0x000000011a391234 [type=6(runtime_call) addr=0x000000011a39154f offset=37 format=1] | [destination=0x0000000112916540]
         @0x000000011a391236: f8030a7d877700017005
relocInfo@0x000000011a39123e [type=7(external_word) addr=0x000000011a391554 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391240: 640e
relocInfo@0x000000011a391240 [type=6(runtime_call) addr=0x000000011a391562 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391242: f8030a853da600017023
relocInfo@0x000000011a39124a [type=7(external_word) addr=0x000000011a391585 offset=35 data={0a853da60001}] | [target=0x000000010a853da6]
         @0x000000011a39124c: 640e
relocInfo@0x000000011a39124c [type=6(runtime_call) addr=0x000000011a391593 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39124e: f8030a853da600017006
relocInfo@0x000000011a391256 [type=7(external_word) addr=0x000000011a391599 offset=6 data={0a853da60001}] | [target=0x000000010a853da6]
         @0x000000011a391258: 640e
relocInfo@0x000000011a391258 [type=6(runtime_call) addr=0x000000011a3915a7 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39125a: f8030a85353100017006
relocInfo@0x000000011a391262 [type=7(external_word) addr=0x000000011a3915ad offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a391264: 640e
relocInfo@0x000000011a391264 [type=6(runtime_call) addr=0x000000011a3915bb offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391266: f8030a85353100017006
relocInfo@0x000000011a39126e [type=7(external_word) addr=0x000000011a3915c1 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a391270: 640e
relocInfo@0x000000011a391270 [type=6(runtime_call) addr=0x000000011a3915cf offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391272: f8030a85353100017006
relocInfo@0x000000011a39127a [type=7(external_word) addr=0x000000011a3915d5 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a39127c: 640e
relocInfo@0x000000011a39127c [type=6(runtime_call) addr=0x000000011a3915e3 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39127e: 6424
relocInfo@0x000000011a39127e [type=6(runtime_call) addr=0x000000011a391607 offset=36 format=1] | [destination=0x0000000112916540]
         @0x000000011a391280: f8030a7d877700017005
relocInfo@0x000000011a391288 [type=7(external_word) addr=0x000000011a39160c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a39128a: 640e
relocInfo@0x000000011a39128a [type=6(runtime_call) addr=0x000000011a39161a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39128c: 6425
relocInfo@0x000000011a39128c [type=6(runtime_call) addr=0x000000011a39163f offset=37 format=1] | [destination=0x0000000112916540]
         @0x000000011a39128e: f8030a7d877700017005
relocInfo@0x000000011a391296 [type=7(external_word) addr=0x000000011a391644 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391298: 640e
relocInfo@0x000000011a391298 [type=6(runtime_call) addr=0x000000011a391652 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39129a: 000e
relocInfo@0x000000011a39129a [type=0(none) addr=0x000000011a391660 offset=14]
         @0x000000011a39129c: 6400
relocInfo@0x000000011a39129c [type=6(runtime_call) addr=0x000000011a391660 offset=0 format=1] | [destination=0x0000000112861120]
         @0x000000011a39129e: 640f
relocInfo@0x000000011a39129e [type=6(runtime_call) addr=0x000000011a39166f offset=15 format=1] | [destination=0x0000000112916860]
         @0x000000011a3912a0: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.IntegerLinearRegression
   [nmethod<=klass]org.jml.regression.linear.IntegerLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x000000011a39134d, 0x000000011a391620 > < 0x000000011a391351, 0x000000011a391620 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000022c10e900 'org/jml/regression/linear/IntegerLinearRegression'
#2: 0x000000022c040c30 {type array int}
#3: 0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 978 ------------------------
{method}
 - this oop:          0x000000026e48fb00
 - method holder:     'org/jml/regression/linear/IntegerLinearRegression'
 - constants:         0x000000026e48f5c0 constant pool [70]/operands[5] {0x000000026e48f5c0} for 'org/jml/regression/linear/IntegerLinearRegression' cache=0x000000026e48fec0
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([I[I)V'
 - max stack:         5
 - max locals:        10
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000011280de20
 - adapters:          AHE@0x00007fceee102e70: 0xbbb00000 i2c: 0x0000000112885ee0 c2i: 0x0000000112885fbf c2iUV: 0x0000000112885f92 c2iNCI: 0x0000000112885ffc
 - compiled entry     0x0000000112885fbf
 - code size:         153
 - code start:        0x000000026e48f9c8
 - code end (excl):   0x000000026e48fa61
 - method data:       0x000000026e7000b0
 - checked ex length: 0
 - linenumber start:  0x000000026e48fa61
 - localvar length:   11
 - localvar start:    0x000000026e48fa7a

------------------------ OptoAssembly for Compile_id = 978 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N614: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B41 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c     movq    R10, [RSI + #72 (8-bit)]	# ptr
020     movq    [rsp + #0], R10	# spill
024     movq    RBP, [RSI + #64 (8-bit)]	# ptr
028     movl    R12, [RSI]	# int
02b     movq    R14, [RSI + #56 (8-bit)]	# ptr
02f     movl    R11, [RSI + #32 (8-bit)]	# int
033     movl    [rsp + #16], R11	# spill
038     movl    R10, [RSI + #24 (8-bit)]	# int
03c     movl    [rsp + #20], R10	# spill
041     movl    R13, [RSI + #16 (8-bit)]	# int
045     movl    RBX, [RSI + #8 (8-bit)]	# int
048     movq    RDI, RSI	# spill
04b     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
05b     movq    R10, [rsp + #0]	# spill
        nop 	# 1 bytes pad for loops and calls
060     testq   R10, R10	# ptr
063     je     B41  P=0.001000 C=-1.000000

069     B2: #	out( B50 B3 ) <- in( B1 )  Freq: 0.999
069     movq    R11, R10	# spill
06c     movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
070     cmpl    R8, narrowklass: precise klass org/jml/regression/linear/IntegerLinearRegression: 0x00007fcef30daa20:Constant:exact *	# compressed klass ptr
077     jne,u   B50  P=0.000001 C=-1.000000

07d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
07d     movq    R8, R10	# spill
080     # checkcastPP of R8

080     B4: #	out( B42 B5 ) <- in( B3 B41 )  Freq: 0.999999
080     testq   RBP, RBP	# ptr
083     je     B42  P=0.001000 C=-1.000000

089     B5: #	out( B50 B6 ) <- in( B4 )  Freq: 0.998999
089     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
08d     cmpl    R10, narrowklass: precise klass [I: 0x00007fcef1215850:Constant:exact *	# compressed klass ptr
094     jne,u   B50  P=0.000001 C=-1.000000

09a     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
09a     movq    R9, RBP	# spill
09d     # checkcastPP of R9

09d     B7: #	out( B43 B8 ) <- in( B6 B42 )  Freq: 0.999998
        nop 	# 3 bytes pad for loops and calls
0a0     testq   R14, R14	# ptr
0a3     je     B43  P=0.001000 C=-1.000000

0a9     B8: #	out( B50 B9 ) <- in( B7 )  Freq: 0.998998
0a9     movl    R10, [R14 + #8 (8-bit)]	# compressed klass ptr
0ad     cmpl    R10, narrowklass: precise klass [I: 0x00007fcef1215850:Constant:exact *	# compressed klass ptr
0b4     jne,u   B50  P=0.000001 C=-1.000000

0ba     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0ba     # checkcastPP of R14

0ba     B10: #	out( B51 B11 ) <- in( B9 B43 )  Freq: 0.999997
        nop 	# 6 bytes pad for loops and calls
0c0     movl    RAX, [R9 + #12 (8-bit)]	# range
0c4     NullCheck R9

0c4     B11: #	out( B51 B12 ) <- in( B10 )  Freq: 0.999996
0c4     movl    RBP, [R14 + #12 (8-bit)]	# range
0c8     NullCheck R14

0c8     B12: #	out( B38 B13 ) <- in( B11 )  Freq: 0.999995
0c8     cmpl    R12, RAX
0cb     jge     B38  P=0.000000 C=340634.000000

0d1     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0d1     movdq   XMM0, R8	# spill
0d6     movl    R8, R14	# ptr -> int
0d9     movl    RDI, R12	# spill
0dc     incl    RDI	# int
0de     shrl    R8, #2
0e2     andl    R8, #7	# int
0e6     xorl    R10, R10	# int
0e9     cmpl    RDI, R10
0ec     cmovllt RDI, R10	# max
0f0     cmpl    RDI, RAX
0f2     cmovlgt RDI, RAX	# min
0f5     addl    R8, RDI	# int
0f8     movl    R11, #4	# int
0fe     subl    R11, R8	# int
101     andl    R11, #7	# int
105     addl    R11, RDI	# int
108     cmpl    R11, RAX
10b     cmovlgt R11, RAX	# min

10f     B14: #	out( B39 B15 ) <- in( B13 B16 ) Loop( B14-B16 inner pre of N431) Freq: 1.99998
10f     cmpl    R12, RAX	# unsigned
112     jnb,u   B39  P=0.000001 C=-1.000000

118     B15: #	out( B40 B16 ) <- in( B14 )  Freq: 1.99998
118     movl    RCX, [R9 + #16 + R12 << #2]	# int
11d     subl    RCX, [RSP + #16 (32-bit)]	# int
121     movl    R8, RCX	# spill
124     imull   R8, RCX	# int
128     addl    R13, R8	# int
12b     cmpl    R12, RBP	# unsigned
12e     jnb,u   B40  P=0.000001 C=-1.000000

134     B16: #	out( B14 B17 ) <- in( B15 )  Freq: 1.99998
134     movl    RDI, [R14 + #16 + R12 << #2]	# int
139     subl    RDI, [RSP + #20 (32-bit)]	# int
13d     imull   RDI, RCX	# int
140     addl    RBX, RDI	# int
142     incl    R12	# int
145     cmpl    R12, R11
148     jl,s   B14	# loop end  P=0.500000 C=340634.000000

14a     B17: #	out( B32 B18 ) <- in( B16 )  Freq: 0.99999
14a     cmpl    RAX, RBP
14c     movl    R8, RAX	# spill
14f     cmovlgt R8, RBP	# min
153     movl    R11, R8	# spill
156     addl    R11, #-31	# int
15a     movl    RCX, #-2147483648	# int
15f     cmpl    R8, R11
162     cmovll R11, RCX	# signed, int
166     cmpl    R12, R11
169     jge     B32  P=0.000001 C=-1.000000

16f     B18: #	out( B44 B19 ) <- in( B17 )  Freq: 0.999989
16f     # castII of R12
16f     cmpl    R12, RAX	# unsigned
172     jnb,u   B44  P=0.000001 C=-1.000000

178     B19: #	out( B45 B20 ) <- in( B18 )  Freq: 0.999988
178     cmpl    R12, RBP	# unsigned
        nop 	# 5 bytes pad for loops and calls
180     jnb,u   B45  P=0.000001 C=-1.000000

186     B20: #	out( B46 B21 ) <- in( B19 )  Freq: 0.999987
186     movl    RDX, R12	# spill
189     addl    RDX, #31	# int
18c     cmpl    RDX, RBP	# unsigned
18e     jnb,u   B46  P=0.000001 C=-1.000000

194     B21: #	out( B47 B22 ) <- in( B20 )  Freq: 0.999986
194     cmpl    R12, RBP	# unsigned
197     jnb,u   B47  P=0.000001 C=-1.000000

19d     B22: #	out( B48 B23 ) <- in( B21 )  Freq: 0.999985
        nop 	# 3 bytes pad for loops and calls
1a0     cmpl    RDX, RAX	# unsigned
1a2     jnb,u   B48  P=0.000001 C=-1.000000

1a8     B23: #	out( B49 B24 ) <- in( B22 )  Freq: 0.999984
1a8     cmpl    R12, RAX	# unsigned
1ab     jnb,u   B49  P=0.000001 C=-1.000000

1b1     B24: #	out( B26 ) <- in( B23 )  Freq: 0.999983
1b1     replicateI XMM5,[RSP + #16 (32-bit)]
1b8     replicateI XMM6,[RSP + #20 (32-bit)]
1bf     movl    RDI, #32000	# int
1c4     # TLS is in R15
1c4     jmp,s   B26

1c6     B25: #	out( B29 B26 ) <- in( B28 ) top-of-loop Freq: 999983
1c6     movq    RDX, [R15 + #304 (32-bit)]	# ptr
1cd     testl   rax, [RDX]	# Safepoint: poll for GC        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:126 (line 25) L[0]=XMM0 L[1]=R9 L[2]=R14 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=rsp + #20 L[7]=R13 L[8]=RBX L[9]=R12
        # OopMap {r9=Oop r14=Oop xmm0=Oop off=461/0x1cd}
1cf     cmpl    R12, R11
1d2     jge     B29  P=0.000000 C=340634.000000

1d8     B26: #	out( B27 ) <- in( B24 B25 ) Loop( B26-B25 ) Freq: 999983
1d8     movl    RDX, R11	# spill
1db     subl    RDX, R12	# int
1de     cmpl    R11, R12
1e1     cmovll RDX, R10	# signed, int
1e5     cmpl    RDX, #32000	# unsigned
1eb     cmovlnbe RDX, RDI	# unsigned, int
1ee     addl    RDX, R12	# int

1f1     B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N201 strip mined) Freq: 9.99983e+11
1f1     load_vector XMM1,[R14 + #16 + R12 << #2]
1f8     load_vector XMM2,[R9 + #16 + R12 << #2]
1ff     vpsubd  XMM1,XMM1,XMM6	! sub packedI
203     vpsubd  XMM2,XMM2,XMM5	! sub packedI
207     vpmulld XMM7,XMM2,XMM2	! mul packedI
20c     vpmulld XMM8,XMM1,XMM2	! mul packedI
211     movslq  RSI, R12	# i2l
214     load_vector XMM1,[R9 + #48 + RSI << #2]
21b     load_vector XMM10,[R14 + #112 + RSI << #2]
222     load_vector XMM9,[R9 + #80 + RSI << #2]
229     load_vector XMM2,[R9 + #112 + RSI << #2]
230     load_vector XMM3,[R14 + #48 + RSI << #2]
237     load_vector XMM4,[R14 + #80 + RSI << #2]
23e     vpsubd  XMM1,XMM1,XMM5	! sub packedI
242     vpsubd  XMM11,XMM4,XMM6	! sub packedI
246     vpmulld XMM4,XMM1,XMM1	! mul packedI
24b     vpsubd  XMM3,XMM3,XMM6	! sub packedI
24f     vpsubd  XMM13,XMM2,XMM5	! sub packedI
253     vpmulld XMM3,XMM3,XMM1	! mul packedI
258     vpmulld XMM12,XMM13,XMM13	! mul packedI
25d     vpsubd  XMM1,XMM9,XMM5	! sub packedI
261     vpsubd  XMM2,XMM10,XMM6	! sub packedI
265     vpmulld XMM10,XMM11,XMM1	! mul packedI
26a     vpmulld XMM13,XMM2,XMM13	! mul packedI
26f     vpmulld XMM9,XMM1,XMM1	! mul packedI
274     vector_reduction_int R13,R13,XMM7 ; using XMM1, XMM2 as TEMP
296     vector_reduction_int R13,R13,XMM4 ; using XMM1, XMM2 as TEMP
2b8     vector_reduction_int R13,R13,XMM9 ; using XMM1, XMM2 as TEMP
2da     vector_reduction_int R13,R13,XMM12 ; using XMM1, XMM2 as TEMP
2fc     vector_reduction_int RBX,RBX,XMM8 ; using XMM1, XMM2 as TEMP
31c     vector_reduction_int RBX,RBX,XMM3 ; using XMM1, XMM2 as TEMP
33c     vector_reduction_int RBX,RBX,XMM10 ; using XMM1, XMM2 as TEMP
35c     vector_reduction_int RBX,RBX,XMM13 ; using XMM14, XMM11 as TEMP
37e     addl    R12, #32	# int
382     cmpl    R12, RDX
385     jl     B27	# loop end  P=1.000000 C=340634.000000

38b     B28: #	out( B25 ) <- in( B27 )  Freq: 476829
38b     jmp     B25

390     B29: #	out( B32 B30 ) <- in( B25 )  Freq: 0.999983
390     movl    R11, R8	# spill
393     addl    R11, #-7	# int
397     cmpl    R8, R11
39a     cmovll R11, RCX	# signed, int
        nop 	# 2 bytes pad for loops and calls
3a0     cmpl    R12, R11
3a3     jge     B32  P=0.500000 C=-1.000000

3a9     B30: #	out( B31 ) <- in( B29 )  Freq: 0.499992
3a9     # castII of R12
        nop 	# 3 bytes pad for loops and calls

3ac     B31: #	out( B31 B32 ) <- in( B30 B31 ) Loop( B31-B31 inner post of N969) Freq: 0.999983
3ac     load_vector XMM1,[R14 + #16 + R12 << #2]
3b3     load_vector XMM2,[R9 + #16 + R12 << #2]
3ba     vpsubd  XMM1,XMM1,XMM6	! sub packedI
3be     vpsubd  XMM2,XMM2,XMM5	! sub packedI
3c2     vpmulld XMM3,XMM2,XMM2	! mul packedI
3c7     vpmulld XMM1,XMM1,XMM2	! mul packedI
3cc     vector_reduction_int RBX,RBX,XMM1 ; using XMM4, XMM2 as TEMP
3ec     vector_reduction_int R13,R13,XMM3 ; using XMM1, XMM2 as TEMP
40e     addl    R12, #8	# int
412     cmpl    R12, R11
415     jl,s   B31	# loop end  P=0.500000 C=340634.000000

417     B32: #	out( B37 B33 ) <- in( B17 B31 B29 )  Freq: 0.999984
417     cmpl    R12, RAX
41a     jge,s   B37  P=0.000001 C=-1.000000

41c     B33: #	out( B34 ) <- in( B32 )  Freq: 0.999983
41c     # castII of R12

41c     B34: #	out( B39 B35 ) <- in( B33 B36 ) Loop( B34-B36 inner post of N431) Freq: 328960
        nop 	# 4 bytes pad for loops and calls
420     cmpl    R12, RAX	# unsigned
423     jnb,u   B39  P=0.000001 C=-1.000000

429     B35: #	out( B40 B36 ) <- in( B34 )  Freq: 328960
429     movl    RCX, [R9 + #16 + R12 << #2]	# int
42e     subl    RCX, [RSP + #16 (32-bit)]	# int
432     movl    R11, RCX	# spill
435     imull   R11, RCX	# int
439     addl    R13, R11	# int
        nop 	# 4 bytes pad for loops and calls
440     cmpl    R12, RBP	# unsigned
443     jnb,u   B40  P=0.000001 C=-1.000000

449     B36: #	out( B34 B37 ) <- in( B35 )  Freq: 328959
449     movl    R10, [R14 + #16 + R12 << #2]	# int
44e     subl    R10, [RSP + #20 (32-bit)]	# int
453     imull   R10, RCX	# int
457     addl    RBX, R10	# int
45a     incl    R12	# int
        nop 	# 3 bytes pad for loops and calls
460     cmpl    R12, RAX
463     jl,s   B34	# loop end  P=0.999999 C=340634.000000

465     B37: #	out( B38 ) <- in( B36 B32 )  Freq: 0.333328
465     movdq   R8, XMM0	# spill

46a     B38: #	out( N614 ) <- in( B12 B37 )  Freq: 0.333329
46a     movl    RSI, #-187	# int
46f     movq    RBP, R8	# spill
472     movq    [rsp + #0], R9	# spill
476     movq    [rsp + #8], R14	# spill
47b     movl    [rsp + #24], R13	# spill
480     movl    [rsp + #28], RBX	# spill
484     movl    [rsp + #36], R12	# spill
489     movl    [rsp + #40], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
490     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:80 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=rsp + #20 L[7]=rsp + #24 L[8]=rsp + #28 L[9]=rsp + #36 STK[0]=rsp + #36 STK[1]=rsp + #40
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1176/0x498}
498     stop	# ShouldNotReachHere

4ac     B39: #	out( N614 ) <- in( B34 B14 )  Freq: 0.33333
4ac     movl    RSI, #-28	# int
4b1     movdq   RBP, XMM0	# spill
4b6     movq    [rsp + #8], R14	# spill
4bb     movl    [rsp + #24], RBX	# spill
4bf     movl    [rsp + #32], R13	# spill
4c4     movq    [rsp + #40], R9	# spill
4c9     movl    [rsp + #36], R12	# spill
        nop 	# 2 bytes pad for loops and calls
4d0     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:88 (line 26) L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=rsp + #20 L[7]=_ L[8]=rsp + #24 L[9]=rsp + #36 STK[0]=rsp + #32 STK[1]=rsp + #40 STK[2]=rsp + #36
        # OopMap {rbp=Oop [8]=Oop [40]=Oop off=1240/0x4d8}
4d8     stop	# ShouldNotReachHere

4ec     B40: #	out( N614 ) <- in( B35 B15 )  Freq: 0.33333
4ec     movl    RSI, #-28	# int
4f1     movdq   RBP, XMM0	# spill
4f6     movq    [rsp + #0], R9	# spill
4fa     movl    [rsp + #24], R13	# spill
4ff     movl    [rsp + #32], RBX	# spill
503     movl    [rsp + #36], RCX	# spill
507     movq    [rsp + #40], R14	# spill
50c     movl    [rsp + #48], R12	# spill
        nop 	# 3 bytes pad for loops and calls
514     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:115 (line 27) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=rsp + #20 L[7]=rsp + #24 L[8]=_ L[9]=rsp + #48 STK[0]=rsp + #32 STK[1]=rsp + #36 STK[2]=rsp + #40 STK[3]=rsp + #48
        # OopMap {rbp=Oop [0]=Oop [40]=Oop off=1308/0x51c}
51c     stop	# ShouldNotReachHere

530     B41: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
530     movq    R11, R10	# spill
533     xorl    R8, R8	# ptr
536     jmp     B4

53b     B42: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
53b     xorl    R9, R9	# ptr
        nop 	# 2 bytes pad for loops and calls
540     jmp     B7

545     B43: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
545     xorl    R14, R14	# ptr
548     jmp     B10

54d     B44: #	out( N614 ) <- in( B18 )  Freq: 1.01327e-06
54d     stop	# ShouldNotReachHere

561     B45: #	out( N614 ) <- in( B19 )  Freq: 1.01327e-06
561     stop	# ShouldNotReachHere

575     B46: #	out( N614 ) <- in( B20 )  Freq: 1.01327e-06
575     stop	# ShouldNotReachHere

589     B47: #	out( N614 ) <- in( B21 )  Freq: 1.01327e-06
589     stop	# ShouldNotReachHere

59d     B48: #	out( N614 ) <- in( B22 )  Freq: 1.01326e-06
59d     stop	# ShouldNotReachHere

5b1     B49: #	out( N614 ) <- in( B23 )  Freq: 1.01326e-06
5b1     stop	# ShouldNotReachHere

5c5     B50: #	out( N614 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
5c5     movl    RSI, #-115	# int
5ca     movq    [rsp + #0], R14	# spill
5ce     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
5e0     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
5f2     movl    [rsp + #16], R13	# spill
5f7     movl    [rsp + #20], RBX	# spill
5fb     movl    [rsp + #24], R12	# spill
600     movq    [rsp + #32], R11	# spill
        nop 	# 3 bytes pad for loops and calls
608     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:76 (line 25) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #12 L[7]=rsp + #16 L[8]=rsp + #20 L[9]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=1552/0x610}
610     stop	# ShouldNotReachHere

624     B51: #	out( N614 ) <- in( B11 B10 )  Freq: 2.02655e-06
624     movl    RSI, #-138	# int
629     movq    RBP, R8	# spill
62c     movq    [rsp + #0], R9	# spill
630     movq    [rsp + #8], R14	# spill
635     movl    [rsp + #24], R13	# spill
63a     movl    [rsp + #28], RBX	# spill
63e     movl    [rsp + #32], R12	# spill
        nop 	# 1 bytes pad for loops and calls
644     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:76 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=rsp + #20 L[7]=rsp + #24 L[8]=rsp + #28 L[9]=rsp + #32
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1612/0x64c}
64c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2605  978 %     4       org.jml.regression.linear.IntegerLinearRegression::fit @ 76 (153 bytes)
 total in heap  [0x000000011a391a10,0x000000011a392698] = 3208
 relocation     [0x000000011a391b88,0x000000011a391c30] = 168
 main code      [0x000000011a391c40,0x000000011a3922a0] = 1632
 stub code      [0x000000011a3922a0,0x000000011a3922b8] = 24
 oops           [0x000000011a3922b8,0x000000011a3922c0] = 8
 metadata       [0x000000011a3922c0,0x000000011a3922d8] = 24
 scopes data    [0x000000011a3922d8,0x000000011a3923f8] = 288
 scopes pcs     [0x000000011a3923f8,0x000000011a392678] = 640
 dependencies   [0x000000011a392678,0x000000011a392680] = 8
 nul chk table  [0x000000011a392680,0x000000011a392698] = 24

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
 ;; N614: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a391c40: ;   {runtime_call os::breakpoint()}
  0x000000011a391c40: e85b 73f1 | ef90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B41 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a391c50: 8984 2400 | a0fe ff55 | 4883 ec50 | 4c8b 5648 | 4c89 1424 | 488b 6e40 | 448b 264c | 8b76 3844 
  0x000000011a391c70: 8b5e 2044 | 895c 2410 | 448b 5618 | 4489 5424 | 1444 8b6e | 108b 5e08 | 488b fec5 | f877 49ba 
  0x000000011a391c90: a020 3b0a | 0100 0000 | 41ff d24c | 8b14 2490 | 4d85 d20f | 84c7 0400 | 004d 8bda | 458b 4208 
  0x000000011a391cb0: ;   {metadata('org/jml/regression/linear/IntegerLinearRegression')}
  0x000000011a391cb0: 4181 f820 | 1d82 450f | 8548 0500 | 004d 8bc2 
 ;; B4: #	out( B42 B5 ) <- in( B3 B41 )  Freq: 0.999999
  0x000000011a391cc0: 4885 ed0f | 84b2 0400 | 0044 8b55 

  0x000000011a391ccc: ;   {metadata({type array int})}
  0x000000011a391ccc: 0841 81fa | 8681 8045 | 0f85 2b05 | 0000 4c8b | cd90 9090 | 4d85 f60f | 849c 0400 | 0045 8b56 
  0x000000011a391cec: ;   {metadata({type array int})}
  0x000000011a391cec: 0841 81fa | 8681 8045 | 0f85 0b05 

  0x000000011a391cf8: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
  0x000000011a391cf8: 0000 9090 | 9090 9090 

  0x000000011a391d00: ; implicit exception: dispatches to 0x000000011a392264
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@79 (line 25)
  0x000000011a391d00: 418b 410c 
 ;; B11: #	out( B51 B12 ) <- in( B10 )  Freq: 0.999996
  0x000000011a391d04: ; implicit exception: dispatches to 0x000000011a392264
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x000000011a391d04: 418b 6e0c 
 ;; B12: #	out( B38 B13 ) <- in( B11 )  Freq: 0.999995
  0x000000011a391d08: 443b e00f | 8d99 0300 

  0x000000011a391d10: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a391d10: 00c4 c1f9 | 6ec0 458b | c641 8bfc | ffc7 41c1 | e802 4183 | e007 4533 | d241 3bfa | 410f 4cfa 
  0x000000011a391d30: 3bf8 0f4f | f844 03c7 | 41bb 0400 | 0000 452b | d841 83e3 | 0744 03df | 443b d844 

  0x000000011a391d4c: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x000000011a391d4c: 0f4f d844 | 3be0 0f83 | 9403 0000 
 ;; B15: #	out( B40 B16 ) <- in( B14 )  Freq: 1.99998
  0x000000011a391d58: 438b 4ca1 | 102b 4c24 

  0x000000011a391d60: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a391d60: 1044 8bc1 | 440f afc1 

  0x000000011a391d68: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a391d68: 4503 e844 | 3be5 0f83 | b803 0000 
 ;; B16: #	out( B14 B17 ) <- in( B15 )  Freq: 1.99998
  0x000000011a391d74: 438b 7ca6 | 102b 7c24 | 140f aff9 

  0x000000011a391d80: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a391d80: 03df 41ff 

  0x000000011a391d84: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a391d84: c445 3be3 

  0x000000011a391d88: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a391d88: 7cc5 3bc5 | 448b c044 | 0f4f c545 | 8bd8 4183 | c3e1 b900 | 0000 8045 | 3bc3 440f | 4cd9 453b 
  0x000000011a391da8: e30f 8da8 | 0200 0044 | 3be0 0f83 | d503 0000 
 ;; B19: #	out( B45 B20 ) <- in( B18 )  Freq: 0.999988
  0x000000011a391db8: 443b e590 | 9090 9090 | 0f83 db03 | 0000 418b | d483 c21f | 3bd5 0f83 | e103 0000 
 ;; B21: #	out( B47 B22 ) <- in( B20 )  Freq: 0.999986
  0x000000011a391dd4: 443b e50f | 83ec 0300 | 0090 9090 | 3bd0 0f83 | f503 0000 
 ;; B23: #	out( B49 B24 ) <- in( B22 )  Freq: 0.999984
  0x000000011a391de8: 443b e00f | 8300 0400 | 00c4 e27d | 586c 2410 | c4e2 7d58 | 7424 14bf 

  0x000000011a391e00: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x000000011a391e00: 007d 0000 | eb12 498b | 9730 0100 

  0x000000011a391e0c: ; ImmutableOopMap {r9=Oop r14=Oop xmm0=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
                      ;   {poll}
  0x000000011a391e0c: 0085 0245 | 3be3 0f8d | b801 0000 
 ;; B26: #	out( B27 ) <- in( B24 B25 ) Loop( B26-B25 ) Freq: 999983
  0x000000011a391e18: 418b d341 | 2bd4 453b | dc41 0f4c | d281 fa00 | 7d00 000f | 47d7 4103 

  0x000000011a391e30: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x000000011a391e30: d4c4 817e | 6f4c a610 | c481 7e6f | 54a1 10c5 | f5fa cec5 | edfa d5c4 | e26d 40fa | c462 7540 
  0x000000011a391e50: c249 63f4 | c4c1 7e6f | 4cb1 30c4 | 417e 6f54 | b670 c441 | 7e6f 4cb1 | 50c4 c17e | 6f54 b170 
  0x000000011a391e70: c4c1 7e6f | 5cb6 30c4 | c17e 6f64 | b650 c5f5 | facd c55d | fade c4e2 | 7540 e1c5 | e5fa dec5 
  0x000000011a391e90: 6dfa edc4 | e265 40d9 | c442 1540 | e5c5 b5fa 

  0x000000011a391ea0: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a391ea0: cdc5 adfa | d6c4 6225 | 40d1 c442 | 6d40 edc4 | 6275 40c9 | c4e2 4502 | cfc4 e37d | 39ca 01c5 
  0x000000011a391ec0: f1fe cac4 | e271 02c9 | c4c1 796e | d5c5 f1fe | cac4 c179 | 7ecd c4e2 | 5d02 ccc4 | e37d 39ca 
  0x000000011a391ee0: 01c5 f1fe | cac4 e271 | 02c9 c4c1 | 796e d5c5 | f1fe cac4 | c179 7ecd | c4c2 3502 | c9c4 e37d 
  0x000000011a391f00: 39ca 01c5 | f1fe cac4 | e271 02c9 | c4c1 796e | d5c5 f1fe | cac4 c179 | 7ecd c4c2 | 1d02 ccc4 
  0x000000011a391f20: e37d 39ca | 01c5 f1fe | cac4 e271 | 02c9 c4c1 | 796e d5c5 | f1fe cac4 

  0x000000011a391f38: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a391f38: c179 7ecd | c4c2 3d02 | c8c4 e37d | 39ca 01c5 | f1fe cac4 | e271 02c9 | c5f9 6ed3 | c5f1 feca 
  0x000000011a391f58: c5f9 7ecb | c4e2 6502 | cbc4 e37d | 39ca 01c5 | f1fe cac4 | e271 02c9 | c5f9 6ed3 | c5f1 feca 
  0x000000011a391f78: c5f9 7ecb | c4c2 2d02 | cac4 e37d | 39ca 01c5 | f1fe cac4 | e271 02c9 | c5f9 6ed3 | c5f1 feca 
  0x000000011a391f98: c5f9 7ecb | c442 1502 | f5c4 437d | 39f3 01c4 | 4109 fef3 | c442 0902 | f6c5 796e | dbc4 4109 
  0x000000011a391fb8: fef3 c579 

  0x000000011a391fbc: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a391fbc: 7ef3 4183 

  0x000000011a391fc0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a391fc0: c420 443b | e20f 8c66 

  0x000000011a391fc8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a391fc8: feff ffe9 | 36fe ffff 
 ;; B29: #	out( B32 B30 ) <- in( B25 )  Freq: 0.999983
  0x000000011a391fd0: 458b d841 | 83c3 f945 | 3bc3 440f | 4cd9 9090 | 453b e30f | 8d6e 0000 

  0x000000011a391fe8: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x000000011a391fe8: 0090 9090 
 ;; B31: #	out( B31 B32 ) <- in( B30 B31 ) Loop( B31-B31 inner post of N969) Freq: 0.999983
  0x000000011a391fec: c481 7e6f | 4ca6 10c4 | 817e 6f54 | a110 c5f5 | face c5ed 

  0x000000011a392000: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a392000: fad5 c4e2 | 6d40 dac4 | e275 40ca | c4e2 7502 | e1c4 e37d | 39e2 01c5 | d9fe e2c4 | e259 02e4 
  0x000000011a392020: c5f9 6ed3 | c5d9 fee2 

  0x000000011a392028: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a392028: c5f9 7ee3 | c4e2 6502 | cbc4 e37d | 39ca 01c5 | f1fe cac4 | e271 02c9 | c4c1 796e | d5c5 f1fe 
  0x000000011a392048: cac4 c179 

  0x000000011a39204c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a39204c: 7ecd 4183 

  0x000000011a392050: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a392050: c408 453b 

  0x000000011a392054: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a392054: e37c 9544 

  0x000000011a392058: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
  0x000000011a392058: 3be0 7d49 
 ;; B33: #	out( B34 ) <- in( B32 )  Freq: 0.999983
 ;; B34: #	out( B39 B35 ) <- in( B33 B36 ) Loop( B34-B36 inner post of N431) Freq: 328960
  0x000000011a39205c: 9090 9090 | 443b e00f | 8383 0000 | 0043 8b4c | a110 2b4c 

  0x000000011a392070: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a392070: 2410 448b | d944 0faf 

  0x000000011a392078: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a392078: d945 03eb | 9090 9090 | 443b e50f | 83a3 0000 | 0047 8b54 | a610 442b | 5424 1444 | 0faf d141 
  0x000000011a392098: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a392098: 03da 41ff 

  0x000000011a39209c: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a39209c: c490 9090 | 443b e07c | b7c4 c1f9 

  0x000000011a3920a8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a3920a8: 7ec0 be45 | ffff ff49 | 8be8 4c89 | 0c24 4c89 | 7424 0844 | 896c 2418 | 895c 241c | 4489 6424 
  0x000000011a3920c8: 2489 4424 | 2890 9090 

  0x000000011a3920d0: ;   {runtime_call UncommonTrapBlob}
  0x000000011a3920d0: c5f8 77e8 

  0x000000011a3920d4: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a3920d4: 6844 58f8 

  0x000000011a3920d8: ;   {external_word}
  0x000000011a3920d8: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a3920e4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3920e4: e4f0 e865 | fed7 eff4 
 ;; B39: #	out( N614 ) <- in( B34 B14 )  Freq: 0.33333
  0x000000011a3920ec: bee4 ffff | ffc4 e1f9 | 7ec5 4c89 | 7424 0889 | 5c24 1844 | 896c 2420 | 4c89 4c24 | 2844 8964 
  0x000000011a39210c: 2424 9090 

  0x000000011a392110: ;   {runtime_call UncommonTrapBlob}
  0x000000011a392110: c5f8 77e8 

  0x000000011a392114: ; ImmutableOopMap {rbp=Oop [8]=Oop [40]=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
  0x000000011a392114: 2844 58f8 

  0x000000011a392118: ;   {external_word}
  0x000000011a392118: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a392124: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a392124: e4f0 e825 | fed7 eff4 
 ;; B40: #	out( N614 ) <- in( B35 B15 )  Freq: 0.33333
  0x000000011a39212c: bee4 ffff | ffc4 e1f9 | 7ec5 4c89 | 0c24 4489 | 6c24 1889 | 5c24 2089 | 4c24 244c | 8974 2428 
  0x000000011a39214c: 4489 6424 | 3090 9090 

  0x000000011a392154: ;   {runtime_call UncommonTrapBlob}
  0x000000011a392154: c5f8 77e8 

  0x000000011a392158: ; ImmutableOopMap {rbp=Oop [0]=Oop [40]=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x000000011a392158: e443 58f8 

  0x000000011a39215c: ;   {external_word}
  0x000000011a39215c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a392168: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a392168: e4f0 e8e1 

  0x000000011a39216c: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x000000011a39216c: fdd7 eff4 
 ;; B41: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x000000011a392170: 4d8b da45 | 33c0 e945 | fbff ff45 | 33c9 9090 | e958 fbff | ff45 33f6 | e96d fbff 

  0x000000011a39218c: ;   {external_word}
  0x000000011a39218c: ff48 bfa6 | 3d85 0a01 | 0000 0048 

  0x000000011a392198: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a392198: 83e4 f0e8 | b0fd d7ef 

  0x000000011a3921a0: ;   {external_word}
  0x000000011a3921a0: f448 bfa6 | 3d85 0a01 | 0000 0048 

  0x000000011a3921ac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3921ac: 83e4 f0e8 | 9cfd d7ef 

  0x000000011a3921b4: ;   {external_word}
  0x000000011a3921b4: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3921c0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3921c0: 83e4 f0e8 | 88fd d7ef 

  0x000000011a3921c8: ;   {external_word}
  0x000000011a3921c8: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3921d4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3921d4: 83e4 f0e8 | 74fd d7ef 

  0x000000011a3921dc: ;   {external_word}
  0x000000011a3921dc: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3921e8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3921e8: 83e4 f0e8 | 60fd d7ef 

  0x000000011a3921f0: ;   {external_word}
  0x000000011a3921f0: f448 bf31 | 3585 0a01 | 0000 0048 

  0x000000011a3921fc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3921fc: 83e4 f0e8 | 4cfd d7ef | f4be 8dff | ffff 4c89 | 3424 4889 | 4424 f88b | 4424 1089 | 4424 0848 
  0x000000011a39221c: 8b44 24f8 | 4889 4424 | f88b 4424 | 1489 4424 | 0c48 8b44 | 24f8 4489 | 6c24 1089 | 5c24 1444 
  0x000000011a39223c: 8964 2418 | 4c89 5c24 | 2090 9090 

  0x000000011a392248: ;   {runtime_call UncommonTrapBlob}
  0x000000011a392248: c5f8 77e8 

  0x000000011a39224c: ; ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
  0x000000011a39224c: f042 58f8 

  0x000000011a392250: ;   {external_word}
  0x000000011a392250: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a39225c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a39225c: e4f0 e8ed | fcd7 eff4 
 ;; B51: #	out( N614 ) <- in( B11 B10 )  Freq: 2.02655e-06
  0x000000011a392264: be76 ffff | ff49 8be8 | 4c89 0c24 | 4c89 7424 | 0844 896c | 2418 895c | 241c 4489 | 6424 2090 
  0x000000011a392284: ;   {runtime_call UncommonTrapBlob}
  0x000000011a392284: c5f8 77e8 

  0x000000011a392288: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
  0x000000011a392288: b442 58f8 

  0x000000011a39228c: ;   {external_word}
  0x000000011a39228c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a392298: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a392298: e4f0 e8b1 

  0x000000011a39229c: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
  0x000000011a39229c: fcd7 eff4 
[Exception Handler]
  0x000000011a3922a0: ;   {no_reloc}
  0x000000011a3922a0: e97b ee4c | f8e8 0000 | 0000 4883 

  0x000000011a3922ac: ;   {runtime_call DeoptimizationBlob}
  0x000000011a3922ac: 2c24 05e9 | ac45 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011a3922b8:   0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011a3922c0:   0x000000022c10e900 'org/jml/regression/linear/IntegerLinearRegression'
  0x000000011a3922c8:   0x000000022c040c30 {type array int}
  0x000000011a3922d0:   0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011a391c3f offset=ffffffff bits=0):
PcDesc(pc=0x000000011a391cfa offset=ba bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
PcDesc(pc=0x000000011a391d04 offset=c4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@79 (line 25)
PcDesc(pc=0x000000011a391d08 offset=c8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x000000011a391d11 offset=d1 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a391d4f offset=10f bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x000000011a391d61 offset=121 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a391d6b offset=12b bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a391d82 offset=142 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a391d85 offset=145 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a391d8a offset=14a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a391e04 offset=1c4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x000000011a391e0d offset=1cd bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg xmm0 [48],oop
    - l1: reg r9 [18],oop
    - l2: reg r14 [28],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: reg r13 [26],int
    - l8: reg rbx [6],int
    - l9: reg r12 [24],int
PcDesc(pc=0x000000011a391e0f offset=1cf bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x000000011a391e31 offset=1f1 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x000000011a391ea1 offset=261 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a391f3c offset=2fc bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a391fbe offset=37e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a391fc2 offset=382 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a391fcb offset=38b bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a391fec offset=3ac bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x000000011a392002 offset=3c2 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a39202c offset=3ec bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a39204e offset=40e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a392052 offset=412 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a392057 offset=417 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a39205c offset=41c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
PcDesc(pc=0x000000011a392072 offset=432 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a39207c offset=43c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a39209a offset=45a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a39209d offset=45d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a3920aa offset=46a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a3920d8 offset=498 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: stack[24]
    - l8: stack[28]
    - l9: stack[36]
   Expression stack
    - @0: stack[36]
    - @1: stack[40]
PcDesc(pc=0x000000011a392118 offset=4d8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[40],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: empty
    - l8: stack[24]
    - l9: stack[36]
   Expression stack
    - @0: stack[32]
    - @1: stack[40],oop
    - @2: stack[36]
PcDesc(pc=0x000000011a39215c offset=51c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[40],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: stack[24]
    - l8: empty
    - l9: stack[48]
   Expression stack
    - @0: stack[32]
    - @1: stack[36]
    - @2: stack[40],oop
    - @3: stack[48]
PcDesc(pc=0x000000011a392170 offset=530 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x000000011a392250 offset=610 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: empty
    - l4: empty
    - l5: stack[8]
    - l6: stack[12]
    - l7: stack[16]
    - l8: stack[20]
    - l9: stack[24]
PcDesc(pc=0x000000011a39228c offset=64c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: stack[24]
    - l8: stack[28]
    - l9: stack[32]
PcDesc(pc=0x000000011a3922a0 offset=660 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
PcDesc(pc=0x000000011a3922b9 offset=679 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 6 OopMaps

ImmutableOopMap {r9=Oop r14=Oop xmm0=Oop } pc offsets: 461 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1176 
ImmutableOopMap {rbp=Oop [8]=Oop [40]=Oop } pc offsets: 1240 
ImmutableOopMap {rbp=Oop [0]=Oop [40]=Oop } pc offsets: 1308 
ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop } pc offsets: 1552 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1612 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011a391cfa offset=ba):
   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
ScopeDesc(pc=0x000000011a391d04 offset=c4):
   org.jml.regression.linear.IntegerLinearRegression::fit@79 (line 25)
ScopeDesc(pc=0x000000011a391d08 offset=c8):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x000000011a391d11 offset=d1):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a391d4f offset=10f):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x000000011a391d61 offset=121):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a391d6b offset=12b):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a391d82 offset=142):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a391d85 offset=145):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a391d8a offset=14a):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a391e04 offset=1c4):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x000000011a391e0d offset=1cd):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg xmm0 [48],oop
    - l1: reg r9 [18],oop
    - l2: reg r14 [28],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: reg r13 [26],int
    - l8: reg rbx [6],int
    - l9: reg r12 [24],int
ScopeDesc(pc=0x000000011a391e0f offset=1cf):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x000000011a391e31 offset=1f1):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x000000011a391ea1 offset=261):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a391f3c offset=2fc):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a391fbe offset=37e):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a391fc2 offset=382):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a391fcb offset=38b):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a391fec offset=3ac):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x000000011a392002 offset=3c2):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a39202c offset=3ec):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a39204e offset=40e):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a392052 offset=412):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a392057 offset=417):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a39205c offset=41c):
   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
ScopeDesc(pc=0x000000011a392072 offset=432):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a39207c offset=43c):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a39209a offset=45a):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a39209d offset=45d):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a3920aa offset=46a):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a3920d8 offset=498):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: stack[24]
    - l8: stack[28]
    - l9: stack[36]
   Expression stack
    - @0: stack[36]
    - @1: stack[40]
ScopeDesc(pc=0x000000011a392118 offset=4d8):
   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[40],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: empty
    - l8: stack[24]
    - l9: stack[36]
   Expression stack
    - @0: stack[32]
    - @1: stack[40],oop
    - @2: stack[36]
ScopeDesc(pc=0x000000011a39215c offset=51c):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[40],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: stack[24]
    - l8: empty
    - l9: stack[48]
   Expression stack
    - @0: stack[32]
    - @1: stack[36]
    - @2: stack[40],oop
    - @3: stack[48]
ScopeDesc(pc=0x000000011a392170 offset=530):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x000000011a392250 offset=610):
   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: empty
    - l4: empty
    - l5: stack[8]
    - l6: stack[12]
    - l7: stack[16]
    - l8: stack[20]
    - l9: stack[24]
ScopeDesc(pc=0x000000011a39228c offset=64c):
   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: stack[24]
    - l8: stack[28]
    - l9: stack[32]
ScopeDesc(pc=0x000000011a3922a0 offset=660):
   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011a391b88: 6400
relocInfo@0x000000011a391b88 [type=6(runtime_call) addr=0x000000011a391c40 offset=0 format=1] | [destination=0x000000010a2a8fa0]
         @0x000000011a391b8a: f001cc70
relocInfo@0x000000011a391b8c [type=12(metadata) addr=0x000000011a391cb0 offset=112 format=3 data=1] | [metadata_addr=0x000000011a3922c0 *=0x000000022c10e900 offset=0]metadata_value=0x000000022c10e900: 'org/jml/regression/linear/IntegerLinearRegression'
         @0x000000011a391b8e: f002cc1d
relocInfo@0x000000011a391b90 [type=12(metadata) addr=0x000000011a391ccd offset=29 format=3 data=2] | [metadata_addr=0x000000011a3922c8 *=0x000000022c040c30 offset=0]metadata_value=0x000000022c040c30: {type array int}
         @0x000000011a391b92: f002cc20
relocInfo@0x000000011a391b94 [type=12(metadata) addr=0x000000011a391ced offset=32 format=3 data=2] | [metadata_addr=0x000000011a3922c8 *=0x000000022c040c30 offset=0]metadata_value=0x000000022c040c30: {type array int}
         @0x000000011a391b96: a120
relocInfo@0x000000011a391b96 [type=10(poll) addr=0x000000011a391e0d offset=288]
         @0x000000011a391b98: 66c6
relocInfo@0x000000011a391b98 [type=6(runtime_call) addr=0x000000011a3920d3 offset=710 format=1] | [destination=0x0000000112916540]
         @0x000000011a391b9a: f8030a7d877700017005
relocInfo@0x000000011a391ba2 [type=7(external_word) addr=0x000000011a3920d8 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391ba4: 640e
relocInfo@0x000000011a391ba4 [type=6(runtime_call) addr=0x000000011a3920e6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391ba6: 642d
relocInfo@0x000000011a391ba6 [type=6(runtime_call) addr=0x000000011a392113 offset=45 format=1] | [destination=0x0000000112916540]
         @0x000000011a391ba8: f8030a7d877700017005
relocInfo@0x000000011a391bb0 [type=7(external_word) addr=0x000000011a392118 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391bb2: 640e
relocInfo@0x000000011a391bb2 [type=6(runtime_call) addr=0x000000011a392126 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391bb4: 6431
relocInfo@0x000000011a391bb4 [type=6(runtime_call) addr=0x000000011a392157 offset=49 format=1] | [destination=0x0000000112916540]
         @0x000000011a391bb6: f8030a7d877700017005
relocInfo@0x000000011a391bbe [type=7(external_word) addr=0x000000011a39215c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391bc0: 640e
relocInfo@0x000000011a391bc0 [type=6(runtime_call) addr=0x000000011a39216a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391bc2: f8030a853da600017023
relocInfo@0x000000011a391bca [type=7(external_word) addr=0x000000011a39218d offset=35 data={0a853da60001}] | [target=0x000000010a853da6]
         @0x000000011a391bcc: 640e
relocInfo@0x000000011a391bcc [type=6(runtime_call) addr=0x000000011a39219b offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391bce: f8030a853da600017006
relocInfo@0x000000011a391bd6 [type=7(external_word) addr=0x000000011a3921a1 offset=6 data={0a853da60001}] | [target=0x000000010a853da6]
         @0x000000011a391bd8: 640e
relocInfo@0x000000011a391bd8 [type=6(runtime_call) addr=0x000000011a3921af offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391bda: f8030a85353100017006
relocInfo@0x000000011a391be2 [type=7(external_word) addr=0x000000011a3921b5 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a391be4: 640e
relocInfo@0x000000011a391be4 [type=6(runtime_call) addr=0x000000011a3921c3 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391be6: f8030a85353100017006
relocInfo@0x000000011a391bee [type=7(external_word) addr=0x000000011a3921c9 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a391bf0: 640e
relocInfo@0x000000011a391bf0 [type=6(runtime_call) addr=0x000000011a3921d7 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391bf2: f8030a85353100017006
relocInfo@0x000000011a391bfa [type=7(external_word) addr=0x000000011a3921dd offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a391bfc: 640e
relocInfo@0x000000011a391bfc [type=6(runtime_call) addr=0x000000011a3921eb offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391bfe: f8030a85353100017006
relocInfo@0x000000011a391c06 [type=7(external_word) addr=0x000000011a3921f1 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a391c08: 640e
relocInfo@0x000000011a391c08 [type=6(runtime_call) addr=0x000000011a3921ff offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391c0a: 644c
relocInfo@0x000000011a391c0a [type=6(runtime_call) addr=0x000000011a39224b offset=76 format=1] | [destination=0x0000000112916540]
         @0x000000011a391c0c: f8030a7d877700017005
relocInfo@0x000000011a391c14 [type=7(external_word) addr=0x000000011a392250 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391c16: 640e
relocInfo@0x000000011a391c16 [type=6(runtime_call) addr=0x000000011a39225e offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391c18: 6429
relocInfo@0x000000011a391c18 [type=6(runtime_call) addr=0x000000011a392287 offset=41 format=1] | [destination=0x0000000112916540]
         @0x000000011a391c1a: f8030a7d877700017005
relocInfo@0x000000011a391c22 [type=7(external_word) addr=0x000000011a39228c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a391c24: 640e
relocInfo@0x000000011a391c24 [type=6(runtime_call) addr=0x000000011a39229a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a391c26: 0006
relocInfo@0x000000011a391c26 [type=0(none) addr=0x000000011a3922a0 offset=6]
         @0x000000011a391c28: 6400
relocInfo@0x000000011a391c28 [type=6(runtime_call) addr=0x000000011a3922a0 offset=0 format=1] | [destination=0x0000000112861120]
         @0x000000011a391c2a: 640f
relocInfo@0x000000011a391c2a [type=6(runtime_call) addr=0x000000011a3922af offset=15 format=1] | [destination=0x0000000112916860]
         @0x000000011a391c2c: 0000
relocInfo@0x000000011a391c2c [type=0(none) addr=0x000000011a3922af offset=0]
         @0x000000011a391c2e: 0000
relocInfo@0x000000011a391c2e [type=0(none) addr=0x000000011a3922af offset=0]
         @0x000000011a391c30: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.IntegerLinearRegression
   [nmethod<=klass]org.jml.regression.linear.IntegerLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x000000011a391d00, 0x000000011a392264 > < 0x000000011a391d04, 0x000000011a392264 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000022c10e900 'org/jml/regression/linear/IntegerLinearRegression'
#2: 0x000000022c040c30 {type array int}
#3: 0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)    2624 1000 %     3       org.jml.regression.linear.IntegerLinearRegression::fit @ 25 (153 bytes)
 total in heap  [0x0000000112f1ed10,0x0000000112f1fb78] = 3688
 relocation     [0x0000000112f1ee88,0x0000000112f1efb8] = 304
 main code      [0x0000000112f1efc0,0x0000000112f1f600] = 1600
 stub code      [0x0000000112f1f600,0x0000000112f1f668] = 104
 oops           [0x0000000112f1f668,0x0000000112f1f670] = 8
 metadata       [0x0000000112f1f670,0x0000000112f1f678] = 8
 scopes data    [0x0000000112f1f678,0x0000000112f1f7e0] = 360
 scopes pcs     [0x0000000112f1f7e0,0x0000000112f1fb10] = 816
 dependencies   [0x0000000112f1fb10,0x0000000112f1fb18] = 8
 nul chk table  [0x0000000112f1fb18,0x0000000112f1fb78] = 96

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
 ;;  block B10 [0, 0]
  0x0000000112f1efc0: 448b 5608 | 49c1 e203 

  0x0000000112f1efc8: ;   {runtime_call ic_miss_stub}
  0x0000000112f1efc8: 4c3b d00f | 854f 699f | ff90 9090 | 9090 9090 | 9090 9090 | 9090 9090 
[Verified Entry Point]
  0x0000000112f1efe0: 8984 2400 | a0fe ff55 | 4883 ec60 

  0x0000000112f1efec: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1efec: 48bf b000 | 706e 0200 | 0000 8b9f | 1c01 0000 | 83c3 0289 | 9f1c 0100 | 0081 e3fe | 0700 0083 
  0x0000000112f1f00c: fb00 0f84 

  0x0000000112f1f010: ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@0 (line 11)
  0x0000000112f1f010: 7303 0000 
 ;;  block B11 [0, 0]
 ;;  block B0 [0, 4]
  0x0000000112f1f014: ; implicit exception: dispatches to 0x0000000112f1f3a8
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
  0x0000000112f1f014: 8b7a 0c8b 

  0x0000000112f1f018: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
  0x0000000112f1f018: 590c 3bfb 

  0x0000000112f1f01c: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f01c: 48bf b000 | 706e 0200 | 0000 48bb | 7001 0000 | 0000 0000 | 0f85 0a00 | 0000 48bb | 6001 0000 
  0x0000000112f1f03c: 0000 0000 | 488b 041f | 488d 4001 | 4889 041f 
 ;;   50 branch [NE] [B2] 
  0x0000000112f1f04c: 0f85 2902 

  0x0000000112f1f050: ;*if_icmpeq {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
  0x0000000112f1f050: 0000 488b | fabb 0000 | 0000 41b8 | 0000 0000 | b800 0000 | 00e9 7b00 

  0x0000000112f1f068: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x0000000112f1f068: 0000 9090 | 9090 9090 
 ;;  block B4 [32, 51]
  0x0000000112f1f070: 3b5f 0c0f | 8361 0300 | 0048 63d3 

  0x0000000112f1f07c: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x0000000112f1f07c: 8b54 9710 | 03d0 3b59 | 0c0f 83a3 | 0300 0048 | 63c3 8b44 

  0x0000000112f1f090: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x0000000112f1f090: 8110 4103 

  0x0000000112f1f094: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f094: c0ff c349 | b8b0 0070 | 6e02 0000 | 0045 8b88 | 2001 0000 | 4183 c102 | 4589 8820 | 0100 0041 
  0x0000000112f1f0b4: 81e1 fe3f | 0000 4183 | f900 0f84 

  0x0000000112f1f0c0: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x0000000112f1f0c0: 8c03 0000 | 4d8b 9730 

  0x0000000112f1f0c8: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x0000000112f1f0c8: 0100 0041 

  0x0000000112f1f0cc: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f0cc: 8502 49b8 | b000 706e | 0200 0000 | 41ff 80b0 | 0100 004c | 8bc0 488b 

  0x0000000112f1f0e4: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x0000000112f1f0e4: c244 8b4f 

  0x0000000112f1f0e8: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
  0x0000000112f1f0e8: 0c41 3bd9 

  0x0000000112f1f0ec: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f0ec: 48ba b000 | 706e 0200 | 0000 49bb | a001 0000 | 0000 0000 | 0f8c 0a00 | 0000 49bb | 9001 0000 
  0x0000000112f1f10c: 0000 0000 | 4e8b 2c1a | 4d8d 6d01 | 4e89 2c1a 
 ;;  122 branch [LT] [B4] 
  0x0000000112f1f11c: 0f8c 4eff 

  0x0000000112f1f120: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x0000000112f1f120: ffff 81f8 | 0000 0080 | 0f85 0c00 | 0000 33d2 | 4183 f9ff | 0f84 0400 | 0000 9941 | f7f9 488b 
  0x0000000112f1f140: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x0000000112f1f140: d849 8bc0 | 81f8 0000 | 0080 0f85 | 0c00 0000 | 33d2 4183 | f9ff 0f84 | 0400 0000 | 9941 f7f9 
  0x0000000112f1f160: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
  0x0000000112f1f160: 4c8b c0b8 | 0000 0000 | ba00 0000 | 0041 bb00 | 0000 00e9 

  0x0000000112f1f174: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
  0x0000000112f1f174: 8800 0000 
 ;;  block B7 [83, 126]
  0x0000000112f1f178: 3b47 0c0f | 833b 0300 | 004c 63e8 | 468b 6caf 

  0x0000000112f1f188: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
  0x0000000112f1f188: 1044 2beb | 4d8b f545 | 0faf f545 | 03f3 3b41 | 0c0f 8371 | 0300 004c | 63d8 468b 

  0x0000000112f1f1a4: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x0000000112f1f1a4: 5c99 1045 | 2bd8 450f | afdd 4403 

  0x0000000112f1f1b0: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f1b0: daff c048 | bab0 0070 | 6e02 0000 | 0044 8baa | 2001 0000 | 4183 c502 | 4489 aa20 | 0100 0041 
  0x0000000112f1f1d0: 81e5 fe3f | 0000 4183 | fd00 0f84 

  0x0000000112f1f1dc: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x0000000112f1f1dc: 5203 0000 | 4d8b 9730 

  0x0000000112f1f1e4: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
                      ;   {poll}
  0x0000000112f1f1e4: 0100 0041 

  0x0000000112f1f1e8: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f1e8: 8502 48ba | b000 706e | 0200 0000 | ff82 e801 | 0000 498b 

  0x0000000112f1f1fc: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x0000000112f1f1fc: d34d 8bde 
 ;;  block B6 [76, 80]
  0x0000000112f1f200: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f200: 413b c149 | bdb0 0070 | 6e02 0000 | 0049 bed8 | 0100 0000 | 0000 000f | 8c0a 0000 | 0049 bec8 
  0x0000000112f1f220: 0100 0000 | 0000 004f | 8b64 3500 | 4d8d 6424 | 014f 8964 | 3500 0f8c 

  0x0000000112f1f238: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x0000000112f1f238: 3cff ffff 
 ;;  block B8 [129, 152]
  0x0000000112f1f23c: 488b c281 | f800 0000 | 800f 850c | 0000 0033 | d241 83fb | ff0f 8404 | 0000 0099 

  0x0000000112f1f258: ; implicit exception: dispatches to 0x0000000112f1f553
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x0000000112f1f258: 41f7 fb89 

  0x0000000112f1f25c: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x0000000112f1f25c: 4610 0faf | c344 2bc0 

  0x0000000112f1f264: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
  0x0000000112f1f264: 4489 460c | 4883 c460 

  0x0000000112f1f26c: ;   {poll_return}
  0x0000000112f1f26c: 5d49 3ba7 | 2801 0000 | 0f87 0b03 

  0x0000000112f1f278: ;*return {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@152 (line 33)
  0x0000000112f1f278: 0000 c390 | 9090 9090 

  0x0000000112f1f280: ;   {no_reloc}
  0x0000000112f1f280: e925 0300 | 0000 0000 | 0000 498b | 8748 0100 | 0048 8d78 | 3849 3bbf | 5801 0000 | 0f87 1203 
  0x0000000112f1f2a0: 0000 4989 | bf48 0100 | 0048 c700 | 0100 0000 | 488b ca48 | c1e9 0389 | 4808 4833 | c989 480c 
  0x0000000112f1f2c0: 4833 c948 | bf05 0000 | 0000 0000 | 0048 894c | f808 48ff 

  0x0000000112f1f2d4: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x0000000112f1f2d4: cf75 f648 

  0x0000000112f1f2d8: ;   {metadata(method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f2d8: 8bd0 48be | b000 706e | 0200 0000 | 4883 8680 | 0100 0001 

  0x0000000112f1f2ec: ;   {oop("Arrays length are not equals"{0x0000000199b00000})}
  0x0000000112f1f2ec: 48ba 0000 | b099 0100 | 0000 488b 

  0x0000000112f1f2f8: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
  0x0000000112f1f2f8: f048 8944 

  0x0000000112f1f2fc: ;   {optimized virtual_call}
  0x0000000112f1f2fc: 2450 90e8 

  0x0000000112f1f300: ; ImmutableOopMap {[80]=Oop }
                      ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
  0x0000000112f1f300: 1c69 9fff | 488b 4424 | 50e9 d202 

  0x0000000112f1f30c: ;*athrow {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@16 (line 11)
  0x0000000112f1f30c: 0000 8984 | 2400 a0fe | ff55 4883 | ec60 488b | 5e48 488b | 4640 488b | 5638 8b4e | 3044 8b46 
  0x0000000112f1f32c: 2844 8b4e | 2048 8bfe | 4889 5c24 | 4848 8944 | 2440 4889 | 5424 3889 | 4c24 3044 | 8944 242c 
  0x0000000112f1f34c: 4489 4c24 

  0x0000000112f1f350: ;   {runtime_call SharedRuntime::OSR_migration_end(long*)}
  0x0000000112f1f350: 28e8 4a2d | 49f7 448b | 4c24 2849 | 8bd9 448b | 4424 2c8b | 4c24 3048 | 8bc1 488b | 5424 3848 
  0x0000000112f1f370: 8bca 488b | 5424 4048 | 8bfa 488b | 5424 4848 | 8bf2 e95e 

  0x0000000112f1f384: ;   {metadata({method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f384: fdff ff49 | ba00 fb48 | 6e02 0000 | 004c 8954 | 2408 48c7 | 0424 ffff 

  0x0000000112f1f39c: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112f1f39c: ffff e81d 

  0x0000000112f1f3a0: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*synchronization entry
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
  0x0000000112f1f3a0: b293 ffe9 | 6cfc ffff 
 ;; ImplicitNullCheckStub slow case
  0x0000000112f1f3a8: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f3a8: e893 1194 

  0x0000000112f1f3ac: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
                      ;   {external_word}
  0x0000000112f1f3ac: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f1f3b8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f3b8: 83e4 f0e8 | 902b 1ff7 

  0x0000000112f1f3c0: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f3c0: f4e8 7a11 

  0x0000000112f1f3c4: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
                      ;   {external_word}
  0x0000000112f1f3c4: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f1f3d4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f3d4: e877 2b1f | f7f4 4889 | 1c24 4889 

  0x0000000112f1f3e0: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f1f3e0: 7c24 08e8 

  0x0000000112f1f3e4: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x0000000112f1f3e4: 581a 94ff 

  0x0000000112f1f3e8: ;   {external_word}
  0x0000000112f1f3e8: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f1f3f4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f3f4: e4f0 e855 | 2b1f f7f4 
 ;; ImplicitNullCheckStub slow case
  0x0000000112f1f3fc: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f3fc: e83f 1194 

  0x0000000112f1f400: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000112f1f400: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f1f40c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f40c: 83e4 f0e8 | 3c2b 1ff7 

  0x0000000112f1f414: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f414: f4e8 2611 

  0x0000000112f1f418: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000112f1f418: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f1f428: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f428: e823 2b1f | f7f4 4889 | 1c24 4889 

  0x0000000112f1f434: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f1f434: 4c24 08e8 

  0x0000000112f1f438: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x0000000112f1f438: 041a 94ff 

  0x0000000112f1f43c: ;   {external_word}
  0x0000000112f1f43c: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f1f448: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f448: e4f0 e801 | 2b1f f7f4 
 ;; CounterOverflowStub slow case
  0x0000000112f1f450: ;   {metadata({method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f450: 49ba 00fb | 486e 0200 | 0000 4c89 | 5424 0848 | c704 2433 

  0x0000000112f1f464: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112f1f464: 0000 00e8 

  0x0000000112f1f468: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x0000000112f1f468: 54b1 93ff | e953 fcff 

  0x0000000112f1f470: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f470: ffe8 ca10 

  0x0000000112f1f474: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
                      ;   {external_word}
  0x0000000112f1f474: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f1f484: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f484: e8c7 2a1f 

  0x0000000112f1f488: ;   {runtime_call throw_div0_exception Runtime1 stub}
  0x0000000112f1f488: f7f4 e8b1 

  0x0000000112f1f48c: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
                      ;   {external_word}
  0x0000000112f1f48c: 1394 ff48 | bf69 7b75 | 0a01 0000 | 0048 83e4 

  0x0000000112f1f49c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f49c: f0e8 ae2a 

  0x0000000112f1f4a0: ;   {runtime_call throw_div0_exception Runtime1 stub}
  0x0000000112f1f4a0: 1ff7 f4e8 

  0x0000000112f1f4a4: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
  0x0000000112f1f4a4: 9813 94ff 

  0x0000000112f1f4a8: ;   {external_word}
  0x0000000112f1f4a8: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f1f4b4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f4b4: e4f0 e895 | 2a1f f7f4 
 ;; RangeCheckStub slow case
  0x0000000112f1f4bc: 4889 0424 | 4889 7c24 

  0x0000000112f1f4c4: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f1f4c4: 08e8 7619 

  0x0000000112f1f4c8: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
                      ;   {external_word}
  0x0000000112f1f4c8: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f1f4d8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f4d8: e873 2a1f 

  0x0000000112f1f4dc: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f4dc: f7f4 e85d 

  0x0000000112f1f4e0: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
                      ;   {external_word}
  0x0000000112f1f4e0: 1094 ff48 | bf69 7b75 | 0a01 0000 | 0048 83e4 

  0x0000000112f1f4f0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f4f0: f0e8 5a2a 

  0x0000000112f1f4f4: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f4f4: 1ff7 f4e8 

  0x0000000112f1f4f8: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
  0x0000000112f1f4f8: 4410 94ff 

  0x0000000112f1f4fc: ;   {external_word}
  0x0000000112f1f4fc: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f1f508: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f508: e4f0 e841 | 2a1f f7f4 
 ;; RangeCheckStub slow case
  0x0000000112f1f510: 4889 0424 | 4889 4c24 

  0x0000000112f1f518: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112f1f518: 08e8 2219 

  0x0000000112f1f51c: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
                      ;   {external_word}
  0x0000000112f1f51c: 94ff 48bf | 697b 750a | 0100 0000 | 4883 e4f0 

  0x0000000112f1f52c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f52c: e81f 2a1f 

  0x0000000112f1f530: ;   {metadata({method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression')}
  0x0000000112f1f530: f7f4 49ba | 00fb 486e | 0200 0000 | 4c89 5424 | 0848 c704 | 247e 0000 

  0x0000000112f1f548: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112f1f548: 00e8 72b0 

  0x0000000112f1f54c: ; ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x0000000112f1f54c: 93ff e98d 

  0x0000000112f1f550: ;   {runtime_call throw_div0_exception Runtime1 stub}
  0x0000000112f1f550: fcff ffe8 

  0x0000000112f1f554: ; ImmutableOopMap {rsi=Oop }
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x0000000112f1f554: e812 94ff 

  0x0000000112f1f558: ;   {external_word}
  0x0000000112f1f558: 48bf 697b | 750a 0100 | 0000 4883 

  0x0000000112f1f564: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f564: e4f0 e8e5 | 291f f7f4 
 ;; ImplicitNullCheckStub slow case
  0x0000000112f1f56c: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112f1f56c: e8cf 0f94 

  0x0000000112f1f570: ; ImmutableOopMap {rsi=Oop }
                      ;*putfield slope {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
                      ;   {external_word}
  0x0000000112f1f570: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f1f57c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f57c: 83e4 f0e8 | cc29 1ff7 

  0x0000000112f1f584: ;   {internal_word}
  0x0000000112f1f584: f449 ba6d | f2f1 1201 | 0000 004d | 8997 e803 

  0x0000000112f1f594: ;   {runtime_call SafepointBlob}
  0x0000000112f1f594: 0000 e985 

  0x0000000112f1f598: ;   {metadata(NULL)}
  0x0000000112f1f598: 7c9f ff48 | ba00 0000 | 0000 0000 | 00b8 000f 

  0x0000000112f1f5a8: ;   {runtime_call load_klass_patching Runtime1 stub}
  0x0000000112f1f5a8: 050a e8d1 

  0x0000000112f1f5ac: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x0000000112f1f5ac: c293 ffe9 | ccfc ffff 
 ;; NewInstanceStub slow case
  0x0000000112f1f5b4: ;   {runtime_call fast_new_instance Runtime1 stub}
  0x0000000112f1f5b4: 488b d2e8 

  0x0000000112f1f5b8: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x0000000112f1f5b8: 0405 94ff | e916 fdff | ff90 9049 | 8b87 5004 | 0000 49c7 | 8750 0400 | 0000 0000 | 0049 c787 
  0x0000000112f1f5d8: 5804 0000 | 0000 0000 | 4883 c460 

  0x0000000112f1f5e4: ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000112f1f5e4: 5de9 5622 | 94ff f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Stub Code]
  0x0000000112f1f600: ;   {no_reloc}
  0x0000000112f1f600: 9090 9090 

  0x0000000112f1f604: ;   {static_stub}
  0x0000000112f1f604: 9048 bb00 | 0000 0000 

  0x0000000112f1f60c: ;   {runtime_call}
  0x0000000112f1f60c: 0000 00e9 | fbff ffff 
[Exception Handler]
  0x0000000112f1f614: 48bb adde | 0000 0000 | 0000 48b9 | adde 0000 | 0000 0000 | 48be adde | 0000 0000 | 0000 48bf 
  0x0000000112f1f634: adde 0000 | 0000 0000 

  0x0000000112f1f63c: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000000112f1f63c: e89f ea93 

  0x0000000112f1f640: ;   {external_word}
  0x0000000112f1f640: ff48 bf69 | 7b75 0a01 | 0000 0048 

  0x0000000112f1f64c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000112f1f64c: 83e4 f0e8 | fc28 1ff7 

  0x0000000112f1f654: ;   {section_word}
  0x0000000112f1f654: f449 ba55 | f6f1 1201 | 0000 0041 

  0x0000000112f1f660: ;   {runtime_call DeoptimizationBlob}
  0x0000000112f1f660: 52e9 fa71 | 9fff f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x0000000112f1f668:   0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x0000000112f1f670:   0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x0000000112f1efbf offset=ffffffff bits=0):
PcDesc(pc=0x0000000112f1f014 offset=54 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@0 (line 11)
PcDesc(pc=0x0000000112f1f017 offset=57 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
PcDesc(pc=0x0000000112f1f01a offset=5a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
PcDesc(pc=0x0000000112f1f052 offset=92 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
PcDesc(pc=0x0000000112f1f06a offset=aa bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
PcDesc(pc=0x0000000112f1f080 offset=c0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
PcDesc(pc=0x0000000112f1f092 offset=d2 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x0000000112f1f0c4 offset=104 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000112f1f0cb offset=10b bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f0e5 offset=125 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000112f1f0e9 offset=129 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
PcDesc(pc=0x0000000112f1f122 offset=162 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x0000000112f1f141 offset=181 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
PcDesc(pc=0x0000000112f1f163 offset=1a3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
PcDesc(pc=0x0000000112f1f178 offset=1b8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
PcDesc(pc=0x0000000112f1f189 offset=1c9 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
PcDesc(pc=0x0000000112f1f1a7 offset=1e7 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
PcDesc(pc=0x0000000112f1f1e0 offset=220 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x0000000112f1f1e7 offset=227 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
PcDesc(pc=0x0000000112f1f200 offset=240 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x0000000112f1f23c offset=27c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x0000000112f1f25b offset=29b bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
PcDesc(pc=0x0000000112f1f25e offset=29e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
PcDesc(pc=0x0000000112f1f268 offset=2a8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
PcDesc(pc=0x0000000112f1f27b offset=2bb bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@152 (line 33)
PcDesc(pc=0x0000000112f1f2d7 offset=317 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
PcDesc(pc=0x0000000112f1f2f9 offset=339 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
PcDesc(pc=0x0000000112f1f304 offset=344 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[80],oop
PcDesc(pc=0x0000000112f1f30e offset=34e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@16 (line 11)
PcDesc(pc=0x0000000112f1f3a3 offset=3e3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f3ad offset=3ed bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f3c6 offset=406 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f3e8 offset=428 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f401 offset=441 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f41a offset=45a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f43c offset=47c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f46c offset=4ac bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f476 offset=4b6 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f48f offset=4cf bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f4a8 offset=4e8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f4ca offset=50a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f4e3 offset=523 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f4fc offset=53c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f51e offset=55e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f54e offset=58e bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
PcDesc(pc=0x0000000112f1f558 offset=598 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f571 offset=5b1 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f5af offset=5ef bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f5bc offset=5fc bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x0000000112f1f669 offset=6a9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 23 OopMaps

ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop } pc offsets: 267 551 
ImmutableOopMap {[80]=Oop } pc offsets: 836 
ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop } pc offsets: 995 1005 1030 
ImmutableOopMap {rcx=Oop rdi=Oop rsi=Oop } pc offsets: 1064 1089 1114 1148 1196 1206 1231 1256 1290 1315 1340 1374 1422 
ImmutableOopMap {rsi=Oop } pc offsets: 1432 1457 
ImmutableOopMap {} pc offsets: 1519 1532 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x0000000112f1f014 offset=54):
   org.jml.regression.linear.IntegerLinearRegression::fit@0 (line 11)
ScopeDesc(pc=0x0000000112f1f017 offset=57):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x0000000112f1f01a offset=5a):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x0000000112f1f052 offset=92):
   org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
ScopeDesc(pc=0x0000000112f1f06a offset=aa):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x0000000112f1f080 offset=c0):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x0000000112f1f092 offset=d2):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x0000000112f1f0c4 offset=104):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000112f1f0cb offset=10b):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f0e5 offset=125):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000112f1f0e9 offset=129):
   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x0000000112f1f122 offset=162):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x0000000112f1f141 offset=181):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x0000000112f1f163 offset=1a3):
   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
ScopeDesc(pc=0x0000000112f1f178 offset=1b8):
   org.jml.regression.linear.IntegerLinearRegression::fit@76 (line 25)
ScopeDesc(pc=0x0000000112f1f189 offset=1c9):
   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
ScopeDesc(pc=0x0000000112f1f1a7 offset=1e7):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
ScopeDesc(pc=0x0000000112f1f1e0 offset=220):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x0000000112f1f1e7 offset=227):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
ScopeDesc(pc=0x0000000112f1f200 offset=240):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x0000000112f1f23c offset=27c):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x0000000112f1f25b offset=29b):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
ScopeDesc(pc=0x0000000112f1f25e offset=29e):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
ScopeDesc(pc=0x0000000112f1f268 offset=2a8):
   org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
ScopeDesc(pc=0x0000000112f1f27b offset=2bb):
   org.jml.regression.linear.IntegerLinearRegression::fit@152 (line 33)
ScopeDesc(pc=0x0000000112f1f2d7 offset=317):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
ScopeDesc(pc=0x0000000112f1f2f9 offset=339):
   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
ScopeDesc(pc=0x0000000112f1f304 offset=344):
   org.jml.regression.linear.IntegerLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    -81.628 ms/op
 l9: empty
   Expression stack
    - @0: stack[80],oop
ScopeDesc(pc=0x0000000112f1f30e offset=34e):
   org.jml.regression.linear.IntegerLinearRegression::fit@16 (line 11)
ScopeDesc(pc=0x0000000112f1f3a3 offset=3e3):
   org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f3ad offset=3ed):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f3c6 offset=406):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f3e8 offset=428):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f401 offset=441):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f41a offset=45a):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
  # Warmup Iteration   2:   - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f43c offset=47c):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f46c offset=4ac):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg rdx [4],int
    - l4: reg rax [0],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f476 offset=4b6):
   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f48f offset=4cf):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f4a8 offset=4e8):
   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f4ca offset=50a):
   org.jml.regression.linear.IntegerLinearRegression::fit@88 (line 26)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f4e3 offset=523):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f4fc offset=53c):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f51e offset=55e):
   org.jml.regression.linear.IntegerLinearRegression::fit@115 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f54e offset=58e):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg rbx [6],int
    - l6: reg r8 [16],int
    - l7: reg r14 [28],int
    - l8: reg r11 [22],int
    - l9: reg rax [0],int
ScopeDesc(pc=0x0000000112f1f558 offset=598):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f571 offset=5b1):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f5af offset=5ef):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000000112f1f5bc offset=5fc):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x0000000112f1ee88: 600b
relocInfo@0x0000000112f1ee88 [type=6(runtime_call) addr=0x0000000112f1efcb offset=11] | [destination=0x0000000112915920]
         @0x0000000112f1ee8a: c021
relocInfo@0x0000000112f1ee8a [type=12(metadata) addr=0x0000000112f1efec offset=33] | [metadata_addr=0x0000000112f1efee *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee8c: c030
relocInfo@0x0000000112f1ee8c [type=12(metadata) addr=0x0000000112f1f01c offset=48] | [metadata_addr=0x0000000112f1f01e *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee8e: c07b
relocInfo@0x0000000112f1ee8e [type=12(metadata) addr=0x0000000112f1f097 offset=123] | [metadata_addr=0x0000000112f1f099 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee90: a034
relocInfo@0x0000000112f1ee90 [type=10(poll) addr=0x0000000112f1f0cb offset=52]
         @0x0000000112f1ee92: c003
relocInfo@0x0000000112f1ee92 [type=12(metadata) addr=0x0000000112f1f0ce offset=3] | [metadata_addr=0x0000000112f1f0d0 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee94: c01e
relocInfo@0x0000000112f1ee94 [type=12(metadata) addr=0x0000000112f1f0ec offset=30] | [metadata_addr=0x0000000112f1f0ee *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee96: c0c7
relocInfo@0x0000000112f1ee96 [type=12(metadata) addr=0x0000000112f1f1b3 offset=199] | [metadata_addr=0x0000000112f1f1b5 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee98: a034
relocInfo@0x0000000112f1ee98 [type=10(poll) addr=0x0000000112f1f1e7 offset=52]
         @0x0000000112f1ee9a: c003
relocInfo@0x0000000112f1ee9a [type=12(metadata) addr=0x0000000112f1f1ea offset=3] | [metadata_addr=0x0000000112f1f1ec *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee9c: c019
relocInfo@0x0000000112f1ee9c [type=12(metadata) addr=0x0000000112f1f203 offset=25] | [metadata_addr=0x0000000112f1f205 *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ee9e: b06a
relocInfo@0x0000000112f1ee9e [type=11(poll_return) addr=0x0000000112f1f26d offset=106]
         @0x0000000112f1eea0: 0013
relocInfo@0x0000000112f1eea0 [type=0(none) addr=0x0000000112f1f280 offset=19]
         @0x0000000112f1eea2: c05a
relocInfo@0x0000000112f1eea2 [type=12(metadata) addr=0x0000000112f1f2da offset=90] | [metadata_addr=0x0000000112f1f2dc *=0x000000026e7000b0 offset=0]metadata_value=0x000000026e7000b0: method data for {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1eea4: 1012
relocInfo@0x0000000112f1eea4 [type=1(oop) addr=0x0000000112f1f2ec offset=18] | [oop_addr=0x0000000112f1f2ee *=0x0000000199b00000 offset=0]
         @0x0000000112f1eea6: 3413
relocInfo@0x0000000112f1eea6 [type=3(opt_virtual_call) addr=0x0000000112f1f2ff offset=19 format=1] | [destination=0x0000000112915c20 metadata=0x0000000000000000]
         @0x0000000112f1eea8: 6452
relocInfo@0x0000000112f1eea8 [type=6(runtime_call) addr=0x0000000112f1f351 offset=82 format=1] | [destination=0x000000010a3b20a0]
         @0x0000000112f1eeaa: c036
relocInfo@0x0000000112f1eeaa [type=12(metadata) addr=0x0000000112f1f387 offset=54] | [metadata_addr=0x0000000112f1f389 *=0x000000026e48fb00 offset=0]metadata_value=0x000000026e48fb00: {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1eeac: 6417
relocInfo@0x0000000112f1eeac [type=6(runtime_call) addr=0x0000000112f1f39e offset=23 format=1] | [destination=0x000000011285a5c0]
         @0x0000000112f1eeae: 640a
relocInfo@0x0000000112f1eeae [type=6(runtime_call) addr=0x0000000112f1f3a8 offset=10 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1eeb0: f8030a757b6900017005
relocInfo@0x0000000112f1eeb8 [type=7(external_word) addr=0x0000000112f1f3ad offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1eeba: 640e
relocInfo@0x0000000112f1eeba [type=6(runtime_call) addr=0x0000000112f1f3bb offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1eebc: 6406
relocInfo@0x0000000112f1eebc [type=6(runtime_call) addr=0x0000000112f1f3c1 offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1eebe: f8030a757b6900017005
relocInfo@0x0000000112f1eec6 [type=7(external_word) addr=0x0000000112f1f3c6 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1eec8: 640e
relocInfo@0x0000000112f1eec8 [type=6(runtime_call) addr=0x0000000112f1f3d4 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1eeca: 640f
relocInfo@0x0000000112f1eeca [type=6(runtime_call) addr=0x0000000112f1f3e3 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f1eecc: f8030a757b6900017005
relocInfo@0x0000000112f1eed4 [type=7(external_word) addr=0x0000000112f1f3e8 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1eed6: 640e
relocInfo@0x0000000112f1eed6 [type=6(runtime_call) addr=0x0000000112f1f3f6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1eed8: 6406
relocInfo@0x0000000112f1eed8 [type=6(runtime_call) addr=0x0000000112f1f3fc offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1eeda: f8030a757b6900017005
relocInfo@0x0000000112f1eee2 [type=7(external_word) addr=0x0000000112f1f401 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1eee4: 640e
relocInfo@0x0000000112f1eee4 [type=6(runtime_call) addr=0x0000000112f1f40f offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1eee6: 6406
relocInfo@0x0000000112f1eee6 [type=6(runtime_call) addr=0x0000000112f1f415 offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1eee8: f8030a757b6900017005
relocInfo@0x0000000112f1eef0 [type=7(external_word) addr=0x0000000112f1f41a offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1eef2: 640e
relocInfo@0x0000000112f1eef2 [type=6(runtime_call) addr=0x0000000112f1f428 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1eef4: 640f
relocInfo@0x0000000112f1eef4 [type=6(runtime_call) addr=0x0000000112f1f437 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f1eef6: f8030a757b6900017005
relocInfo@0x0000000112f1eefe [type=7(external_word) addr=0x0000000112f1f43c offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef00: 640e
relocInfo@0x0000000112f1ef00 [type=6(runtime_call) addr=0x0000000112f1f44a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef02: c006
relocInfo@0x0000000112f1ef02 [type=12(metadata) addr=0x0000000112f1f450 offset=6] | [metadata_addr=0x0000000112f1f452 *=0x000000026e48fb00 offset=0]metadata_value=0x000000026e48fb00: {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ef04: 6417
relocInfo@0x0000000112f1ef04 [type=6(runtime_call) addr=0x0000000112f1f467 offset=23 format=1] | [destination=0x000000011285a5c0]
         @0x0000000112f1ef06: 640a
relocInfo@0x0000000112f1ef06 [type=6(runtime_call) addr=0x0000000112f1f471 offset=10 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1ef08: f8030a757b6900017005
relocInfo@0x0000000112f1ef10 [type=7(external_word) addr=0x0000000112f1f476 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef12: 640e
relocInfo@0x0000000112f1ef12 [type=6(runtime_call) addr=0x0000000112f1f484 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef14: 6406
relocInfo@0x0000000112f1ef14 [type=6(runtime_call) addr=0x0000000112f1f48a offset=6 format=1] | [destination=0x0000000112860840]
         @0x0000000112f1ef16: f8030a757b6900017005
relocInfo@0x0000000112f1ef1e [type=7(external_word) addr=0x0000000112f1f48f offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef20: 640e
relocInfo@0x0000000112f1ef20 [type=6(runtime_call) addr=0x0000000112f1f49d offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef22: 6406
relocInfo@0x0000000112f1ef22 [type=6(runtime_call) addr=0x0000000112f1f4a3 offset=6 format=1] | [destination=0x0000000112860840]
         @0x0000000112f1ef24: f8030a757b6900017005
relocInfo@0x0000000112f1ef2c [type=7(external_word) addr=0x0000000112f1f4a8 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef2e: 640e
relocInfo@0x0000000112f1ef2e [type=6(runtime_call) addr=0x0000000112f1f4b6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef30: 640f
relocInfo@0x0000000112f1ef30 [type=6(runtime_call) addr=0x0000000112f1f4c5 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f1ef32: f8030a757b6900017005
relocInfo@0x0000000112f1ef3a [type=7(external_word) addr=0x0000000112f1f4ca offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef3c: 640e
relocInfo@0x0000000112f1ef3c [type=6(runtime_call) addr=0x0000000112f1f4d8 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef3e: 6406
relocInfo@0x0000000112f1ef3e [type=6(runtime_call) addr=0x0000000112f1f4de offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1ef40: f8030a757b6900017005
relocInfo@0x0000000112f1ef48 [type=7(external_word) addr=0x0000000112f1f4e3 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef4a: 640e
relocInfo@0x0000000112f1ef4a [type=6(runtime_call) addr=0x0000000112f1f4f1 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef4c: 6406
relocInfo@0x0000000112f1ef4c [type=6(runtime_call) addr=0x0000000112f1f4f7 offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1ef4e: f8030a757b6900017005
relocInfo@0x0000000112f1ef56 [type=7(external_word) addr=0x0000000112f1f4fc offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef58: 640e
relocInfo@0x0000000112f1ef58 [type=6(runtime_call) addr=0x0000000112f1f50a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef5a: 640f
relocInfo@0x0000000112f1ef5a [type=6(runtime_call) addr=0x0000000112f1f519 offset=15 format=1] | [destination=0x0000000112860e40]
         @0x0000000112f1ef5c: f8030a757b6900017005
relocInfo@0x0000000112f1ef64 [type=7(external_word) addr=0x0000000112f1f51e offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef66: 640e
relocInfo@0x0000000112f1ef66 [type=6(runtime_call) addr=0x0000000112f1f52c offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef68: c006
relocInfo@0x0000000112f1ef68 [type=12(metadata) addr=0x0000000112f1f532 offset=6] | [metadata_addr=0x0000000112f1f534 *=0x000000026e48fb00 offset=0]metadata_value=0x000000026e48fb00: {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
         @0x0000000112f1ef6a: 6417
relocInfo@0x0000000112f1ef6a [type=6(runtime_call) addr=0x0000000112f1f549 offset=23 format=1] | [destination=0x000000011285a5c0]
         @0x0000000112f1ef6c: 640a
relocInfo@0x0000000112f1ef6c [type=6(runtime_call) addr=0x0000000112f1f553 offset=10 format=1] | [destination=0x0000000112860840]
         @0x0000000112f1ef6e: f8030a757b6900017005
relocInfo@0x0000000112f1ef76 [type=7(external_word) addr=0x0000000112f1f558 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef78: 640e
relocInfo@0x0000000112f1ef78 [type=6(runtime_call) addr=0x0000000112f1f566 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef7a: 6406
relocInfo@0x0000000112f1ef7a [type=6(runtime_call) addr=0x0000000112f1f56c offset=6 format=1] | [destination=0x0000000112860540]
         @0x0000000112f1ef7c: f8030a757b6900017005
relocInfo@0x0000000112f1ef84 [type=7(external_word) addr=0x0000000112f1f571 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1ef86: 640e
relocInfo@0x0000000112f1ef86 [type=6(runtime_call) addr=0x0000000112f1f57f offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1ef88: f3188006
relocInfo@0x0000000112f1ef8a [type=8(internal_word) addr=0x0000000112f1f585 offset=6 data=792] | [target=0x0000000112f1f26d]
         @0x0000000112f1ef8c: 6411
relocInfo@0x0000000112f1ef8c [type=6(runtime_call) addr=0x0000000112f1f596 offset=17 format=1] | [destination=0x0000000112917220]
         @0x0000000112f1ef8e: c005
relocInfo@0x0000000112f1ef8e [type=12(metadata) addr=0x0000000112f1f59b offset=5] | [metadata_addr=0x0000000112f1f59d *=0x0000000000000000 offset=0]
         @0x0000000112f1ef90: 640f
relocInfo@0x0000000112f1ef90 [type=6(runtime_call) addr=0x0000000112f1f5aa offset=15 format=1] | [destination=0x000000011285b880]
         @0x0000000112f1ef92: 640d
relocInfo@0x0000000112f1ef92 [type=6(runtime_call) addr=0x0000000112f1f5b7 offset=13 format=1] | [destination=0x000000011285fac0]
         @0x0000000112f1ef94: 642e
relocInfo@0x0000000112f1ef94 [type=6(runtime_call) addr=0x0000000112f1f5e5 offset=46 format=1] | [destination=0x0000000112861840]
         @0x0000000112f1ef96: 001b
relocInfo@0x0000000112f1ef96 [type=0(none) addr=0x0000000112f1f600 offset=27]
         @0x0000000112f1ef98: f801fcc15005
relocInfo@0x0000000112f1ef9c [type=5(static_stub) addr=0x0000000112f1f605 offset=5 data=-831] | [static_call=0x0000000112f1f2ff]
         @0x0000000112f1ef9e: c000
relocInfo@0x0000000112f1ef9e [type=12(metadata) addr=0x0000000112f1f605 offset=0] | [metadata_addr=0x0000000112f1f607 *=0x0000000000000000 offset=0]
         @0x0000000112f1efa0: 640a
relocInfo@0x0000000112f1efa0 [type=6(runtime_call) addr=0x0000000112f1f60f offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x0000000112f1efa2: 642d
relocInfo@0x0000000112f1efa2 [type=6(runtime_call) addr=0x0000000112f1f63c offset=45 format=1] | [destination=0x000000011285e0e0]
         @0x0000000112f1efa4: f8030a757b6900017005
relocInfo@0x0000000112f1efac [type=7(external_word) addr=0x0000000112f1f641 offset=5 data={0a757b690001}] | [target=0x000000010a757b69]
         @0x0000000112f1efae: 640e
relocInfo@0x0000000112f1efae [type=6(runtime_call) addr=0x0000000112f1f64f offset=14 format=1] | [destination=0x000000010a111f50]
         @0x0000000112f1efb0: f801feae9006
relocInfo@0x0000000112f1efb4 [type=9(section_word) addr=0x0000000112f1f655 offset=6 data=-338] | [target=0x0000000112f1f655]
         @0x0000000112f1efb6: 640c
relocInfo@0x0000000112f1efb6 [type=6(runtime_call) addr=0x0000000112f1f661 offset=12 format=1] | [destination=0x0000000112916860]
         @0x0000000112f1efb8: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 11 entries, 92 bytes):
{
   < 0x0000000112f1f014, 0x0000000112f1f3a8 > < 0x0000000112f1f017, 0x0000000112f1f3c1 > < 0x0000000112f1f082, 0x0000000112f1f3fc > 
   < 0x0000000112f1f082, 0x0000000112f1f415 > < 0x0000000112f1f0e5, 0x0000000112f1f471 > < 0x0000000112f1f13b, 0x0000000112f1f48a > 
   < 0x0000000112f1f15d, 0x0000000112f1f4a3 > < 0x0000000112f1f196, 0x0000000112f1f4de > < 0x0000000112f1f196, 0x0000000112f1f4f7 > 
   < 0x0000000112f1f258, 0x0000000112f1f553 > < 0x0000000112f1f25b, 0x0000000112f1f56c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 1001 ------------------------
{method}
 - this oop:          0x000000026e48fb00
 - method holder:     'org/jml/regression/linear/IntegerLinearRegression'
 - constants:         0x000000026e48f5c0 constant pool [70]/operands[5] {0x000000026e48f5c0} for 'org/jml/regression/linear/IntegerLinearRegression' cache=0x000000026e48fec0
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([I[I)V'
 - max stack:         5
 - max locals:        10
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000011280de20
 - adapters:          AHE@0x00007fceee102e70: 0xbbb00000 i2c: 0x0000000112885ee0 c2i: 0x0000000112885fbf c2iUV: 0x0000000112885f92 c2iNCI: 0x0000000112885ffc
 - compiled entry     0x0000000112885fbf
 - code size:         153
 - code start:        0x000000026e48f9c8
 - code end (excl):   0x000000026e48fa61
 - method data:       0x000000026e7000b0
 - checked ex length: 0
 - linenumber start:  0x000000026e48fa61
 - localvar length:   11
 - localvar start:    0x000000026e48fa7a

------------------------ OptoAssembly for Compile_id = 1001 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N859: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B59 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c     movq    R13, [RSI + #72 (8-bit)]	# ptr
020     movq    RBP, [RSI + #64 (8-bit)]	# ptr
024     movl    R12, [RSI + #32 (8-bit)]	# int
028     movq    RBX, [RSI + #56 (8-bit)]	# ptr
02c     movl    R11, [RSI + #48 (8-bit)]	# int
030     movl    [rsp + #16], R11	# spill
035     movl    R10, [RSI + #40 (8-bit)]	# int
039     movl    [rsp + #20], R10	# spill
03e     movq    RDI, RSI	# spill
041     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
051     testq   R13, R13	# ptr
054     je     B59  P=0.001000 C=-1.000000

05a     B2: #	out( B82 B3 ) <- in( B1 )  Freq: 0.999
05a     movl    R11, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 2 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass org/jml/regression/linear/IntegerLinearRegression: 0x00007fcef322da20:Constant:exact *	# compressed klass ptr
067     jne,u   B82  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R14, R13	# spill
070     # checkcastPP of R14

070     B4: #	out( B60 B5 ) <- in( B3 B59 )  Freq: 0.999999
070     testq   RBP, RBP	# ptr
073     je     B60  P=0.001000 C=-1.000000

079     B5: #	out( B82 B6 ) <- in( B4 )  Freq: 0.998999
079     movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R11, narrowklass: precise klass [I: 0x00007fcef1215850:Constant:exact *	# compressed klass ptr
087     jne,u   B82  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     movq    R11, RBP	# spill
090     # checkcastPP of R11

090     B7: #	out( B61 B8 ) <- in( B6 B60 )  Freq: 0.999998
090     testq   RBX, RBX	# ptr
093     je     B61  P=0.001000 C=-1.000000

099     B8: #	out( B82 B9 ) <- in( B7 )  Freq: 0.998998
099     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R10, narrowklass: precise klass [I: 0x00007fcef1215850:Constant:exact *	# compressed klass ptr
0a7     jne,u   B82  P=0.000001 C=-1.000000

0ad     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0ad     # checkcastPP of RBX

0ad     B10: #	out( B83 B11 ) <- in( B9 B61 )  Freq: 0.999997
0ad     movl    RDI, [R11 + #12 (8-bit)]	# range
0b1     NullCheck R11

0b1     B11: #	out( B84 B12 ) <- in( B10 )  Freq: 0.999996
0b1     movl    R9, [RBX + #12 (8-bit)]	# range
0b5     NullCheck RBX

0b5     B12: #	out( B68 B13 ) <- in( B11 )  Freq: 0.999995
0b5     # TLS is in R15
0b5     xorl    RSI, RSI	# int
0b7     cmpl    R12, RDI
        nop 	# 6 bytes pad for loops and calls
0c0     jge     B68  P=0.000001 C=15639040.000000

0c6     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0c6     movl    R8, R12	# spill
0c9     incl    R8	# int
0cc     cmpl    R8, RSI
0cf     cmovllt R8, RSI	# max
0d3     cmpl    R8, RDI
0d6     cmovlgt R8, RDI	# min

0da     B14: #	out( B62 B15 ) <- in( B13 B17 ) Loop( B14-B17 inner pre of N739) Freq: 1.99998
        nop 	# 6 bytes pad for loops and calls
0e0     cmpl    R12, RDI	# unsigned
0e3     jnb,u   B62  P=0.000001 C=-1.000000

0e9     B15: #	out( B65 B16 ) <- in( B14 )  Freq: 1.99998
0e9     movl    RBP, [rsp + #16]	# spill
0ed     addl    RBP, [R11 + #16 + R12 << #2]	# int
0f2     cmpl    R12, R9	# unsigned
0f5     jnb,u   B65  P=0.000001 C=-1.000000

0fb     B16: #	out( B18 B17 ) <- in( B15 )  Freq: 1.99998
0fb     movl    R13, [rsp + #20]	# spill
100     addl    R13, [RBX + #16 + R12 << #2]	# int
105     incl    R12	# int
108     cmpl    R12, R8
10b     jge,s   B18	# loop end  P=0.500000 C=15639040.000000

10d     B17: #	out( B14 ) <- in( B16 )  Freq: 0.99999
10d     movl    [rsp + #16], RBP	# spill
111     movl    [rsp + #20], R13	# spill
116     jmp,s   B14

118     B18: #	out( B29 B19 ) <- in( B16 )  Freq: 0.99999
118     cmpl    RDI, R9
11b     movl    R10, RDI	# spill
11e     cmovlgt R10, R9	# min
122     movl    RCX, R10	# spill
125     addl    RCX, #-7	# int
128     movl    R8, #-2147483648	# int
12e     cmpl    R10, RCX
131     cmovll RCX, R8	# signed, int
135     cmpl    R12, RCX
138     jge     B29  P=0.000001 C=-1.000000

13e     B19: #	out( B69 B20 ) <- in( B18 )  Freq: 0.999989
13e     # castII of R12
        nop 	# 2 bytes pad for loops and calls
140     cmpl    R12, RDI	# unsigned
143     jnb,u   B69  P=0.000001 C=-1.000000

149     B20: #	out( B70 B21 ) <- in( B19 )  Freq: 0.999988
149     cmpl    R12, R9	# unsigned
14c     jnb,u   B70  P=0.000001 C=-1.000000

152     B21: #	out( B71 B22 ) <- in( B20 )  Freq: 0.999987
152     movl    R8, R12	# spill
155     addl    R8, #7	# int
159     cmpl    R8, R9	# unsigned
        nop 	# 4 bytes pad for loops and calls
160     jnb,u   B71  P=0.000001 C=-1.000000

166     B22: #	out( B72 B23 ) <- in( B21 )  Freq: 0.999986
166     cmpl    R12, R9	# unsigned
169     jnb,u   B72  P=0.000001 C=-1.000000

16f     B23: #	out( B73 B24 ) <- in( B22 )  Freq: 0.999985
16f     cmpl    R8, RDI	# unsigned
172     jnb,u   B73  P=0.000001 C=-1.000000

178     B24: #	out( B74 B25 ) <- in( B23 )  Freq: 0.999984
178     cmpl    R12, RDI	# unsigned
        nop 	# 5 bytes pad for loops and calls
180     jnb,u   B74  P=0.000001 C=-1.000000

186     B25: #	out( B26 ) <- in( B24 )  Freq: 0.999983
186     movl    R10, #8000	# int

18c     B26: #	out( B27 ) <- in( B25 B28 ) Loop( B26-B28 ) Freq: 986878
18c     movl    R8, RCX	# spill
18f     subl    R8, R12	# int
192     cmpl    RCX, R12
195     cmovll R8, RSI	# signed, int
199     cmpl    R8, #8000	# unsigned
1a0     cmovlnbe R8, R10	# unsigned, int
1a4     addl    R8, R12	# int
        nop 	# 9 bytes pad for loops and calls

1b0     B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N202 strip mined) Freq: 9.73945e+11
1b0     addl    R13, [RBX + #16 + R12 << #2]	# int
1b5     addl    RBP, [R11 + #16 + R12 << #2]	# int
1ba     movslq  RDX, R12	# i2l
1bd     addl    RBP, [R11 + #20 + RDX << #2]	# int
1c2     addl    R13, [RBX + #20 + RDX << #2]	# int
1c7     addl    RBP, [R11 + #24 + RDX << #2]	# int
1cc     addl    R13, [RBX + #24 + RDX << #2]	# int
1d1     addl    RBP, [R11 + #28 + RDX << #2]	# int
1d6     addl    R13, [RBX + #28 + RDX << #2]	# int
1db     addl    RBP, [R11 + #32 + RDX << #2]	# int
1e0     addl    R13, [RBX + #32 + RDX << #2]	# int
1e5     addl    RBP, [R11 + #36 + RDX << #2]	# int
1ea     addl    R13, [RBX + #36 + RDX << #2]	# int
1ef     addl    RBP, [R11 + #40 + RDX << #2]	# int
1f4     addl    R13, [RBX + #40 + RDX << #2]	# int
1f9     addl    RBP, [R11 + #44 + RDX << #2]	# int
1fe     addl    R13, [RBX + #44 + RDX << #2]	# int
203     addl    R12, #8	# int
207     cmpl    R12, R8
20a     jl,s   B27	# loop end  P=0.999999 C=15639040.000000

20c     B28: #	out( B26 B29 ) <- in( B27 )  Freq: 986878
20c     movq    RAX, [R15 + #304 (32-bit)]	# ptr
213     testl   rax, [RAX]	# Safepoint: poll for GC        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:51 (line 15) L[0]=R14 L[1]=R11 L[2]=RBX L[3]=RBP L[4]=R13 L[5]=R12 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r11=Oop rbx=Oop r14=Oop off=531/0x213}
215     cmpl    R12, RCX
218     jl     B26  P=0.999999 C=15639040.000000

21e     B29: #	out( B34 B30 ) <- in( B18 B28 )  Freq: 0.999984
        nop 	# 2 bytes pad for loops and calls
220     cmpl    R12, RDI
223     jge,s   B34  P=0.500000 C=-1.000000

225     B30: #	out( B31 ) <- in( B29 )  Freq: 0.499992
225     # castII of R12
        nop 	# 3 bytes pad for loops and calls

228     B31: #	out( B63 B32 ) <- in( B30 B33 ) Loop( B31-B33 inner post of N739) Freq: 0.999982
228     cmpl    R12, RDI	# unsigned
22b     jnb,u   B63  P=0.000001 C=-1.000000

231     B32: #	out( B66 B33 ) <- in( B31 )  Freq: 0.999981
231     addl    RBP, [R11 + #16 + R12 << #2]	# int
236     cmpl    R12, R9	# unsigned
239     jnb,u   B66  P=0.000001 C=-1.000000

23f     B33: #	out( B31 B34 ) <- in( B32 )  Freq: 0.99998
23f     addl    R13, [RBX + #16 + R12 << #2]	# int
244     incl    R12	# int
247     cmpl    R12, RDI
24a     jl,s   B31	# loop end  P=0.500000 C=15639040.000000

24c     B34: #	out( B81 B35 ) <- in( B68 B33 B29 )  Freq: 0.999983
24c     testl   RDI, RDI	# unsigned
24e     jbe,u   B81  P=0.000001 C=-1.000000

254     B35: #	out( B75 B36 ) <- in( B34 )  Freq: 0.999982
254     movl    RAX, R13	# spill
257     cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    RDI, -1
	je,s    done
normal: cdql
	idivl   RDI
done:
268     movl    R13, RAX	# spill
26b     movl    RAX, RBP	# spill
26d     cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    RDI, -1
	je,s    done
normal: cdql
	idivl   RDI
done:
27e     movl    [rsp + #16], RAX	# spill
282     movl    R8, RDI	# spill
285     decl    R8	# int
288     cmpl    R8, RDI	# unsigned
28b     jnb,u   B75  P=0.000001 C=-1.000000

291     B36: #	out( B75 B37 ) <- in( B35 )  Freq: 0.999981
291     testl   R9, R9	# unsigned
294     jbe,u   B75  P=0.000001 C=-1.000000

29a     B37: #	out( B75 B38 ) <- in( B36 )  Freq: 0.99998
        nop 	# 6 bytes pad for loops and calls
2a0     cmpl    R8, R9	# unsigned
2a3     jnb,u   B75  P=0.000001 C=-1.000000

2a9     B38: #	out( B39 ) <- in( B37 )  Freq: 0.999979
2a9     movl    R10, RBX	# ptr -> int
2ac     shrl    R10, #2
2b0     andl    R10, #7	# int
2b4     movl    RCX, #3	# int
2b9     subl    RCX, R10	# int
2bc     andl    RCX, #7	# int
2bf     incl    RCX	# int
2c1     cmpl    RCX, RDI
2c3     cmovlgt RCX, RDI	# min
2c6     xorl    RBP, RBP	# int
2c8     xorl    R8, R8	# int
2cb     xorl    RAX, RAX	# int

2cd     B39: #	out( B41 B40 ) <- in( B38 B40 ) Loop( B39-B40 inner pre of N571) Freq: 1.99996
2cd     movl    R10, [RBX + #16 + RBP << #2]	# int
2d2     movl    R12, [R11 + #16 + RBP << #2]	# int
2d7     subl    R10, R13	# int
2da     subl    R12, [RSP + #16 (32-bit)]	# int
2df     imull   R10, R12	# int
2e3     imull   R12, R12	# int
2e7     addl    RAX, R10	# int
2ea     addl    R8, R12	# int
2ed     movl    RDX, RBP	# spill
2ef     incl    RDX	# int
2f1     cmpl    RDX, RCX
2f3     jge,s   B41	# loop end  P=0.500000 C=1022976.000000

2f5     B40: #	out( B39 ) <- in( B39 )  Freq: 0.999979
2f5     movl    RBP, RDX	# spill
2f7     jmp,s   B39

2f9     B41: #	out( B53 B42 ) <- in( B39 )  Freq: 0.999979
2f9     movl    R12, RDI	# spill
2fc     addl    R12, #-31	# int
300     cmpl    RDX, R12
303     jge     B53  P=0.000001 C=-1.000000

309     B42: #	out( B76 B43 ) <- in( B41 )  Freq: 0.999978
309     cmpl    RDX, R9	# unsigned
30c     jnb,u   B76  P=0.000001 C=-1.000000

312     B43: #	out( B77 B44 ) <- in( B42 )  Freq: 0.999977
312     cmpl    RDX, RDI	# unsigned
314     jnb,u   B77  P=0.000001 C=-1.000000

31a     B44: #	out( B78 B45 ) <- in( B43 )  Freq: 0.999976
31a     addl    RBP, #32	# int
        nop 	# 3 bytes pad for loops and calls
320     cmpl    RBP, RDI	# unsigned
322     jnb,u   B78  P=0.000001 C=-1.000000

328     B45: #	out( B79 B46 ) <- in( B44 )  Freq: 0.999975
328     cmpl    RBP, R9	# unsigned
32b     jnb,u   B79  P=0.000001 C=-1.000000

331     B46: #	out( B47 ) <- in( B45 )  Freq: 0.999974
331     replicateI XMM8,R13
33b     replicateI XMM9,[RSP + #16 (32-bit)]
342     movl    R10, #32000	# int

348     B47: #	out( B48 ) <- in( B46 B49 ) Loop( B47-B49 ) Freq: 986869
348     movl    R9, RDI	# spill
34b     subl    R9, RDX	# int
34e     addl    R9, #-31	# int
352     cmpl    R12, RDX
355     cmovll R9, RSI	# signed, int
359     cmpl    R9, #32000	# unsigned
360     cmovlnbe R9, R10	# unsigned, int
364     addl    R9, RDX	# int
        nop 	# 9 bytes pad for loops and calls

370     B48: #	out( B48 B49 ) <- in( B47 B48 ) Loop( B48-B48 inner main of N338 strip mined) Freq: 9.73936e+11
370     load_vector XMM0,[RBX + #112 + RDX << #2]
376     load_vector XMM10,[RBX + #80 + RDX << #2]
37c     load_vector XMM11,[RBX + #48 + RDX << #2]
382     load_vector XMM6,[RBX + #16 + RDX << #2]
388     load_vector XMM1,[R11 + #112 + RDX << #2]
38f     load_vector XMM2,[R11 + #80 + RDX << #2]
396     load_vector XMM3,[R11 + #48 + RDX << #2]
39d     load_vector XMM4,[R11 + #16 + RDX << #2]
3a4     vpsubd  XMM5,XMM0,XMM8	! sub packedI
3a9     vpsubd  XMM4,XMM4,XMM9	! sub packedI
3ae     vpsubd  XMM3,XMM3,XMM9	! sub packedI
3b3     vpmulld XMM7,XMM4,XMM4	! mul packedI
3b8     vpmulld XMM12,XMM3,XMM3	! mul packedI
3bd     vpsubd  XMM2,XMM2,XMM9	! sub packedI
3c2     vpsubd  XMM0,XMM1,XMM9	! sub packedI
3c7     vpmulld XMM13,XMM2,XMM2	! mul packedI
3cc     vpmulld XMM5,XMM5,XMM0	! mul packedI
3d1     vpmulld XMM14,XMM0,XMM0	! mul packedI
3d6     vpsubd  XMM0,XMM6,XMM8	! sub packedI
3db     vpsubd  XMM1,XMM11,XMM8	! sub packedI
3e0     vpmulld XMM4,XMM0,XMM4	! mul packedI
3e5     vpmulld XMM3,XMM1,XMM3	! mul packedI
3ea     vpsubd  XMM0,XMM10,XMM8	! sub packedI
3ef     vpmulld XMM2,XMM0,XMM2	! mul packedI
3f4     vector_reduction_int RCX,R8,XMM7 ; using XMM0, XMM1 as TEMP
415     vector_reduction_int R8,RCX,XMM12 ; using XMM0, XMM1 as TEMP
436     vector_reduction_int RCX,R8,XMM13 ; using XMM0, XMM1 as TEMP
457     vector_reduction_int R8,RCX,XMM14 ; using XMM0, XMM1 as TEMP
478     vector_reduction_int RCX,RAX,XMM4 ; using XMM0, XMM1 as TEMP
498     vector_reduction_int RAX,RCX,XMM3 ; using XMM0, XMM1 as TEMP
4b8     vector_reduction_int RCX,RAX,XMM2 ; using XMM0, XMM1 as TEMP
4d8     vector_reduction_int RAX,RCX,XMM5 ; using XMM10, XMM6 as TEMP
4f8     addl    RDX, #32	# int
        nop 	# 5 bytes pad for loops and calls
500     cmpl    RDX, R9
503     jl     B48	# loop end  P=0.999999 C=1022976.000000

509     B49: #	out( B47 B50 ) <- in( B48 )  Freq: 986869
509     movq    R9, [R15 + #304 (32-bit)]	# ptr
510     testl   rax, [R9]	# Safepoint: poll for GC        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:126 (line 25) L[0]=R14 L[1]=R11 L[2]=RBX L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=R13 L[7]=R8 L[8]=RAX L[9]=RDX
        # OopMap {r11=Oop rbx=Oop r14=Oop off=1296/0x510}
513     cmpl    RDX, R12
516     jl     B47  P=0.999999 C=1022976.000000

51c     B50: #	out( B53 B51 ) <- in( B49 )  Freq: 0.999974
51c     movl    R9, RDI	# spill
51f     addl    R9, #-7	# int
523     cmpl    RDX, R9
526     jge     B53  P=0.500000 C=-1.000000

52c     B51: #	out( B52 ) <- in( B50 )  Freq: 0.499987
52c     # castII of RDX

52c     B52: #	out( B52 B53 ) <- in( B51 B52 ) Loop( B52-B52 inner post of N1688) Freq: 0.999974
52c     load_vector XMM0,[RBX + #16 + RDX << #2]
532     load_vector XMM1,[R11 + #16 + RDX << #2]
539     vpsubd  XMM0,XMM0,XMM8	! sub packedI
53e     vpsubd  XMM1,XMM1,XMM9	! sub packedI
543     vpmulld XMM2,XMM1,XMM1	! mul packedI
548     vpmulld XMM0,XMM0,XMM1	! mul packedI
54d     vector_reduction_int R8,R8,XMM2 ; using XMM4, XMM3 as TEMP
56f     vector_reduction_int RAX,RAX,XMM0 ; using XMM2, XMM1 as TEMP
58f     addl    RDX, #8	# int
592     cmpl    RDX, R9
595     jl,s   B52	# loop end  P=0.500000 C=1022976.000000

597     B53: #	out( B56 B54 ) <- in( B41 B52 B50 )  Freq: 0.999975
597     cmpl    RDX, RDI
599     jge,s   B56  P=0.500000 C=-1.000000

59b     B54: #	out( B55 ) <- in( B53 )  Freq: 0.499987
59b     # castII of RDX
        nop 	# 1 bytes pad for loops and calls

59c     B55: #	out( B55 B56 ) <- in( B54 B55 ) Loop( B55-B55 inner post of N571) Freq: 0.999975
59c     movl    R9, [RBX + #16 + RDX << #2]	# int
5a1     movl    R10, [R11 + #16 + RDX << #2]	# int
5a6     subl    R9, R13	# int
5a9     subl    R10, [RSP + #16 (32-bit)]	# int
5ae     imull   R9, R10	# int
5b2     imull   R10, R10	# int
5b6     addl    RAX, R9	# int
5b9     addl    R8, R10	# int
5bc     incl    RDX	# int
        nop 	# 2 bytes pad for loops and calls
5c0     cmpl    RDX, RDI
5c2     jl,s   B55	# loop end  P=0.500000 C=1022976.000000

5c4     B56: #	out( B80 B57 ) <- in( B55 B53 )  Freq: 0.999975
5c4     testl   R8, R8
5c7     je     B80  P=0.000001 C=-1.000000

5cd     B57: #	out( B85 B58 ) <- in( B56 )  Freq: 0.999974
5cd     cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    R8, -1
	je,s    done
normal: cdql
	idivl   R8
done:
5e0     movl    [R14 + #16 (8-bit)], RAX	# int ! Field: org/jml/regression/linear/IntegerLinearRegression.slope
5e4     NullCheck R14

5e4     B58: #	out( N859 ) <- in( B57 )  Freq: 0.999973
5e4     movl    R10, [rsp + #16]	# spill
5e9     imull   R10, RAX	# int
5ed     subl    R13, R10	# int
5f0     movl    [R14 + #12 (8-bit)], R13	# int ! Field: org/jml/regression/linear/IntegerLinearRegression.intercept
5f4     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

609     ret

60a     B59: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
60a     xorl    R14, R14	# ptr
60d     jmp     B4

612     B60: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
612     xorl    R11, R11	# ptr
615     jmp     B7

61a     B61: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
61a     xorl    RBX, RBX	# ptr
        nop 	# 4 bytes pad for loops and calls
620     jmp     B10

625     B62: #	out( B64 ) <- in( B14 )  Freq: 2.02654e-06
625     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
636     movl    RBP, [rsp + #20]	# spill
63a     jmp,s   B64

63c     B63: #	out( B64 ) <- in( B31 )  Freq: 1.01326e-06
63c     movl    [rsp + #0], RBP	# spill
63f     movl    RBP, R13	# spill

642     B64: #	out( N859 ) <- in( B63 B62 )  Freq: 3.0398e-06
642     movl    RSI, #-28	# int
647     movq    [rsp + #8], R14	# spill
64c     movq    [rsp + #24], RBX	# spill
651     movq    [rsp + #32], R11	# spill
656     movl    [rsp + #40], R12	# spill
        nop 	# 1 bytes pad for loops and calls
65c     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:36 (line 16) L[0]=rsp + #8 L[1]=rsp + #32 L[2]=rsp + #24 L[3]=_ L[4]=RBP L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #0 STK[1]=rsp + #32 STK[2]=rsp + #40
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=1636/0x664}
664     stop	# ShouldNotReachHere

678     B65: #	out( B67 ) <- in( B15 )  Freq: 2.02654e-06
678     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
689     jmp,s   B67

68b     B66: #	out( B67 ) <- in( B32 )  Freq: 1.01326e-06
68b     movl    [rsp + #0], R13	# spill

68f     B67: #	out( N859 ) <- in( B66 B65 )  Freq: 3.0398e-06
68f     movl    RSI, #-28	# int
694     movq    [rsp + #8], R14	# spill
699     movq    [rsp + #16], R11	# spill
69e     movq    [rsp + #32], RBX	# spill
6a3     movl    [rsp + #40], R12	# spill
6a8     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:44 (line 17) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #32 L[3]=RBP L[4]=_ L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #0 STK[1]=rsp + #32 STK[2]=rsp + #40
        # OopMap {[8]=Oop [16]=Oop [32]=Oop off=1712/0x6b0}
6b0     stop	# ShouldNotReachHere

6c4     B68: #	out( B34 ) <- in( B12 )  Freq: 1.01327e-06
6c4     movl    RBP, [rsp + #16]	# spill
6c8     movl    R13, [rsp + #20]	# spill
6cd     jmp     B34

6d2     B69: #	out( N859 ) <- in( B19 )  Freq: 1.01327e-06
6d2     stop	# ShouldNotReachHere

6e6     B70: #	out( N859 ) <- in( B20 )  Freq: 1.01327e-06
6e6     stop	# ShouldNotReachHere

6fa     B71: #	out( N859 ) <- in( B21 )  Freq: 1.01327e-06
6fa     stop	# ShouldNotReachHere

70e     B72: #	out( N859 ) <- in( B22 )  Freq: 1.01326e-06
70e     stop	# ShouldNotReachHere

722     B73: #	out( N859 ) <- in( B23 )  Freq: 1.01326e-06
722     stop	# ShouldNotReachHere

736     B74: #	out( N859 ) <- in( B24 )  Freq: 1.01326e-06
736     stop	# ShouldNotReachHere

74a     B75: #	out( N859 ) <- in( B37 B36 B35 )  Freq: 3.0265e-06
74a     movl    RSI, #-138	# int
74f     movq    RBP, R14	# spill
752     movq    [rsp + #0], R11	# spill
756     movq    [rsp + #8], RBX	# spill
75b     movl    [rsp + #20], R13	# spill
760     movl    [rsp + #24], RDI	# spill
764     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:80 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=rsp + #20 L[7]=#0 L[8]=#0 L[9]=#0 STK[0]=#0 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1900/0x76c}
76c     stop	# ShouldNotReachHere

780     B76: #	out( N859 ) <- in( B42 )  Freq: 1.01326e-06
780     stop	# ShouldNotReachHere

794     B77: #	out( N859 ) <- in( B43 )  Freq: 1.01326e-06
794     stop	# ShouldNotReachHere

7a8     B78: #	out( N859 ) <- in( B44 )  Freq: 1.01325e-06
7a8     stop	# ShouldNotReachHere

7bc     B79: #	out( N859 ) <- in( B45 )  Freq: 1.01325e-06
7bc     stop	# ShouldNotReachHere

7d0     B80: #	out( N859 ) <- in( B56 )  Freq: 1.01325e-06
7d0     movl    RSI, #-122	# int
7d5     movl    RBP, RAX	# spill
        nop 	# 1 bytes pad for loops and calls
7d8     call,static  wrapper for: uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:134 (line 31) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=RBP STK[2]=#0
        # OopMap {off=2016/0x7e0}
7e0     stop	# ShouldNotReachHere

7f4     B81: #	out( N859 ) <- in( B34 )  Freq: 9.99983e-07
7f4     movl    RSI, #-122	# int
        nop 	# 3 bytes pad for loops and calls
7fc     call,static  wrapper for: uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:57 (line 20) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=#0
        # OopMap {off=2052/0x804}
804     stop	# ShouldNotReachHere

818     B82: #	out( N859 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
818     movl    RSI, #-115	# int
81d     movq    [rsp + #0], RBX	# spill
821     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
833     movl    [rsp + #16], R12	# spill
838     movq    [rsp + #24], R13	# spill
        nop 	# 3 bytes pad for loops and calls
840     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:25 (line 15) L[0]=rsp + #24 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #20 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [0]=Oop [24]=Oop off=2120/0x848}
848     stop	# ShouldNotReachHere

85c     B83: #	out( N859 ) <- in( B10 )  Freq: 1.01328e-06
85c     movl    RSI, #-138	# int
861     movq    RBP, R14	# spill
864     movq    [rsp + #0], R11	# spill
868     movq    [rsp + #8], RBX	# spill
86d     movl    [rsp + #24], R12	# spill
        nop 	# 2 bytes pad for loops and calls
874     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:25 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=rsp + #24 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=2172/0x87c}
87c     stop	# ShouldNotReachHere

890     B84: #	out( N859 ) <- in( B11 )  Freq: 1.01327e-06
890     movl    RSI, #-66	# int
895     movq    RBP, R14	# spill
898     movq    [rsp + #0], R11	# spill
89c     movq    [rsp + #8], RBX	# spill
8a1     movl    [rsp + #24], R12	# spill
        nop 	# 2 bytes pad for loops and calls
8a8     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:25 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=rsp + #24 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=2224/0x8b0}
8b0     stop	# ShouldNotReachHere

8c4     B85: #	out( N859 ) <- in( B57 )  Freq: 1.01325e-06
8c4     movl    RSI, #-10	# int
8c9     movl    RBP, RAX	# spill
        nop 	# 1 bytes pad for loops and calls
8cc     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:135 (line 31) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap {off=2260/0x8d4}
8d4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2673 1001 %     4       org.jml.regression.linear.IntegerLinearRegression::fit @ 25 (153 bytes)
 total in heap  [0x000000011a394590,0x000000011a3957b0] = 4640
 relocation     [0x000000011a394708,0x000000011a394820] = 280
 main code      [0x000000011a394820,0x000000011a395120] = 2304
 stub code      [0x000000011a395120,0x000000011a395138] = 24
 oops           [0x000000011a395138,0x000000011a395140] = 8
 metadata       [0x000000011a395140,0x000000011a395158] = 24
 scopes data    [0x000000011a395158,0x000000011a395308] = 432
 scopes pcs     [0x000000011a395308,0x000000011a395788] = 1152
 dependencies   [0x000000011a395788,0x000000011a395790] = 8
 nul chk table  [0x000000011a395790,0x000000011a3957b0] = 32

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
 ;; N859: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a394820: ;   {runtime_call os::breakpoint()}
  0x000000011a394820: e87b 47f1 | ef90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B59 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a394830: 8984 2400 | a0fe ff55 | 4883 ec40 | 4c8b 6e48 | 488b 6e40 | 448b 6620 | 488b 5e38 | 448b 5e30 
  0x000000011a394850: 4489 5c24 | 1044 8b56 | 2844 8954 | 2414 488b | fec5 f877 | 49ba a020 | 3b0a 0100 | 0000 41ff 
  0x000000011a394870: d24d 85ed | 0f84 b005 | 0000 458b | 5d08 9090 

  0x000000011a394880: ;   {metadata('org/jml/regression/linear/IntegerLinearRegression')}
  0x000000011a394880: 4181 fb20 | 1d82 450f | 85ab 0700 | 004d 8bf5 
 ;; B4: #	out( B60 B5 ) <- in( B3 B59 )  Freq: 0.999999
  0x000000011a394890: 4885 ed0f | 8499 0500 | 0044 8b5d | 0890 9090 

  0x000000011a3948a0: ;   {metadata({type array int})}
  0x000000011a3948a0: 4181 fb86 | 8180 450f | 858b 0700 | 004c 8bdd 
 ;; B7: #	out( B61 B8 ) <- in( B6 B60 )  Freq: 0.999998
  0x000000011a3948b0: 4885 db0f | 8481 0500 | 0044 8b53 | 0890 9090 

  0x000000011a3948c0: ;   {metadata({type array int})}
  0x000000011a3948c0: 4181 fa86 | 8180 450f | 856b 0700 

  0x000000011a3948cc: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a3948cc: 0041 8b7b 

  0x000000011a3948d0: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
  0x000000011a3948d0: 0c44 8b4b 

  0x000000011a3948d4: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a3948d4: 0c33 f644 | 3be7 9090 | 9090 9090 | 0f8d fe05 

  0x000000011a3948e4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a3948e4: 0000 458b | c441 ffc0 | 443b c644 | 0f4c c644 | 3bc7 440f 

  0x000000011a3948f8: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a3948f8: 4fc7 9090 | 9090 9090 | 443b e70f | 833c 0500 | 008b 6c24 | 1043 036c 

  0x000000011a394910: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a394910: a310 453b | e10f 837d | 0500 0044 | 8b6c 2414 | 4603 6ca3 

  0x000000011a394924: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a394924: 1041 ffc4 | 453b e07d 

  0x000000011a39492c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a39492c: 0b89 6c24 | 1044 896c | 2414 ebc2 
 ;; B18: #	out( B29 B19 ) <- in( B16 )  Freq: 0.99999
  0x000000011a394938: 413b f944 | 8bd7 450f | 4fd1 418b | ca83 c1f9 | 41b8 0000 | 0080 443b | d141 0f4c | c844 3be1 
  0x000000011a394958: 0f8d e000 | 0000 9090 | 443b e70f | 8389 0500 | 0045 3be1 | 0f83 9405 | 0000 458b | c441 83c0 
  0x000000011a394978: 0745 3bc1 | 9090 9090 | 0f83 9405 | 0000 453b | e10f 839f | 0500 0044 | 3bc7 0f83 | aa05 0000 
 ;; B24: #	out( B74 B25 ) <- in( B23 )  Freq: 0.999984
  0x000000011a394998: 443b e790 | 9090 9090 | 0f83 b005 

  0x000000011a3949a4: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a3949a4: 0000 41ba | 401f 0000 
 ;; B26: #	out( B27 ) <- in( B25 B28 ) Loop( B26-B28 ) Freq: 986878
  0x000000011a3949ac: 448b c145 | 2bc4 413b | cc44 0f4c | c641 81f8 | 401f 0000 | 450f 47c2 | 4503 c490 | 9090 9090 
  0x000000011a3949cc: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x000000011a3949cc: 9090 9090 
 ;; B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N202 strip mined) Freq: 9.73945e+11
  0x000000011a3949d0: 4603 6ca3 | 1043 036c | a310 4963 | d441 036c | 9314 4403 | 6c93 1441 | 036c 9318 | 4403 6c93 
  0x000000011a3949f0: 1841 036c | 931c 4403 | 6c93 1c41 | 036c 9320 | 4403 6c93 | 2041 036c | 9324 4403 | 6c93 2441 
  0x000000011a394a10: 036c 9328 | 4403 6c93 | 2841 036c 

  0x000000011a394a1c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a394a1c: 932c 4403 

  0x000000011a394a20: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a394a20: 6c93 2c41 

  0x000000011a394a24: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
  0x000000011a394a24: 83c4 0845 

  0x000000011a394a28: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a394a28: 3be0 7ca4 
 ;; B28: #	out( B26 B29 ) <- in( B27 )  Freq: 986878
  0x000000011a394a2c: 498b 8730 

  0x000000011a394a30: ; ImmutableOopMap {r11=Oop rbx=Oop r14=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x000000011a394a30: 0100 0085 

  0x000000011a394a34: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a394a34: 0044 3be1 | 0f8c 6eff | ffff 9090 | 443b e77d 

  0x000000011a394a44: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a394a44: 2790 9090 
 ;; B31: #	out( B63 B32 ) <- in( B30 B33 ) Loop( B31-B33 inner post of N739) Freq: 0.999982
  0x000000011a394a48: 443b e70f | 830b 0400 | 0043 036c 

  0x000000011a394a54: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a394a54: a310 453b | e10f 834c | 0400 0046 

  0x000000011a394a60: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a394a60: 036c a310 

  0x000000011a394a64: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
  0x000000011a394a64: 41ff c444 

  0x000000011a394a68: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a394a68: 3be7 7cdc 
 ;; B34: #	out( B81 B35 ) <- in( B68 B33 B29 )  Freq: 0.999983
  0x000000011a394a6c: 85ff 0f86 

  0x000000011a394a70: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x000000011a394a70: a005 0000 
 ;; B35: #	out( B75 B36 ) <- in( B34 )  Freq: 0.999982
  0x000000011a394a74: 418b c53d | 0000 0080 | 7507 33d2 | 83ff ff74 

  0x000000011a394a84: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
  0x000000011a394a84: 0399 f7ff | 448b e88b | c53d 0000 | 0080 7507 | 33d2 83ff | ff74 0399 

  0x000000011a394a9c: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x000000011a394a9c: f7ff 8944 | 2410 448b | c741 ffc8 | 443b c70f | 83b9 0400 | 0045 85c9 | 0f86 b004 | 0000 9090 
  0x000000011a394abc: 9090 9090 | 453b c10f | 83a1 0400 | 0044 8bd3 | 41c1 ea02 | 4183 e207 | b903 0000 | 0041 2bca 
  0x000000011a394adc: 83e1 07ff | c13b cf0f | 4fcf 33ed | 4533 c033 

  0x000000011a394aec: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a394aec: c044 8b54 | ab10 458b | 64ab 1045 | 2bd5 442b 

  0x000000011a394afc: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a394afc: 6424 1045 | 0faf d445 | 0faf e441 

  0x000000011a394b08: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a394b08: 03c2 4503 

  0x000000011a394b0c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a394b0c: c48b d5ff 

  0x000000011a394b10: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a394b10: c23b d17d 

  0x000000011a394b14: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394b14: 048b eaeb | d444 8be7 | 4183 c4e1 | 413b d40f | 8d8e 0200 | 0041 3bd1 | 0f83 6e04 | 0000 3bd7 
  0x000000011a394b34: 0f83 7a04 | 0000 83c5 | 2090 9090 | 3bef 0f83 | 8004 0000 
 ;; B45: #	out( B79 B46 ) <- in( B44 )  Freq: 0.999975
  0x000000011a394b48: 413b e90f | 838b 0400 

  0x000000011a394b50: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x000000011a394b50: 00c4 4179 | 6ec5 c442 | 7d58 c0c4 | 627d 584c | 2410 41ba | 007d 0000 
 ;; B47: #	out( B48 ) <- in( B46 B49 ) Loop( B47-B49 ) Freq: 986869
  0x000000011a394b68: 448b cf44 | 2bca 4183 | c1e1 443b | e244 0f4c | ce41 81f9 | 007d 0000 | 450f 47ca | 4403 ca90 
  0x000000011a394b88: 9090 9090 

  0x000000011a394b8c: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a394b8c: 9090 9090 
 ;; B48: #	out( B48 B49 ) <- in( B47 B48 ) Loop( B48-B48 inner main of N338 strip mined) Freq: 9.73936e+11
  0x000000011a394b90: c5fe 6f44 | 9370 c57e | 6f54 9350 | c57e 6f5c | 9330 c5fe | 6f74 9310 | c4c1 7e6f | 4c93 70c4 
  0x000000011a394bb0: c17e 6f54 | 9350 c4c1 | 7e6f 5c93 | 30c4 c17e | 6f64 9310 | c4c1 7dfa | e8c4 c15d | fae1 c4c1 
  0x000000011a394bd0: 65fa d9c4 | e25d 40fc | c462 6540 | e3c4 c16d | fad1 c4c1 

  0x000000011a394be4: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a394be4: 75fa c1c4 | 626d 40ea | c4e2 5540 | e8c4 627d | 40f0 c4c1 | 4dfa c0c4 | c125 fac8 | c4e2 7d40 
  0x000000011a394c04: e4c4 e275 | 40db c4c1 | 2dfa c0c4 | e27d 40d2 | c4e2 4502 | c7c4 e37d | 39c1 01c5 | f9fe c1c4 
  0x000000011a394c24: e279 02c0 | c4c1 796e | c8c5 f9fe | c1c5 f97e | c1c4 c21d | 02c4 c4e3 | 7d39 c101 | c5f9 fec1 
  0x000000011a394c44: c4e2 7902 | c0c5 f96e | c9c5 f9fe | c1c4 c179 | 7ec0 c4c2 | 1502 c5c4 | e37d 39c1 | 01c5 f9fe 
  0x000000011a394c64: c1c4 e279 | 02c0 c4c1 | 796e c8c5 | f9fe c1c5 | f97e c1c4 | c20d 02c6 | c4e3 7d39 | c101 c5f9 
  0x000000011a394c84: fec1 c4e2 | 7902 c0c5 | f96e c9c5 | f9fe c1c4 

  0x000000011a394c94: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a394c94: c179 7ec0 | c4e2 5d02 | c4c4 e37d | 39c1 01c5 | f9fe c1c4 | e279 02c0 | c5f9 6ec8 | c5f9 fec1 
  0x000000011a394cb4: c5f9 7ec1 | c4e2 6502 | c3c4 e37d | 39c1 01c5 | f9fe c1c4 | e279 02c0 | c5f9 6ec9 | c5f9 fec1 
  0x000000011a394cd4: c5f9 7ec0 | c4e2 6d02 | c2c4 e37d | 39c1 01c5 | f9fe c1c4 | e279 02c0 | c5f9 6ec8 | c5f9 fec1 
  0x000000011a394cf4: c5f9 7ec1 | c462 5502 | d5c4 637d | 39d6 01c5 | 29fe d6c4 | 4229 02d2 | c5f9 6ef1 | c529 fed6 
  0x000000011a394d14: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a394d14: c579 7ed0 

  0x000000011a394d18: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a394d18: 83c2 2090 | 9090 9090 | 413b d10f | 8c67 feff 

  0x000000011a394d28: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394d28: ff4d 8b8f 

  0x000000011a394d2c: ; ImmutableOopMap {r11=Oop rbx=Oop r14=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x000000011a394d2c: 3001 0000 

  0x000000011a394d30: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
                      ;   {poll}
  0x000000011a394d30: 4185 0141 | 3bd4 0f8c | 2cfe ffff 
 ;; B50: #	out( B53 B51 ) <- in( B49 )  Freq: 0.999974
  0x000000011a394d3c: 448b cf41 | 83c1 f941 | 3bd1 0f8d 

  0x000000011a394d48: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a394d48: 6b00 0000 
 ;; B51: #	out( B52 ) <- in( B50 )  Freq: 0.499987
 ;; B52: #	out( B52 B53 ) <- in( B51 B52 ) Loop( B52-B52 inner post of N1688) Freq: 0.999974
  0x000000011a394d4c: c5fe 6f44 | 9310 c4c1 | 7e6f 4c93 | 10c4 c17d | fac0 c4c1 

  0x000000011a394d60: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a394d60: 75fa c9c4 | e275 40d1 | c4e2 7d40 | c1c4 e26d | 02e2 c4e3 | 7d39 e301 | c5d9 fee3 | c4e2 5902 
  0x000000011a394d80: e4c4 c179 | 6ed8 c5d9 | fee3 c4c1 

  0x000000011a394d8c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a394d8c: 797e e0c4 | e27d 02d0 | c4e3 7d39 | d101 c5e9 | fed1 c4e2 | 6902 d2c5 | f96e c8c5 | e9fe d1c5 
  0x000000011a394dac: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a394dac: f97e d083 

  0x000000011a394db0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a394db0: c208 413b 

  0x000000011a394db4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394db4: d17c 953b 

  0x000000011a394db8: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a394db8: d77d 2990 
 ;; B55: #	out( B55 B56 ) <- in( B54 B55 ) Loop( B55-B55 inner post of N571) Freq: 0.999975
  0x000000011a394dbc: 448b 4c93 | 1045 8b54 | 9310 452b | cd44 2b54 

  0x000000011a394dcc: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a394dcc: 2410 450f | afca 450f | afd2 4103 

  0x000000011a394dd8: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a394dd8: c145 03c2 

  0x000000011a394ddc: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a394ddc: ffc2 9090 

  0x000000011a394de0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394de0: 3bd7 7cd8 
 ;; B56: #	out( B80 B57 ) <- in( B55 B53 )  Freq: 0.999975
  0x000000011a394de4: 4585 c00f | 8403 0200 | 003d 0000 | 0080 7508 | 33d2 4183 | f8ff 7404 

  0x000000011a394dfc: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x000000011a394dfc: 9941 f7f8 

  0x000000011a394e00: ; implicit exception: dispatches to 0x000000011a3950e4
                      ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x000000011a394e00: 4189 4610 
 ;; B58: #	out( N859 ) <- in( B57 )  Freq: 0.999973
  0x000000011a394e04: 448b 5424 | 1044 0faf | d045 2bea 

  0x000000011a394e10: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
  0x000000011a394e10: 4589 6e0c | c5f8 7748 | 83c4 405d 

  0x000000011a394e1c: ;   {poll_return}
  0x000000011a394e1c: 493b a728 | 0100 000f | 87df 0200 | 00c3 4533 | f6e9 5efa | ffff 4533 | dbe9 76fa | ffff 33db 
  0x000000011a394e3c: 9090 9090 | e988 faff | ff48 8944 | 24f8 8b44 | 2410 8904 | 2448 8b44 | 24f8 8b6c | 2414 eb06 
 ;; B63: #	out( B64 ) <- in( B31 )  Freq: 1.01326e-06
  0x000000011a394e5c: 892c 2441 | 8bed bee4 | ffff ff4c | 8974 2408 | 4889 5c24 | 184c 895c | 2420 4489 | 6424 2890 
  0x000000011a394e7c: ;   {runtime_call UncommonTrapBlob}
  0x000000011a394e7c: c5f8 77e8 

  0x000000011a394e80: ; ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x000000011a394e80: bc16 58f8 

  0x000000011a394e84: ;   {external_word}
  0x000000011a394e84: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a394e90: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394e90: e4f0 e8b9 

  0x000000011a394e94: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x000000011a394e94: d0d7 eff4 
 ;; B65: #	out( B67 ) <- in( B15 )  Freq: 2.02654e-06
  0x000000011a394e98: 4889 4424 | f88b 4424 | 1489 0424 | 488b 4424 | f8eb 0444 | 892c 24be | e4ff ffff | 4c89 7424 
  0x000000011a394eb8: 084c 895c | 2410 4889 | 5c24 2044 | 8964 2428 

  0x000000011a394ec8: ;   {runtime_call UncommonTrapBlob}
  0x000000011a394ec8: c5f8 77e8 

  0x000000011a394ecc: ; ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop }
                      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a394ecc: 7016 58f8 

  0x000000011a394ed0: ;   {external_word}
  0x000000011a394ed0: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a394edc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394edc: e4f0 e86d 

  0x000000011a394ee0: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a394ee0: d0d7 eff4 
 ;; B68: #	out( B34 ) <- in( B12 )  Freq: 1.01327e-06
  0x000000011a394ee4: 8b6c 2410 | 448b 6c24 | 14e9 7afb 

  0x000000011a394ef0: ;   {external_word}
  0x000000011a394ef0: ffff 48bf | a63d 850a | 0100 0000 | 4883 e4f0 

  0x000000011a394f00: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f00: e84b d0d7 

  0x000000011a394f04: ;   {external_word}
  0x000000011a394f04: eff4 48bf | a63d 850a | 0100 0000 | 4883 e4f0 

  0x000000011a394f14: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f14: e837 d0d7 

  0x000000011a394f18: ;   {external_word}
  0x000000011a394f18: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a394f28: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f28: e823 d0d7 

  0x000000011a394f2c: ;   {external_word}
  0x000000011a394f2c: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a394f3c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f3c: e80f d0d7 

  0x000000011a394f40: ;   {external_word}
  0x000000011a394f40: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a394f50: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f50: e8fb cfd7 

  0x000000011a394f54: ;   {external_word}
  0x000000011a394f54: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a394f64: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f64: e8e7 cfd7 

  0x000000011a394f68: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394f68: eff4 be76 | ffff ff49 | 8bee 4c89 | 1c24 4889 | 5c24 0844 | 896c 2414 | 897c 2418 

  0x000000011a394f84: ;   {runtime_call UncommonTrapBlob}
  0x000000011a394f84: c5f8 77e8 

  0x000000011a394f88: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394f88: b415 58f8 

  0x000000011a394f8c: ;   {external_word}
  0x000000011a394f8c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a394f98: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394f98: e4f0 e8b1 

  0x000000011a394f9c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a394f9c: cfd7 eff4 
 ;; B76: #	out( N859 ) <- in( B42 )  Freq: 1.01326e-06
  0x000000011a394fa0: ;   {external_word}
  0x000000011a394fa0: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a394fac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394fac: e4f0 e89d | cfd7 eff4 
 ;; B77: #	out( N859 ) <- in( B43 )  Freq: 1.01326e-06
  0x000000011a394fb4: ;   {external_word}
  0x000000011a394fb4: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a394fc0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394fc0: e4f0 e889 | cfd7 eff4 
 ;; B78: #	out( N859 ) <- in( B44 )  Freq: 1.01325e-06
  0x000000011a394fc8: ;   {external_word}
  0x000000011a394fc8: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a394fd4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394fd4: e4f0 e875 | cfd7 eff4 
 ;; B79: #	out( N859 ) <- in( B45 )  Freq: 1.01325e-06
  0x000000011a394fdc: ;   {external_word}
  0x000000011a394fdc: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a394fe8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a394fe8: e4f0 e861 | cfd7 eff4 
 ;; B80: #	out( N859 ) <- in( B56 )  Freq: 1.01325e-06
  0x000000011a394ff0: be86 ffff | ff8b e890 

  0x000000011a394ff8: ;   {runtime_call UncommonTrapBlob}
  0x000000011a394ff8: c5f8 77e8 

  0x000000011a394ffc: ; ImmutableOopMap {}
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x000000011a394ffc: 4015 58f8 

  0x000000011a395000: ;   {external_word}
  0x000000011a395000: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a39500c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a39500c: e4f0 e83d | cfd7 eff4 
 ;; B81: #	out( N859 ) <- in( B34 )  Freq: 9.99983e-07
  0x000000011a395014: be86 ffff | ff90 9090 

  0x000000011a39501c: ;   {runtime_call UncommonTrapBlob}
  0x000000011a39501c: c5f8 77e8 

  0x000000011a395020: ; ImmutableOopMap {}
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x000000011a395020: 1c15 58f8 

  0x000000011a395024: ;   {external_word}
  0x000000011a395024: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a395030: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a395030: e4f0 e819 | cfd7 eff4 
 ;; B82: #	out( N859 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
  0x000000011a395038: be8d ffff | ff48 891c | 2448 8944 | 24f8 8b44 | 2410 8944 | 2408 488b | 4424 f844 | 8964 2410 
  0x000000011a395058: 4c89 6c24 | 1890 9090 

  0x000000011a395060: ;   {runtime_call UncommonTrapBlob}
  0x000000011a395060: c5f8 77e8 

  0x000000011a395064: ; ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a395064: d814 58f8 

  0x000000011a395068: ;   {external_word}
  0x000000011a395068: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a395074: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a395074: e4f0 e8d5 | ced7 eff4 
 ;; B83: #	out( N859 ) <- in( B10 )  Freq: 1.01328e-06
  0x000000011a39507c: be76 ffff | ff49 8bee | 4c89 1c24 | 4889 5c24 | 0844 8964 | 2418 9090 

  0x000000011a395094: ;   {runtime_call UncommonTrapBlob}
  0x000000011a395094: c5f8 77e8 

  0x000000011a395098: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a395098: a414 58f8 

  0x000000011a39509c: ;   {external_word}
  0x000000011a39509c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a3950a8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3950a8: e4f0 e8a1 | ced7 eff4 
 ;; B84: #	out( N859 ) <- in( B11 )  Freq: 1.01327e-06
  0x000000011a3950b0: bebe ffff | ff49 8bee | 4c89 1c24 | 4889 5c24 | 0844 8964 | 2418 9090 

  0x000000011a3950c8: ;   {runtime_call UncommonTrapBlob}
  0x000000011a3950c8: c5f8 77e8 

  0x000000011a3950cc: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
  0x000000011a3950cc: 7014 58f8 

  0x000000011a3950d0: ;   {external_word}
  0x000000011a3950d0: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a3950dc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a3950dc: e4f0 e86d 

  0x000000011a3950e0: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x000000011a3950e0: ced7 eff4 
 ;; B85: #	out( N859 ) <- in( B57 )  Freq: 1.01325e-06
  0x000000011a3950e4: bef6 ffff | ff8b e890 

  0x000000011a3950ec: ;   {runtime_call UncommonTrapBlob}
  0x000000011a3950ec: c5f8 77e8 

  0x000000011a3950f0: ; ImmutableOopMap {}
                      ;*putfield slope {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x000000011a3950f0: 4c14 58f8 

  0x000000011a3950f4: ;   {external_word}
  0x000000011a3950f4: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a395100: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a395100: e4f0 e849 

  0x000000011a395104: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x000000011a395104: ced7 eff4 

  0x000000011a395108: ;   {internal_word}
  0x000000011a395108: 49ba 1c4e | 391a 0100 | 0000 4d89 | 97e8 0300 

  0x000000011a395118: ;   {runtime_call SafepointBlob}
  0x000000011a395118: 00e9 0221 | 58f8 f4f4 
[Exception Handler]
  0x000000011a395120: ;   {no_reloc}
  0x000000011a395120: e9fb bf4c | f8e8 0000 | 0000 4883 

  0x000000011a39512c: ;   {runtime_call DeoptimizationBlob}
  0x000000011a39512c: 2c24 05e9 | 2c17 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011a395138:   0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011a395140:   0x000000022c10e900 'org/jml/regression/linear/IntegerLinearRegression'
  0x000000011a395148:   0x000000022c040c30 {type array int}
  0x000000011a395150:   0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011a39481f offset=ffffffff bits=0):
PcDesc(pc=0x000000011a3948cd offset=ad bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
PcDesc(pc=0x000000011a3948d1 offset=b1 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
PcDesc(pc=0x000000011a3948d5 offset=b5 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a3948e6 offset=c6 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a3948fa offset=da bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a394912 offset=f2 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a394925 offset=105 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a394928 offset=108 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a39492d offset=10d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a3949a6 offset=186 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a3949d0 offset=1b0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
PcDesc(pc=0x000000011a394a1e offset=1fe bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a394a23 offset=203 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a394a27 offset=207 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a394a2c offset=20c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a394a33 offset=213 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg r14 [28],oop
    - l1: reg r11 [22],oop
    - l2: reg rbx [6],oop
    - l3: reg rbp [10],int
    - l4: reg r13 [26],int
    - l5: reg r12 [24],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a394a35 offset=215 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a394a48 offset=228 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a394a56 offset=236 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a394a64 offset=244 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a394a67 offset=247 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a394a6c offset=24c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a394a74 offset=254 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
PcDesc(pc=0x000000011a394a88 offset=268 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
PcDesc(pc=0x000000011a394a9e offset=27e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
PcDesc(pc=0x000000011a394aed offset=2cd bits=0):   org.jml.regression.linear.Int68.708 ms/op
egerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a394aff offset=2df bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a394b0a offset=2ea bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a394b0d offset=2ed bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a394b11 offset=2f1 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a394b15 offset=2f5 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a394b51 offset=331 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x000000011a394b90 offset=370 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a394be7 offset=3c7 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a394c98 offset=478 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a394d18 offset=4f8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a394d1b offset=4fb bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a394d29 offset=509 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a394d30 offset=510 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg r14 [28],oop
    - l1: reg r11 [22],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: reg r13 [26],int
    - l7: reg r8 [16],int
    - l8: reg rax [0],int
    - l9: reg rdx [4],int
PcDesc(pc=0x000000011a394d33 offset=513 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x000000011a394d4c offset=52c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a394d63 offset=543 bits=0):   org.jml.regression.line# Warmup Iteration   3: ar.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a394d8f offset=56f bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a394daf offset=58f bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a394db2 offset=592 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a394db7 offset=597 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a394dbc offset=59c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a394dce offset=5ae bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a394dd9 offset=5b9 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a394ddc offset=5bc bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a394dde offset=5be bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a394de4 offset=5c4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a394e00 offset=5e0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
PcDesc(pc=0x000000011a394e04 offset=5e4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
PcDesc(pc=0x000000011a394e14 offset=5f4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
PcDesc(pc=0x000000011a394e84 offset=664 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: stack[8],oop
    - l1: stack[32],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: reg rbp [10],int
    - l5: stack[40]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[32],oop
    - @2: stack[40]
PcDesc(pc=0x000000011a394e98 offset=678 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
PcDesc(pc=0x000000011a394ed0 offset=6b0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[32],oop
    - l3: reg rbp [10],int
    - l4: empty
    - l5: stack[40]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[32],oop
    - @2: stack[40]
PcDesc(pc=0x000000011a394ee4 offset=6c4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a394f6a offset=74a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a394f8c offset=76c bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: 0
    - l8: 0
    - l9: 0
   Expression stack
    - @0: 0
    - @1: stack[24]
PcDesc(pc=0x000000011a394fa0 offset=780 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a395000 offset=7e0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: reg rbp [10],int
    - @2: 0
PcDesc(pc=0x000000011a395024 offset=804 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: 0
PcDesc(pc=0x000000011a395068 offset=848 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[24],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8]
    - l4: stack[20]
    - l5: stack[16]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a39509c offset=87c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[24]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a3950d0 offset=8b0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[24]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a3950e4 offset=8c4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
PcDesc(pc=0x000000011a3950f4 offset=8d4 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],int
PcDesc(pc=0x000000011a395108 offset=8e8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
PcDesc(pc=0x000000011a395139 offset=919 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 11 OopMaps

ImmutableOopMap {r11=Oop rbx=Oop r14=Oop } pc offsets: 531 1296 
ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop } pc offsets: 1636 
ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop } pc offsets: 1712 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1900 
ImmutableOopMap {} pc offsets: 2016 2052 
ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop } pc offsets: 2120 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 2172 2224 
ImmutableOopMap {} pc offsets: 2260 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011a3948cd offset=ad):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x000000011a3948d1 offset=b1):
   org.jml.regression.linear.IntegerLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x000000011a3948d5 offset=b5):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a3948e6 offset=c6):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a3948fa offset=da):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a394912 offset=f2):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a394925 offset=105):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a394928 offset=108):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a39492d offset=10d):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a3949a6 offset=186):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a3949d0 offset=1b0):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x000000011a394a1e offset=1fe):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a394a23 offset=203):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a394a27 offset=207):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a394a2c offset=20c):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a394a33 offset=213):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg r14 [28],oop
    - l1: reg r11 [22],oop
    - l2: reg rbx [6],oop
    - l3: reg rbp [10],int
    - l4: reg r13 [26],int
    - l5: reg r12 [24],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a394a35 offset=215):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a394a48 offset=228):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a394a56 offset=236):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a394a64 offset=244):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a394a67 offset=247):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a394a6c offset=24c):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a394a74 offset=254):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x000000011a394a88 offset=268):
   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
ScopeDesc(pc=0x000000011a394a9e offset=27e):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x000000011a394aed offset=2cd):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a394aff offset=2df):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a394b0a offset=2ea):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a394b0d offset=2ed):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a394b11 offset=2f1):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a394b15 offset=2f5):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a394b51 offset=331):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x000000011a394b90 offset=370):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a394be7 offset=3c7):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a394c98 offset=478):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a394d18 offset=4f8):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a394d1b offset=4fb):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a394d29 offset=509):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a394d30 offset=510):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg r14 [28],oop
    - l1: reg r11 [22],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: reg r13 [26],int
    - l7: reg r8 [16],int
    - l8: reg rax [0],int
    - l9: reg rdx [4],int
ScopeDesc(pc=0x000000011a394d33 offset=513):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x000000011a394d4c offset=52c):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a394d63 offset=543):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a394d8f offset=56f):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a394daf offset=58f):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a394db2 offset=592):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a394db7 offset=597):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a394dbc offset=59c):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a394dce offset=5ae):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a394dd9 offset=5b9):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a394ddc offset=5bc):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a394dde offset=5be):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a394de4 offset=5c4):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a394e00 offset=5e0):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
ScopeDesc(pc=0x000000011a394e04 offset=5e4):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
ScopeDesc(pc=0x000000011a394e14 offset=5f4):
   org.jml.regression.linear.IntegerLinearRegression::fit@149 (line 32)
ScopeDesc(pc=0x000000011a394e84 offset=664):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
   Locals
    - l0: stack[8],oop
    - l1: stack[32],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: reg rbp [10],int
    - l5: stack[40]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[32],oop
    - @2: stack[40]
ScopeDesc(pc=0x000000011a394e98 offset=678):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x000000011a394ed0 offset=6b0):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[32],oop
    - l3: reg rbp [10],int
    - l4: empty
    - l5: stack[40]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[32],oop
    - @2: stack[40]
ScopeDesc(pc=0x000000011a394ee4 offset=6c4):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a394f6a offset=74a):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a394f8c offset=76c):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: stack[16]
    - l6: stack[20]
    - l7: 0
    - l8: 0
    - l9: 0
   Expression stack
    - @0: 0
    - @1: stack[24]
ScopeDesc(pc=0x000000011a394fa0 offset=780):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a395000 offset=7e0):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: reg rbp [10],int
    - @2: 0
ScopeDesc(pc=0x000000011a395024 offset=804):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: 0
ScopeDesc(pc=0x000000011a395068 offset=848):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[24],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8]
    - l4: stack[20]
    - l5: stack[16]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a39509c offset=87c):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[24]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a3950d0 offset=8b0):
   org.jml.regression.linear.IntegerLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: stack[20]
    - l5: stack[24]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a3950e4 offset=8c4):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
ScopeDesc(pc=0x000000011a3950f4 offset=8d4):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],int
ScopeDesc(pc=0x000000011a395108 offset=8e8):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011a394708: 6400
relocInfo@0x000000011a394708 [type=6(runtime_call) addr=0x000000011a394820 offset=0 format=1] | [destination=0x000000010a2a8fa0]
         @0x000000011a39470a: f001cc60
relocInfo@0x000000011a39470c [type=12(metadata) addr=0x000000011a394880 offset=96 format=3 data=1] | [metadata_addr=0x000000011a395140 *=0x000000022c10e900 offset=0]metadata_value=0x000000022c10e900: 'org/jml/regression/linear/IntegerLinearRegression'
         @0x000000011a39470e: f002cc20
relocInfo@0x000000011a394710 [type=12(metadata) addr=0x000000011a3948a0 offset=32 format=3 data=2] | [metadata_addr=0x000000011a395148 *=0x000000022c040c30 offset=0]metadata_value=0x000000022c040c30: {type array int}
         @0x000000011a394712: f002cc20
relocInfo@0x000000011a394714 [type=12(metadata) addr=0x000000011a3948c0 offset=32 format=3 data=2] | [metadata_addr=0x000000011a395148 *=0x000000022c040c30 offset=0]metadata_value=0x000000022c040c30: {type array int}
         @0x000000011a394716: a173
relocInfo@0x000000011a394716 [type=10(poll) addr=0x000000011a394a33 offset=371]
         @0x000000011a394718: a2fd
relocInfo@0x000000011a394718 [type=10(poll) addr=0x000000011a394d30 offset=765]
         @0x000000011a39471a: b0ec
relocInfo@0x000000011a39471a [type=11(poll_return) addr=0x000000011a394e1c offset=236]
         @0x000000011a39471c: 6463
relocInfo@0x000000011a39471c [type=6(runtime_call) addr=0x000000011a394e7f offset=99 format=1] | [destination=0x0000000112916540]
         @0x000000011a39471e: f8030a7d877700017005
relocInfo@0x000000011a394726 [type=7(external_word) addr=0x000000011a394e84 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a394728: 640e
relocInfo@0x000000011a394728 [type=6(runtime_call) addr=0x000000011a394e92 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39472a: 6439
relocInfo@0x000000011a39472a [type=6(runtime_call) addr=0x000000011a394ecb offset=57 format=1] | [destination=0x0000000112916540]
         @0x000000011a39472c: f8030a7d877700017005
relocInfo@0x000000011a394734 [type=7(external_word) addr=0x000000011a394ed0 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a394736: 640e
relocInfo@0x000000011a394736 [type=6(runtime_call) addr=0x000000011a394ede offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394738: f8030a853da600017014
relocInfo@0x000000011a394740 [type=7(external_word) addr=0x000000011a394ef2 offset=20 data={0a853da60001}] | [target=0x000000010a853da6]
         @0x000000011a394742: 640e
relocInfo@0x000000011a394742 [type=6(runtime_call) addr=0x000000011a394f00 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394744: f8030a853da600017006
relocInfo@0x000000011a39474c [type=7(external_word) addr=0x000000011a394f06 offset=6 data={0a853da60001}] | [target=0x000000010a853da6]
         @0x000000011a39474e: 640e
relocInfo@0x000000011a39474e [type=6(runtime_call) addr=0x000000011a394f14 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394750: f8030a85353100017006
relocInfo@0x000000011a394758 [type=7(external_word) addr=0x000000011a394f1a offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a39475a: 640e
relocInfo@0x000000011a39475a [type=6(runtime_call) addr=0x000000011a394f28 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39475c: f8030a85353100017006
relocInfo@0x000000011a394764 [type=7(external_word) addr=0x000000011a394f2e offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a394766: 640e
relocInfo@0x000000011a394766 [type=6(runtime_call) addr=0x000000011a394f3c offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394768: f8030a85353100017006
relocInfo@0x000000011a394770 [type=7(external_word) addr=0x000000011a394f42 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a394772: 640e
relocInfo@0x000000011a394772 [type=6(runtime_call) addr=0x000000011a394f50 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394774: f8030a85353100017006
relocInfo@0x000000011a39477c [type=7(external_word) addr=0x000000011a394f56 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a39477e: 640e
relocInfo@0x000000011a39477e [type=6(runtime_call) addr=0x000000011a394f64 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394780: 6423
relocInfo@0x000000011a394780 [type=6(runtime_call) addr=0x000000011a394f87 offset=35 format=1] | [destination=0x0000000112916540]
         @0x000000011a394782: f8030a7d877700017005
relocInfo@0x000000011a39478a [type=7(external_word) addr=0x000000011a394f8c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a39478c: 640e
relocInfo@0x000000011a39478c [type=6(runtime_call) addr=0x000000011a394f9a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39478e: f8030a85353100017006
relocInfo@0x000000011a394796 [type=7(external_word) addr=0x000000011a394fa0 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a394798: 640e
relocInfo@0x000000011a394798 [type=6(runtime_call) addr=0x000000011a394fae offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39479a: f8030a85353100017006
relocInfo@0x000000011a3947a2 [type=7(external_word) addr=0x000000011a394fb4 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3947a4: 640e
relocInfo@0x000000011a3947a4 [type=6(runtime_call) addr=0x000000011a394fc2 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947a6: f8030a85353100017006
relocInfo@0x000000011a3947ae [type=7(external_word) addr=0x000000011a394fc8 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3947b0: 640e
relocInfo@0x000000011a3947b0 [type=6(runtime_call) addr=0x000000011a394fd6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947b2: f8030a85353100017006
relocInfo@0x000000011a3947ba [type=7(external_word) addr=0x000000011a394fdc offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3947bc: 640e
relocInfo@0x000000011a3947bc [type=6(runtime_call) addr=0x000000011a394fea offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947be: 6411
relocInfo@0x000000011a3947be [type=6(runtime_call) addr=0x000000011a394ffb offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a3947c0: f8030a7d877700017005
relocInfo@0x000000011a3947c8 [type=7(external_word) addr=0x000000011a395000 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3947ca: 640e
relocInfo@0x000000011a3947ca [type=6(runtime_call) addr=0x000000011a39500e offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947cc: 6411
relocInfo@0x000000011a3947cc [type=6(runtime_call) addr=0x000000011a39501f offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a3947ce: f8030a7d877700017005
relocInfo@0x000000011a3947d6 [type=7(external_word) addr=0x000000011a395024 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3947d8: 640e
relocInfo@0x000000011a3947d8 [type=6(runtime_call) addr=0x000000011a395032 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947da: 6431
relocInfo@0x000000011a3947da [type=6(runtime_call) addr=0x000000011a395063 offset=49 format=1] | [destination=0x0000000112916540]
         @0x000000011a3947dc: f8030a7d877700017005
relocInfo@0x000000011a3947e4 [type=7(external_word) addr=0x000000011a395068 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3947e6: 640e
relocInfo@0x000000011a3947e6 [type=6(runtime_call) addr=0x000000011a395076 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947e8: 6421
relocInfo@0x000000011a3947e8 [type=6(runtime_call) addr=0x000000011a395097 offset=33 format=1] | [destination=0x0000000112916540]
         @0x000000011a3947ea: f8030a7d877700017005
relocInfo@0x000000011a3947f2 [type=7(external_word) addr=0x000000011a39509c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3947f4: 640e
relocInfo@0x000000011a3947f4 [type=6(runtime_call) addr=0x000000011a3950aa offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3947f6: 6421
relocInfo@0x000000011a3947f6 [type=6(runtime_call) addr=0x000000011a3950cb offset=33 format=1] | [destination=0x0000000112916540]
         @0x000000011a3947f8: f8030a7d877700017005
relocInfo@0x000000011a394800 [type=7(external_word) addr=0x000000011a3950d0 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a394802: 640e
relocInfo@0x000000011a394802 [type=6(runtime_call) addr=0x000000011a3950de offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394804: 6411
relocInfo@0x000000011a394804 [type=6(runtime_call) addr=0x000000011a3950ef offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a394806: f8030a7d877700017005
relocInfo@0x000000011a39480e [type=7(external_word) addr=0x000000011a3950f4 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a394810: 640e
relocInfo@0x000000011a394810 [type=6(runtime_call) addr=0x000000011a395102 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a394812: f2ec8006
relocInfo@0x000000011a394814 [type=8(internal_word) addr=0x000000011a395108 offset=6 data=748] | [target=0x000000011a394e1c]
         @0x000000011a394816: 6411
relocInfo@0x000000011a394816 [type=6(runtime_call) addr=0x000000011a395119 offset=17 format=1] | [destination=0x0000000112917220]
         @0x000000011a394818: 0007
relocInfo@0x000000011a394818 [type=0(none) addr=0x000000011a395120 offset=7]
         @0x000000011a39481a: 6400
relocInfo@0x000000011a39481a [type=6(runtime_call) addr=0x000000011a395120 offset=0 format=1] | [destination=0x0000000112861120]
         @0x000000011a39481c: 640f
relocInfo@0x000000011a39481c [type=6(runtime_call) addr=0x000000011a39512f offset=15 format=1] | [destination=0x0000000112916860]
         @0x000000011a39481e: 0000
relocInfo@0x000000011a39481e [type=0(none) addr=0x000000011a39512f offset=0]
         @0x000000011a394820: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.IntegerLinearRegression
   [nmethod<=klass]org.jml.regression.linear.IntegerLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x000000011a3948cd, 0x000000011a39507c > < 0x000000011a3948d1, 0x000000011a3950b0 > < 0x000000011a394e00, 0x000000011a3950e4 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000022c10e900 'org/jml/regression/linear/IntegerLinearRegression'
#2: 0x000000022c040c30 {type array int}
#3: 0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
13.145 ms/op
# Warmup Iteration   4: 16.403 ms/op
# Warmup Iteration   5: 
============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 1008 ------------------------
{method}
 - this oop:          0x000000026e48fb00
 - method holder:     'org/jml/regression/linear/IntegerLinearRegression'
 - constants:         0x000000026e48f5c0 constant pool [70]/operands[5] {0x000000026e48f5c0} for 'org/jml/regression/linear/IntegerLinearRegression' cache=0x000000026e48fec0
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([I[I)V'
 - max stack:         5
 - max locals:        10
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000011280de20
 - adapters:          AHE@0x00007fceee102e70: 0xbbb00000 i2c: 0x0000000112885ee0 c2i: 0x0000000112885fbf c2iUV: 0x0000000112885f92 c2iNCI: 0x0000000112885ffc
 - compiled entry     0x0000000112885fbf
 - code size:         153
 - code start:        0x000000026e48f9c8
 - code end (excl):   0x000000026e48fa61
 - method data:       0x000000026e7000b0
 - checked ex length: 0
 - linenumber start:  0x000000026e48fa61
 - localvar length:   11
 - localvar start:    0x000000026e48fa7a

------------------------ OptoAssembly for Compile_id = 1008 -----------------------
#
#  void ( org/jml/regression/linear/IntegerLinearRegression:NotNull *, int[int:>=0]:exact *, int[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: org/jml/regression/linear/IntegerLinearRegression:NotNull *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: int[int:>=0]:exact *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N666: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 12 bytes pad for loops and calls

020     B1: #	out( B63 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movdq   XMM1, RSI	# spill
031     movq    RDI, RDX	# spill
034     movl    R9, [RDX + #12 (8-bit)]	# range
038     NullCheck RDX

038     B2: #	out( B64 B3 ) <- in( B1 )  Freq: 0.999999
038     movl    RSI, [RCX + #12 (8-bit)]	# range
03b     NullCheck RCX

03b     B3: #	out( B57 B4 ) <- in( B2 )  Freq: 0.999998
        nop 	# 5 bytes pad for loops and calls
040     cmpl    R9, RSI
043     jne     B57  P=0.000001 C=-1.000000

049     B4: #	out( B58 B5 ) <- in( B3 )  Freq: 0.999997
049     testl   R9, R9	# unsigned
04c     jbe,u   B58  P=0.000001 C=19669376.000000

052     B5: #	out( B46 B6 ) <- in( B4 )  Freq: 0.999996
052     movl    R10, R9	# spill
055     decl    R10	# int
058     cmpl    R10, R9	# unsigned
        nop 	# 5 bytes pad for loops and calls
060     jnb,u   B46  P=0.000001 C=-1.000000

066     B6: #	out( B46 B7 ) <- in( B5 )  Freq: 0.999995
066     testl   RSI, RSI	# unsigned
068     jbe,u   B46  P=0.000001 C=-1.000000

06e     B7: #	out( B46 B8 ) <- in( B6 )  Freq: 0.999994
06e     cmpl    R10, RSI	# unsigned
071     jnb,u   B46  P=0.000001 C=-1.000000

077     B8: #	out( B17 B9 ) <- in( B7 )  Freq: 0.999993
077     movl    RAX, [RCX + #16 (8-bit)]	# int
07a     movl    R13, [RDX + #16 (8-bit)]	# int
07e     movl    RBX, R9	# spill
081     addl    RBX, #-7	# int
084     movl    R10, #1	# int
08a     # TLS is in R15
08a     xorl    R12, R12	# int
08d     cmpl    RBX, #1
090     jle     B17  P=0.000001 C=-1.000000

096     B9: #	out( B59 B10 ) <- in( B8 )  Freq: 0.999992
096     cmpl    RSI, #1	# unsigned
099     jbe,u   B59  P=0.000001 C=-1.000000

09f     B10: #	out( B60 B11 ) <- in( B9 )  Freq: 0.999991
        nop 	# 1 bytes pad for loops and calls
0a0     cmpl    R9, #1	# unsigned
0a4     jbe,u   B60  P=0.000001 C=-1.000000

0aa     B11: #	out( B61 B12 ) <- in( B10 )  Freq: 0.99999
0aa     cmpl    R9, #8	# unsigned
0ae     jbe,u   B61  P=0.000001 C=-1.000000

0b4     B12: #	out( B62 B13 ) <- in( B11 )  Freq: 0.999989
0b4     cmpl    RSI, #8	# unsigned
0b7     jbe,u   B62  P=0.000001 C=-1.000000

0bd     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999988
0bd     movl    R8, #8000	# int

0c3     B14: #	out( B15 ) <- in( B13 B16 ) Loop( B14-B16 ) Freq: 986883
0c3     movl    R11, R9	# spill
0c6     subl    R11, R10	# int
0c9     addl    R11, #-7	# int
0cd     cmpl    RBX, R10
0d0     cmovll R11, R12	# signed, int
0d4     cmpl    R11, #8000	# unsigned
0db     cmovlnbe R11, R8	# unsigned, int
0df     addl    R11, R10	# int
        nop 	# 14 bytes pad for loops and calls

0f0     B15: #	out( B15 B16 ) <- in( B14 B15 ) Loop( B15-B15 inner main of N123 strip mined) Freq: 9.7395e+11
0f0     addl    RAX, [RCX + #16 + R10 << #2]	# int
0f5     addl    R13, [RDI + #16 + R10 << #2]	# int
0fa     addl    RAX, [RCX + #20 + R10 << #2]	# int
0ff     addl    R13, [RDI + #20 + R10 << #2]	# int
104     addl    RAX, [RCX + #24 + R10 << #2]	# int
109     addl    R13, [RDI + #24 + R10 << #2]	# int
10e     addl    RAX, [RCX + #28 + R10 << #2]	# int
113     addl    R13, [RDI + #28 + R10 << #2]	# int
118     addl    RAX, [RCX + #32 + R10 << #2]	# int
11d     addl    R13, [RDI + #32 + R10 << #2]	# int
122     addl    RAX, [RCX + #36 + R10 << #2]	# int
127     addl    R13, [RDI + #36 + R10 << #2]	# int
12c     addl    RAX, [RCX + #40 + R10 << #2]	# int
131     addl    R13, [RDI + #40 + R10 << #2]	# int
136     addl    RAX, [RCX + #44 + R10 << #2]	# int
13b     addl    R13, [RDI + #44 + R10 << #2]	# int
140     addl    R10, #8	# int
144     cmpl    R10, R11
147     jl,s   B15	# loop end16.871 ms/op
  P=0.999999 C=19669376.000000

149     B16: #	out( B14 B17 ) <- in( B15 )  Freq: 986883
149     movq    R14, [R15 + #304 (32-bit)]	# ptr
150     testl   rax, [R14]	# Safepoint: poll for GC        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:51 (line 15) L[0]=XMM1 L[1]=RDI L[2]=RCX L[3]=R13 L[4]=RAX L[5]=R10 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rcx=Oop rdi=Oop xmm1=Oop off=336/0x150}
153     cmpl    R10, RBX
156     jl     B14  P=0.999999 C=19669376.000000

15c     B17: #	out( B20 B18 ) <- in( B8 B16 )  Freq: 0.999989
        nop 	# 4 bytes pad for loops and calls
160     cmpl    R10, R9
163     jge,s   B20  P=0.500000 C=-1.000000

165     B18: #	out( B19 ) <- in( B17 )  Freq: 0.499994
165     # castII of R10
        nop 	# 3 bytes pad for loops and calls

168     B19: #	out( B19 B20 ) <- in( B18 B19 ) Loop( B19-B19 inner post of N464) Freq: 0.999989
168     addl    R13, [RDI + #16 + R10 << #2]	# int
16d     addl    RAX, [RCX + #16 + R10 << #2]	# int
# Warmup Iteration   6: 172     incl    R10	# int
175     cmpl    R10, R9
178     jl,s   B19	# loop end  P=0.500000 C=19669376.000000

17a     B20: #	out( B21 ) <- in( B19 B17 )  Freq: 0.999989
17a     cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    R9, -1
	je,s    done
normal: cdql
	idivl   R9
done:
18d     movl    RBP, RAX	# spill
18f     movl    RAX, R13	# spill
192     cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    R9, -1
	je,s    done
normal: cdql
	idivl   R9
done:
1a5     movl    R13, RAX	# spill
1a8     movl    R10, RDI	# ptr -> int
1ab     shrl    R10, #2
1af     andl    R10, #7	# int
1b3     movl    RDX, #3	# int
1b8     subl    RDX, R10	# int
1bb     andl    RDX, #7	# int
1be     incl    RDX	# int
1c0     cmpl    RDX, R9
1c3     cmovlgt RDX, R9	# min
1c7     xorl    R11, R11	# int
1ca     xorl    R10, R10	# int
1cd     xorl    RAX, RAX	# int
1cf     movdq   XMM0, RDI	# spill

1d4     B21: #	out( B23 B22 ) <- in( B20 B22 ) Loop( B21-B22 inner pre of N474) Freq: 1.99998
1d4     movl    R8, [RCX + #16 + R11 << #2]	# int
1d9     movdq   RDI, XMM0	# spill
1de     movl    R14, [RDI + #16 + R11 << #2]	# int
1e3     subl    R8, RBP	# int
1e6     subl    R14, R13	# int
1e9     imull   R8, R14	# int
1ed     imull   R14, R14	# int
1f1     addl    RAX, R8	# int
1f4     addl    R10, R14	# int
1f7     movl    RDI, R11	# spill
1fa     incl    RDI	# int
        nop 	# 4 bytes pad for loops and calls
200     cmpl    RDI, RDX
202     jge,s   B23	# loop end  P=0.500000 C=11022976.000000

204     B22: #	out( B21 ) <- in( B21 )  Freq: 0.999989
204     movl    R11, RDI	# spill
207     jmp,s   B21

209     B23: #	out( B47 B24 ) <- in( B21 )  Freq: 0.999989
209     movl    R8, R9	# spill
20c     addl    R8, #-31	# int
210     cmpl    RDI, R8
213     jge     B47  P=0.000001 C=-1.000000

219     B24: #	out( B48 B25 ) <- in( B23 )  Freq: 0.999988
219     cmpl    RDI, RSI	# unsigned
        nop 	# 5 bytes pad for loops and calls
220     jnb,u   B48  P=0.000001 C=-1.000000

226     B25: #	out( B49 B26 ) <- in( B24 )  Freq: 0.999987
226     cmpl    RDI, RSI	# unsigned
228     jnb,u   B49  P=0.000001 C=-1.000000

22e     B26: #	out( B50 B27 ) <- in( B25 )  Freq: 0.999986
22e     cmpl    RDI, R9	# unsigned
231     jnb,u   B50  P=0.000001 C=-1.000000

237     B27: #	out( B51 B28 ) <- in( B26 )  Freq: 0.999985
237     cmpl    RDI, R9	# unsigned
        nop 	# 6 bytes pad for loops and calls
240     jnb,u   B51  P=0.000001 C=-1.000000

246     B28: #	out( B52 B29 ) <- in( B27 )  Freq: 0.999984
246     cmpl    RDI, R9	# unsigned
249     jnb,u   B52  P=0.000001 C=-1.000000

24f     B29: #	out( B53 B30 ) <- in( B28 )  Freq: 0.999983
24f     addl    R11, #32	# int
253     cmpl    R11, R9	# unsigned
256     jnb,u   B53  P=0.000001 C=-1.000000

25c     B30: #	out( B54 B31 ) <- in( B29 )  Freq: 0.999982
        nop 	# 4 bytes pad for loops and calls
260     cmpl    RDI, RSI	# unsigned
262     jnb,u   B54  P=0.000001 C=-1.000000

268     B31: #	out( B55 B32 ) <- in( B30 )  Freq: 0.999981
268     cmpl    R11, RSI	# unsigned
26b     jnb,u   B55  P=0.000001 C=-1.000000

271     B32: #	out( B33 ) <- in( B31 )  Freq: 0.99998
271     replicateI XMM9,RBP
27a     replicateI XMM10,R13
284     movl    RSI, #32000	# int

289     B33: #	out( B34 ) <- in( B32 B35 ) Loop( B33-B35 ) Freq: 986875
289     movl    RDX, R9	# spill
28c     subl    RDX, RDI	# int
28e     addl    RDX, #-31	# int
291     cmpl    R8, RDI
294     cmovll RDX, R12	# signed, int
298     cmpl    RDX, #32000	# unsigned
29e     cmovlnbe RDX, RSI	# unsigned, int
2a1     addl    RDX, RDI	# int

2a3     B34: #	out( B34 B35 ) <- in( B33 B34 ) Loop( B34-B34 inner main of N247 strip mined) Freq: 9.73942e+11
2a3     load_vector XMM2,[RCX + #112 + RDI << #2]
2a9     load_vector XMM8,[RCX + #80 + RDI << #2]
2af     load_vector XMM11,[RCX + #48 + RDI << #2]
2b5     load_vector XMM12,[RCX + #16 + RDI << #2]
2bb     movdq   R11, XMM0	# spill
2c0     load_vector XMM5,[R11 + #112 + RDI << #2]
2c7     load_vector XMM6,[R11 + #80 + RDI << #2]
2ce     load_vector XMM3,[R11 + #48 + RDI << #2]
2d5     load_vector XMM4,[R11 + #16 + RDI << #2]
2dc     vpsubd  XMM7,XMM2,XMM9	! sub packedI
2e1     vpsubd  XMM13,XMM4,XMM10	! sub packedI
2e6     vpsubd  XMM3,XMM3,XMM10	! sub packedI
2eb     vpmulld XMM4,XMM13,XMM13	! mul packedI
2f0     vpmulld XMM14,XMM3,XMM3	! mul packedI
2f5     vpsubd  XMM6,XMM6,XMM10	! sub packedI
2fa     vpsubd  XMM2,XMM5,XMM10	! sub packedI
2ff     vpmulld XMM5,XMM6,XMM6	! mul packedI
304     vpmulld XMM7,XMM2,XMM7	! mul packedI
309     vpmulld XMM15,XMM2,XMM2	! mul packedI
30e     vpsubd  XMM2,XMM12,XMM9	! sub packedI
313     vpsubd  XMM11,XMM11,XMM9	! sub packedI
318     vpmulld XMM12,XMM13,XMM2	! mul packedI
31d     vpmulld XMM11,XMM3,XMM11	! mul packedI
322     vpsubd  XMM2,XMM8,XMM9	! sub packedI
327     vpmulld XMM6,XMM6,XMM2	! mul packedI
32c     vector_reduction_int R10,R10,XMM4 ; using XMM2, XMM3 as TEMP
34e     vector_reduction_int R11,R10,XMM14 ; using XMM2, XMM3 as TEMP
370     vector_reduction_int R10,R11,XMM5 ; using XMM2, XMM3 as TEMP
392     vector_reduction_int R10,R10,XMM15 ; using XMM2, XMM3 as TEMP
3b4     vector_reduction_int R11,RAX,XMM12 ; using XMM2, XMM3 as TEMP
3d5     vector_reduction_int RAX,R11,XMM11 ; using XMM2, XMM3 as TEMP
3f6     vector_reduction_int R11,RAX,XMM6 ; using XMM2, XMM3 as TEMP
417     vector_reduction_int RAX,R11,XMM7 ; using XMM13, XMM8 as TEMP
43a     addl    RDI, #32	# int
        nop 	# 3 bytes pad for loops and calls
440     cmpl    RDI, RDX
442     jl     B34	# loop end  P=0.999999 C=11022976.000000

448     B35: #	out( B33 B36 ) <- in( B34 )  Freq: 986875
448     movq    RDX, [R15 + #304 (32-bit)]	# ptr
44f     testl   rax, [RDX]	# Safepoint: poll for GC        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:126 (line 25) L[0]=XMM1 L[1]=XMM0 L[2]=RCX L[3]=_ L[4]=_ L[5]=R13 L[6]=RBP L[7]=R10 L[8]=RAX L[9]=RDI
        # OopMap {rcx=Oop xmm0=Oop xmm1=Oop off=1103/0x44f}
451     cmpl    RDI, R8
454     jl     B33  P=0.999999 C=11022976.000000

45a     B36: #	out( B45 B37 ) <- in( B35 )  Freq: 0.99998
45a     cmpl    RDI, RBX
        nop 	# 4 bytes pad for loops and calls
460     jge     B45  P=0.500000 C=-1.000000

466     B37: #	out( B38 ) <- in( B36 )  Freq: 0.49999
466     # castII of RDI

466     B38: #	out( B40 B39 ) <- in( B37 B39 ) Loop( B38-B39 inner post of N1484) Freq: 0.99998
466     load_vector XMM2,[RCX + #16 + RDI << #2]
46c     movdq   R12, XMM0	# spill
471     load_vector XMM0,[R12 + #16 + RDI << #2]
478     vpsubd  XMM2,XMM2,XMM9	! sub packedI
47d     vpsubd  XMM0,XMM0,XMM10	! sub packedI
482     vpmulld XMM3,XMM0,XMM0	! mul packedI
487     vpmulld XMM0,XMM0,XMM2	! mul packedI
48c     vector_reduction_int RAX,RAX,XMM0 ; using XMM4, XMM2 as TEMP
4ac     vector_reduction_int R10,R10,XMM3 ; using XMM0, XMM2 as TEMP
4ce     addl    RDI, #8	# int
4d1     cmpl    RDI, RBX
4d3     jge,s   B40	# loop end  P=0.500000 C=11022976.000000

4d5     B39: #	out( B38 ) <- in( B38 )  Freq: 0.49999
4d5     movdq   XMM0, R12	# spill
4da     jmp,s   B38

4dc     B40: #	out( B43 B41 ) <- in( B47 B38 B45 )  Freq: 0.999981
        nop 	# 4 bytes pad for loops and calls
4e0     cmpl    RDI, R9
4e3     jge,s   B43  P=0.500000 C=-1.000000

4e5     B41: #	out( B42 ) <- in( B40 )  Freq: 0.49999
4e5     # castII of RDI
        nop 	# 3 bytes pad for loops and calls

4e8     B42: #	out( B42 B43 ) <- in( B41 B42 ) Loop( B42-B42 inner post of N474) Freq: 0.999981
4e8     movl    R8, [RCX + #16 + RDI << #2]	# int
4ed     movl    R11, [R12 + #16 + RDI << #2]	# int
4f2     subl    R8, RBP	# int
4f5     subl    R11, R13	# int
4f8     imull   R8, R11	# int
4fc     imull   R11, R11	# int
500     addl    RAX, R8	# int
503     addl    R10, R11	# int
506     incl    RDI	# int
508     cmpl    RDI, R9
50b     jl,s   B42	# loop end  P=0.500000 C=11022976.000000

50d     B43: #	out( B56 B44 ) <- in( B42 B40 )  Freq: 0.999981
50d     testl   R10, R10
510     je     B56  P=0.000001 C=-1.000000

516     B44: #	out( N666 ) <- in( B43 )  Freq: 0.99998
516     cmpl    rax, 0x80000000	# idiv
	jne,s   normal
	xorl    rdx, rdx
	cmpl    R10, -1
	je,s    done
normal: cdql
	idivl   R10
done:
529     movdq   R10, XMM1	# spill
52e     movl    [R10 + #16 (8-bit)], RAX	# int ! Field: org/jml/regression/linear/IntegerLinearRegression.slope
532     imull   R13, RAX	# int
536     subl    RBP, R13	# int
539     movl    [R10 + #12 (8-bit)], RBP	# int ! Field: org/jml/regression/linear/IntegerLinearRegression.intercept
53d     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

552     ret

553     B45: #	out( B40 ) <- in( B36 )  Freq: 0.49999
553     movdq   R12, XMM0	# spill
558     jmp     B40

55d     B46: #	out( N666 ) <- in( B7 B6 B5 )  Freq: 3.02654e-06
55d     movl    RSI, #-138	# int
562     movdq   RBP, XMM1	# spill
567     movq    [rsp + #0], RDX	# spill
56b     movq    [rsp + #8], RCX	# spill
570     movl    [rsp + #16], R9	# spill
        nop 	# 3 bytes pad for loops and calls
578     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:29 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#0 L[4]=#0 L[5]=#0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0 STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1408/0x580}
580     stop	# ShouldNotReachHere

594     B47: #	out( B40 ) <- in( B23 )  Freq: 1.01327e-06
594     movdq   R12, XMM0	# spill
599     jmp     B40

59e     B48: #	out( N666 ) <- in( B24 )  Freq: 1.01327e-06
59e     stop	# ShouldNotReachHere

5b2     B49: #	out( N666 ) <- in( B25 )  Freq: 1.01327e-06
5b2     stop	# ShouldNotReachHere

5c6     B50: #	out( N666 ) <- in( B26 )  Freq: 1.01326e-06
5c6     stop	# ShouldNotReachHere

5da     B51: #	out( N666 ) <- in( B27 )  Freq: 1.01326e-06
5da     stop	# ShouldNotReachHere

5ee     B52: #	out( N666 ) <- in( B28 )  Freq: 1.01326e-06
5ee     stop	# ShouldNotReachHere

602     B53: #	out( N666 ) <- in( B29 )  Freq: 1.01326e-06
602     stop	# ShouldNotReachHere

616     B54: #	out( N666 ) <- in( B30 )  Freq: 1.01326e-06
616     stop	# ShouldNotReachHere

62a     B55: #	out( N666 ) <- in( B31 )  Freq: 1.01326e-06
62a     stop	# ShouldNotReachHere

63e     B56: #	out( N666 ) <- in( B43 )  Freq: 1.01326e-06
63e     movl    RSI, #-122	# int
643     movl    RBP, RAX	# spill
        nop 	# 3 bytes pad for loops and calls
648     call,static  wrapper for: uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:134 (line 31) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=RBP STK[2]=#0
        # OopMap {off=1616/0x650}
650     stop	# ShouldNotReachHere

664     B57: #	out( N666 ) <- in( B3 )  Freq: 9.99998e-07
664     movl    RSI, #7	# int
        nop 	# 3 bytes pad for loops and calls
66c     call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='7' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:7 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=1652/0x674}
674     stop	# ShouldNotReachHere

688     B58: #	out( N666 ) <- in( B4 )  Freq: 9.99997e-07
688     movl    RSI, #-122	# int
        nop 	# 3 bytes pad for loops and calls
690     call,static  wrapper for: uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:57 (line 20) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0 STK[1]=#0
        # OopMap {off=1688/0x698}
698     stop	# ShouldNotReachHere

6ac     B59: #	out( N666 ) <- in( B9 )  Freq: 9.99992e-07
6ac     stop	# ShouldNotReachHere

6c0     B60: #	out( N666 ) <- in( B10 )  Freq: 9.99991e-07
6c0     stop	# ShouldNotReachHere

6d4     B61: #	out( N666 ) <- in( B11 )  Freq: 9.9999e-07
6d4     stop	# ShouldNotReachHere

6e8     B62: #	out( N666 ) <- in( B12 )  Freq: 9.99989e-07
6e8     stop	# ShouldNotReachHere

6fc     B63: #	out( N666 ) <- in( B1 )  Freq: 1.01328e-06
6fc     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
704     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:1 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap {off=1804/0x70c}
70c     stop	# ShouldNotReachHere

720     B64: #	out( N666 ) <- in( B2 )  Freq: 1.01328e-06
720     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
728     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.IntegerLinearRegression::fit @ bci:3 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=1840/0x730}
730     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2750 1008       4       org.jml.regression.linear.IntegerLinearRegression::fit (153 bytes)
 total in heap  [0x000000011a396690,0x000000011a397610] = 3968
 relocation     [0x000000011a396808,0x000000011a396900] = 248
 main code      [0x000000011a396900,0x000000011a397060] = 1888
 stub code      [0x000000011a397060,0x000000011a397078] = 24
 oops           [0x000000011a397078,0x000000011a397080] = 8
 metadata       [0x000000011a397080,0x000000011a397088] = 8
 scopes data    [0x000000011a397088,0x000000011a3971d0] = 328
 scopes pcs     [0x000000011a3971d0,0x000000011a3975f0] = 1056
 dependencies   [0x000000011a3975f0,0x000000011a3975f8] = 8
 nul chk table  [0x000000011a3975f8,0x000000011a397610] = 24

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
  # this:     rsi:rsi   = 'org/jml/regression/linear/IntegerLinearRegression'
  # parm0:    rdx:rdx   = '[I'
  # parm1:    rcx:rcx   = '[I'
  #           [sp+0x40]  (sp of caller)
 ;; N666: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a396900: 448b 5608 | 49c1 e203 

  0x000000011a396908: ;   {runtime_call ic_miss_stub}
  0x000000011a396908: 493b c20f | 850f f057 | f890 9090 | 9090 9090 | 9090 9090 | 9090 9090 
[Verified Entry Point]
 ;; B1: #	out( B63 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011a396920: 8984 2400 | a0fe ff55 

  0x000000011a396928: ;*synchronization entry
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
  0x000000011a396928: 4883 ec30 | c4e1 f96e | ce48 8bfa 

  0x000000011a396934: ; implicit exception: dispatches to 0x000000011a396ffc
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
  0x000000011a396934: 448b 4a0c 
 ;; B2: #	out( B64 B3 ) <- in( B1 )  Freq: 0.999999
  0x000000011a396938: ; implicit exception: dispatches to 0x000000011a397020
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
  0x000000011a396938: 8b71 0c90 | 9090 9090 | 443b ce0f | 851b 0600 

  0x000000011a396948: ;*if_icmpeq {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
  0x000000011a396948: 0045 85c9 | 0f86 3606 

  0x000000011a396950: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a396950: 0000 458b | d141 ffca | 453b d190 | 9090 9090 | 0f83 f704 | 0000 85f6 | 0f86 ef04 | 0000 443b 
  0x000000011a396970: d60f 83e6 | 0400 008b 

  0x000000011a396978: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
  0x000000011a396978: 4110 448b 

  0x000000011a39697c: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
  0x000000011a39697c: 6a10 418b | d983 c3f9 | 41ba 0100 

  0x000000011a396988: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a396988: 0000 4533 | e483 fb01 | 0f8e c600 | 0000 83fe | 010f 860d | 0600 0090 | 4183 f901 | 0f86 1606 
  0x000000011a3969a8: 0000 4183 | f908 0f86 | 2006 0000 
 ;; B12: #	out( B62 B13 ) <- in( B11 )  Freq: 0.999989
  0x000000011a3969b4: 83fe 080f | 862b 0600 | 0041 b840 | 1f00 0045 | 8bd9 452b | da41 83c3 | f941 3bda | 450f 4cdc 
  0x000000011a3969d4: 4181 fb40 | 1f00 0045 | 0f47 d845 | 03da 9090 | 9090 9090 | 9090 9090 

  0x000000011a3969ec: ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@32 (line 16)
  0x000000011a3969ec: 9090 9090 
 ;; B15: #	out( B15 B16 ) <- in( B14 B15 ) Loop( B15-B15 inner main of N123 strip mined) Freq: 9.7395e+11
  0x000000011a3969f0: 4203 4491 | 1046 036c | 9710 4203 | 4491 1446 | 036c 9714 | 4203 4491 | 1846 036c | 9718 4203 
  0x000000011a396a10: 4491 1c46 | 036c 971c | 4203 4491 | 2046 036c | 9720 4203 | 4491 2446 | 036c 9724 | 4203 4491 
  0x000000011a396a30: 2846 036c | 9728 4203 

  0x000000011a396a38: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a396a38: 4491 2c46 

  0x000000011a396a3c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a396a3c: 036c 972c 

  0x000000011a396a40: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
  0x000000011a396a40: 4183 c208 | 453b d37c 

  0x000000011a396a48: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a396a48: a74d 8bb7 

  0x000000011a396a4c: ; ImmutableOopMap {rcx=Oop rdi=Oop xmm1=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
  0x000000011a396a4c: 3001 0000 

  0x000000011a396a50: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x000000011a396a50: 4185 0644 | 3bd3 0f8c | 67ff ffff 
 ;; B17: #	out( B20 B18 ) <- in( B8 B16 )  Freq: 0.999989
  0x000000011a396a5c: 9090 9090 | 453b d17d 

  0x000000011a396a64: ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@32 (line 16)
  0x000000011a396a64: 1590 9090 
 ;; B19: #	out( B19 B20 ) <- in( B18 B19 ) Loop( B19-B19 inner post of N464) Freq: 0.999989
  0x000000011a396a68: 4603 6c97 

  0x000000011a396a6c: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
  0x000000011a396a6c: 1042 0344 

  0x000000011a396a70: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
  0x000000011a396a70: 9110 41ff 

  0x000000011a396a74: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
  0x000000011a396a74: c245 3bd1 

  0x000000011a396a78: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a396a78: 7cee 3d00 | 0000 8075 | 0833 d241 | 83f9 ff74 | 0499 41f7 

  0x000000011a396a8c: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
  0x000000011a396a8c: f98b e841 | 8bc5 3d00 | 0000 8075 | 0833 d241 | 83f9 ff74 | 0499 41f7 

  0x000000011a396aa4: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x000000011a396aa4: f944 8be8 | 448b d741 | c1ea 0241 | 83e2 07ba | 0300 0000 | 412b d283 | e207 ffc2 | 413b d141 
  0x000000011a396ac4: 0f4f d145 | 33db 4533 | d233 c0c4 

  0x000000011a396ad0: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a396ad0: e1f9 6ec7 
 ;; B21: #	out( B23 B22 ) <- in( B20 B22 ) Loop( B21-B22 inner pre of N474) Freq: 1.99998
  0x000000011a396ad4: 468b 4499 | 10c4 e1f9 | 7ec7 468b | 749f 1044 | 2bc5 452b 

  0x000000011a396ae8: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a396ae8: f545 0faf | c645 0faf 

  0x000000011a396af0: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a396af0: f641 03c0 

  0x000000011a396af4: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a396af4: 4503 d641 

  0x000000011a396af8: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a396af8: 8bfb ffc7 | 9090 9090 

  0x000000011a396b00: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a396b00: 3bfa 7d05 
 ;; B22: #	out( B21 ) <- in( B21 )  Freq: 0.999989
  0x000000011a396b04: 448b dfeb | cb45 8bc1 | 4183 c0e1 | 413b f80f | 8d7b 0300 | 003b fe90 | 9090 9090 | 0f83 7803 
  0x000000011a396b24: 0000 3bfe | 0f83 8403 | 0000 413b | f90f 838f | 0300 0041 | 3bf9 9090 | 9090 9090 | 0f83 9403 
  0x000000011a396b44: 0000 413b | f90f 839f | 0300 0041 | 83c3 2045 | 3bd9 0f83 | a603 0000 
 ;; B30: #	out( B54 B31 ) <- in( B29 )  Freq: 0.999982
  0x000000011a396b5c: 9090 9090 | 3bfe 0f83 | ae03 0000 
 ;; B31: #	out( B55 B32 ) <- in( B30 )  Freq: 0.999981
  0x000000011a396b68: 443b de0f | 83b9 0300 | 00c5 796e | cdc4 427d | 58c9 c441 | 796e d5c4 | 427d 58d2 | be00 7d00 
  0x000000011a396b88: 0041 8bd1 | 2bd7 83c2 | e144 3bc7 | 410f 4cd4 | 81fa 007d | 0000 0f47 

  0x000000011a396ba0: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a396ba0: d603 d7c5 | fe6f 54b9 | 70c5 7e6f | 44b9 50c5 | 7e6f 5cb9 | 30c5 7e6f | 64b9 10c4 | c1f9 7ec3 
  0x000000011a396bc0: c4c1 7e6f | 6cbb 70c4 | c17e 6f74 | bb50 c4c1 | 7e6f 5cbb | 30c4 c17e | 6f64 bb10 | c4c1 6dfa 
  0x000000011a396be0: f9c4 415d | faea c4c1 | 65fa dac4 | c215 40e5 | c462 6540 | f3c4 c14d | faf2 c4c1 

  0x000000011a396bfc: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a396bfc: 55fa d2c4 | e24d 40ee | c4e2 6d40 | ffc4 626d | 40fa c4c1 | 1dfa d1c4 | 4125 fad9 | c462 1540 
  0x000000011a396c1c: e2c4 4265 | 40db c4c1 | 3dfa d1c4 | e24d 40f2 | c4e2 5d02 | d4c4 e37d | 39d3 01c5 | e9fe d3c4 
  0x000000011a396c3c: e269 02d2 | c4c1 796e | dac5 e9fe | d3c4 c179 | 7ed2 c4c2 | 0d02 d6c4 | e37d 39d3 | 01c5 e9fe 
  0x000000011a396c5c: d3c4 e269 | 02d2 c4c1 | 796e dac5 | e9fe d3c4 | c179 7ed3 | c4e2 5502 | d5c4 e37d | 39d3 01c5 
  0x000000011a396c7c: e9fe d3c4 | e269 02d2 | c4c1 796e | dbc5 e9fe | d3c4 c179 | 7ed2 c4c2 | 0502 d7c4 | e37d 39d3 
  0x000000011a396c9c: 01c5 e9fe | d3c4 e269 | 02d2 c4c1 | 796e dac5 | e9fe d3c4 

  0x000000011a396cb0: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a396cb0: c179 7ed2 | c4c2 1d02 | d4c4 e37d | 39d3 01c5 | e9fe d3c4 | e269 02d2 | c5f9 6ed8 | c5e9 fed3 
  0x000000011a396cd0: c4c1 797e | d3c4 c225 | 02d3 c4e3 | 7d39 d301 | c5e9 fed3 | c4e2 6902 | d2c4 c179 | 6edb c5e9 
  0x000000011a396cf0: fed3 c5f9 | 7ed0 c4e2 | 4d02 d6c4 | e37d 39d3 | 01c5 e9fe | d3c4 e269 | 02d2 c5f9 | 6ed8 c5e9 
  0x000000011a396d10: fed3 c4c1 | 797e d3c4 | 6245 02ef | c443 7d39 | e801 c441 | 11fe e8c4 | 4211 02ed | c441 796e 
  0x000000011a396d30: c3c4 4111 | fee8 c579 

  0x000000011a396d38: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a396d38: 7ee8 83c7 

  0x000000011a396d3c: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a396d3c: 2090 9090 | 3bfa 0f8c 

  0x000000011a396d44: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a396d44: 5bfe ffff 
 ;; B35: #	out( B33 B36 ) <- in( B34 )  Freq: 986875
  0x000000011a396d48: 498b 9730 

  0x000000011a396d4c: ; ImmutableOopMap {rcx=Oop xmm0=Oop xmm1=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
                      ;   {poll}
  0x000000011a396d4c: 0100 0085 

  0x000000011a396d50: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
  0x000000011a396d50: 0241 3bf8 | 0f8c 2ffe | ffff 3bfb | 9090 9090 | 0f8d ed00 

  0x000000011a396d64: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a396d64: 0000 c5fe | 6f54 b910 | c4c1 f97e | c4c4 c17e | 6f44 bc10 | c4c1 6dfa | d1c4 c17d 

  0x000000011a396d80: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a396d80: fac2 c4e2 | 7d40 d8c4 | e27d 40c2 | c4e2 7d02 | e0c4 e37d | 39e2 01c5 | d9fe e2c4 | e259 02e4 
  0x000000011a396da0: c5f9 6ed0 | c5d9 fee2 

  0x000000011a396da8: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a396da8: c5f9 7ee0 | c4e2 6502 | c3c4 e37d | 39c2 01c5 | f9fe c2c4 | e279 02c0 | c4c1 796e | d2c5 f9fe 
  0x000000011a396dc8: c2c4 c179 

  0x000000011a396dcc: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a396dcc: 7ec2 83c7 

  0x000000011a396dd0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
  0x000000011a396dd0: 083b fb7d 

  0x000000011a396dd4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a396dd4: 07c4 c1f9 | 6ec4 eb8a 
 ;; B40: #	out( B43 B41 ) <- in( B47 B38 B45 )  Freq: 0.999981
  0x000000011a396ddc: 9090 9090 | 413b f97d 

  0x000000011a396de4: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
  0x000000011a396de4: 2890 9090 
 ;; B42: #	out( B42 B43 ) <- in( B41 B42 ) Loop( B42-B42 inner post of N474) Freq: 0.999981
  0x000000011a396de8: 448b 44b9 | 1045 8b5c | bc10 442b 

  0x000000011a396df4: ;*isub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
  0x000000011a396df4: c545 2bdd | 450f afc3 | 450f afdb 

  0x000000011a396e00: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
  0x000000011a396e00: 4103 c045 

  0x000000011a396e04: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
  0x000000011a396e04: 03d3 ffc7 | 413b f97c 

  0x000000011a396e0c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
  0x000000011a396e0c: db45 85d2 | 0f84 2801 | 0000 3d00 | 0000 8075 | 0833 d241 | 83fa 15.469 ms/op
ff74 | 0499 41f7 

  0x000000011a396e28: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x000000011a396e28: fac4 c1f9 | 7eca 4189 

  0x000000011a396e30: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
  0x000000011a396e30: 4210 440f | afe8 412b | ed41 # Warmup Iteration   7: 896a 

  0x000000011a396e3c: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
  0x000000011a396e3c: 0cc5 f877 | 4883 c430 

  0x000000011a396e44: ;   {poll_return}
  0x000000011a396e44: 5d49 3ba7 | 2801 0000 | 0f87 f201 | 0000 c3c4 | c1f9 7ec4 | e97f ffff 

  0x000000011a396e5c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a396e5c: ffbe 76ff | ffff c4e1 | f97e cd48 | 8914 2448 | 894c 2408 | 4489 4c24 | 1090 9090 

  0x000000011a396e78: ;   {runtime_call UncommonTrapBlob}
  0x000000011a396e78: c5f8 77e8 

  0x000000011a396e7c: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a396e7c: c0f6 57f8 

  0x000000011a396e80: ;   {external_word}
  0x000000011a396e80: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a396e8c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396e8c: e4f0 e8bd 

  0x000000011a396e90: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
  0x000000011a396e90: b0d7 eff4 
 ;; B47: #	out( B40 ) <- in( B23 )  Freq: 1.01327e-06
  0x000000011a396e94: c4c1 f97e | c4e9 3eff 

  0x000000011a396e9c: ;   {external_word}
  0x000000011a396e9c: ffff 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396eac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396eac: e89f b0d7 

  0x000000011a396eb0: ;   {external_word}
  0x000000011a396eb0: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396ec0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396ec0: e88b b0d7 

  0x000000011a396ec4: ;   {external_word}
  0x000000011a396ec4: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396ed4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396ed4: e877 b0d7 

  0x000000011a396ed8: ;   {external_word}
  0x000000011a396ed8: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396ee8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396ee8: e863 b0d7 

  0x000000011a396eec: ;   {external_word}
  0x000000011a396eec: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396efc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396efc: e84f b0d7 

  0x000000011a396f00: ;   {external_word}
  0x000000011a396f00: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396f10: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396f10: e83b b0d7 

  0x000000011a396f14: ;   {external_word}
  0x000000011a396f14: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396f24: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396f24: e827 b0d7 

  0x000000011a396f28: ;   {external_word}
  0x000000011a396f28: eff4 48bf | 3135 850a | 0100 0000 | 4883 e4f0 

  0x000000011a396f38: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396f38: e813 b0d7 | eff4 be86 | ffff ff8b | e890 9090 

  0x000000011a396f48: ;   {runtime_call UncommonTrapBlob}
  0x000000011a396f48: c5f8 77e8 

  0x000000011a396f4c: ; ImmutableOopMap {}
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x000000011a396f4c: f0f5 57f8 

  0x000000011a396f50: ;   {external_word}
  0x000000011a396f50: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a396f5c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396f5c: e4f0 e8ed 

  0x000000011a396f60: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
  0x000000011a396f60: afd7 eff4 
 ;; B57: #	out( N666 ) <- in( B3 )  Freq: 9.99998e-07
  0x000000011a396f64: be07 0000 | 0090 9090 

  0x000000011a396f6c: ;   {runtime_call UncommonTrapBlob}
  0x000000011a396f6c: c5f8 77e8 

  0x000000011a396f70: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x000000011a396f70: ccf5 57f8 

  0x000000011a396f74: ;   {external_word}
  0x000000011a396f74: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a396f80: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396f80: e4f0 e8c9 

  0x000000011a396f84: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
  0x000000011a396f84: afd7 eff4 
 ;; B58: #	out( N666 ) <- in( B4 )  Freq: 9.99997e-07
  0x000000011a396f88: be86 ffff | ff90 9090 

  0x000000011a396f90: ;   {runtime_call UncommonTrapBlob}
  0x000000011a396f90: c5f8 77e8 

  0x000000011a396f94: ; ImmutableOopMap {}
                      ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x000000011a396f94: a8f5 57f8 

  0x000000011a396f98: ;   {external_word}
  0x000000011a396f98: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a396fa4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396fa4: e4f0 e8a5 

  0x000000011a396fa8: ;*idiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
  0x000000011a396fa8: afd7 eff4 
 ;; B59: #	out( N666 ) <- in( B9 )  Freq: 9.99992e-07
  0x000000011a396fac: ;   {external_word}
  0x000000011a396fac: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a396fb8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396fb8: e4f0 e891 | afd7 eff4 
 ;; B60: #	out( N666 ) <- in( B10 )  Freq: 9.99991e-07
  0x000000011a396fc0: ;   {external_word}
  0x000000011a396fc0: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a396fcc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396fcc: e4f0 e87d | afd7 eff4 
 ;; B61: #	out( N666 ) <- in( B11 )  Freq: 9.9999e-07
  0x000000011a396fd4: ;   {external_word}
  0x000000011a396fd4: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a396fe0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396fe0: e4f0 e869 | afd7 eff4 
 ;; B62: #	out( N666 ) <- in( B12 )  Freq: 9.99989e-07
  0x000000011a396fe8: ;   {external_word}
  0x000000011a396fe8: 48bf 3135 | 850a 0100 | 0000 4883 

  0x000000011a396ff4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a396ff4: e4f0 e855 | afd7 eff4 
 ;; B63: #	out( N666 ) <- in( B1 )  Freq: 1.01328e-06
  0x000000011a396ffc: bef6 ffff | ff90 9090 

  0x000000011a397004: ;   {runtime_call UncommonTrapBlob}
  0x000000011a397004: c5f8 77e8 

  0x000000011a397008: ; ImmutableOopMap {}
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
  0x000000011a397008: 34f5 57f8 

  0x000000011a39700c: ;   {external_word}
  0x000000011a39700c: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a397018: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a397018: e4f0 e831 

  0x000000011a39701c: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
  0x000000011a39701c: afd7 eff4 
 ;; B64: #	out( N666 ) <- in( B2 )  Freq: 1.01328e-06
  0x000000011a397020: bef6 ffff | ff90 9090 

  0x000000011a397028: ;   {runtime_call UncommonTrapBlob}
  0x000000011a397028: c5f8 77e8 

  0x000000011a39702c: ; ImmutableOopMap {}
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
  0x000000011a39702c: 10f5 57f8 

  0x000000011a397030: ;   {external_word}
  0x000000011a397030: 48bf 7787 | 7d0a 0100 | 0000 4883 

  0x000000011a39703c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a39703c: e4f0 e80d 

  0x000000011a397040: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
  0x000000011a397040: afd7 eff4 

  0x000000011a397044: ;   {internal_word}
  0x000000011a397044: 49ba 456e | 391a 0100 | 0000 4d89 | 97e8 0300 

  0x000000011a397054: ;   {runtime_call SafepointBlob}
  0x000000011a397054: 00e9 c601 | 58f8 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011a397060: ;   {no_reloc}
  0x000000011a397060: e9bb a04c | f8e8 0000 | 0000 4883 

  0x000000011a39706c: ;   {runtime_call DeoptimizationBlob}
  0x000000011a39706c: 2c24 05e9 | ecf7 57f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011a397078:   0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011a397080:   0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011a3968ff offset=ffffffff bits=0):
PcDesc(pc=0x000000011a39692c offset=2c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
PcDesc(pc=0x000000011a396938 offset=38 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
PcDesc(pc=0x000000011a39693b offset=3b bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
PcDesc(pc=0x000000011a396949 offset=49 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
PcDesc(pc=0x000000011a396952 offset=52 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a39697a offset=7a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011a39697e offset=7e bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
PcDesc(pc=0x000000011a39698a offset=8a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a3969f0 offset=f0 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@32 (line 16)
PcDesc(pc=0x000000011a396a3b offset=13b bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a396a40 offset=140 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a396a44 offset=144 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a396a49 offset=149 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a396a50 offset=150 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg xmm1 [64],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg r13 [26],int
    - l4: reg rax [0],int
    - l5: reg r10 [20],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a396a53 offset=153 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011a396a68 offset=168 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@32 (line 16)
PcDesc(pc=0x000000011a396a6d offset=16d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011a396a72 offset=172 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011a396a75 offset=175 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011a396a7a offset=17a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a396a8d offset=18d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
PcDesc(pc=0x000000011a396aa5 offset=1a5 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
PcDesc(pc=0x000000011a396ad4 offset=1d4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a396ae9 offset=1e9 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a396af4 offset=1f4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a396af7 offset=1f7 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a396afc offset=1fc bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a396b04 offset=204 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a396ba3 offset=2a3 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a396bff offset=2ff bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a396cb4 offset=3b4 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a396d3a offset=43a bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a396d3d offset=43d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a396d48 offset=448 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a396d4f offset=44f bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg xmm1 [64],oop
    - l1: reg xmm0 [48],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg r13 [26],int
    - l6: reg rbp [10],int
    - l7: reg r10 [20],int
    - l8: reg rax [0],int
    - l9: reg rdi [14],int
PcDesc(pc=0x000000011a396d51 offset=451 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
PcDesc(pc=0x000000011a396d66 offset=466 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a396d82 offset=482 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a396dac offset=4ac bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a396dce offset=4ce bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a396dd1 offset=4d1 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a396dd5 offset=4d5 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a396de8 offset=4e8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
PcDesc(pc=0x000000011a396df8 offset=4f8 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
PcDesc(pc=0x000000011a396e03 offset=503 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
PcDesc(pc=0x000000011a396e06 offset=506 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
PcDesc(pc=0x000000011a396e08 offset=508 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
PcDesc(pc=0x000000011a396e0d offset=50d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
PcDesc(pc=0x000000011a396e29 offset=529 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
PcDesc(pc=0x000000011a396e32 offset=532 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
PcDesc(pc=0x000000011a396e3d offset=53d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
PcDesc(pc=0x000000011a396e5d offset=55d bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a396e80 offset=580 bits=1):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: 0
    - l5: 0
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[16]
PcDesc(pc=0x000000011a396e94 offset=594 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011a396f50 offset=650 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty14.800 ms/op

    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: reg rbp [10],int
    - @2: 0
PcDesc(pc=0x000000011a396f64 offset=664 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
PcDesc(pc=0x000000011a396f74 offset=674 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x000000011a396f88 offset=688 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
PcDesc(pc=0x000000011a396f98 offset=698 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
 # Warmup Iteration   8:    - @0: 0
    - @1: 0
PcDesc(pc=0x000000011a396fac offset=6ac bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
PcDesc(pc=0x000000011a39700c offset=70c bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
PcDesc(pc=0x000000011a397020 offset=720 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
PcDesc(pc=0x000000011a397030 offset=730 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: NULL
PcDesc(pc=0x000000011a397044 offset=744 bits=0):   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
PcDesc(pc=0x000000011a397079 offset=779 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 8 OopMaps

ImmutableOopMap {rcx=Oop rdi=Oop xmm1=Oop } pc offsets: 336 
ImmutableOopMap {rcx=Oop xmm0=Oop xmm1=Oop } pc offsets: 1103 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1408 
ImmutableOopMap {} pc offsets: 1616 1652 1688 1804 1840 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011a39692c offset=2c):
   org.jml.regression.linear.IntegerLinearRegression::fit@-1 (line 11)
ScopeDesc(pc=0x000000011a396938 offset=38):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x000000011a39693b offset=3b):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x000000011a396949 offset=49):
   org.jml.regression.linear.IntegerLinearRegression::fit@4 (line 11)
ScopeDesc(pc=0x000000011a396952 offset=52):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a39697a offset=7a):
   org.jml.regression.linear.IntegerLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011a39697e offset=7e):
   org.jml.regression.linear.IntegerLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x000000011a39698a offset=8a):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a3969f0 offset=f0):
   org.jml.regression.linear.IntegerLinearRegression::fit@32 (line 16)
ScopeDesc(pc=0x000000011a396a3b offset=13b):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a396a40 offset=140):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a396a44 offset=144):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a396a49 offset=149):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a396a50 offset=150):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg xmm1 [64],oop
    - l1: reg rdi [14],oop
    - l2: reg rcx [2],oop
    - l3: reg r13 [26],int
    - l4: reg rax [0],int
    - l5: reg r10 [20],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a396a53 offset=153):
   org.jml.regression.linear.IntegerLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011a396a68 offset=168):
   org.jml.regression.linear.IntegerLinearRegression::fit@32 (line 16)
ScopeDesc(pc=0x000000011a396a6d offset=16d):
   org.jml.regression.linear.IntegerLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011a396a72 offset=172):
   org.jml.regression.linear.IntegerLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011a396a75 offset=175):
   org.jml.regression.linear.IntegerLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011a396a7a offset=17a):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a396a8d offset=18d):
   org.jml.regression.linear.IntegerLinearRegression::fit@64 (line 21)
ScopeDesc(pc=0x000000011a396aa5 offset=1a5):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x000000011a396ad4 offset=1d4):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a396ae9 offset=1e9):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a396af4 offset=1f4):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a396af7 offset=1f7):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a396afc offset=1fc):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a396b04 offset=204):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a396ba3 offset=2a3):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a396bff offset=2ff):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a396cb4 offset=3b4):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a396d3a offset=43a):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a396d3d offset=43d):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a396d48 offset=448):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a396d4f offset=44f):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)  reexecute=true
   Locals
    - l0: reg xmm1 [64],oop
    - l1: reg xmm0 [48],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: reg r13 [26],int
    - l6: reg rbp [10],int
    - l7: reg r10 [20],int
    - l8: reg rax [0],int
    - l9: reg rdi [14],int
ScopeDesc(pc=0x000000011a396d51 offset=451):
   org.jml.regression.linear.IntegerLinearRegression::fit@126 (line 25)
ScopeDesc(pc=0x000000011a396d66 offset=466):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a396d82 offset=482):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a396dac offset=4ac):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a396dce offset=4ce):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a396dd1 offset=4d1):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a396dd5 offset=4d5):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a396de8 offset=4e8):
   org.jml.regression.linear.IntegerLinearRegression::fit@83 (line 26)
ScopeDesc(pc=0x000000011a396df8 offset=4f8):
   org.jml.regression.linear.IntegerLinearRegression::fit@91 (line 26)
ScopeDesc(pc=0x000000011a396e03 offset=503):
   org.jml.regression.linear.IntegerLinearRegression::fit@120 (line 27)
ScopeDesc(pc=0x000000011a396e06 offset=506):
   org.jml.regression.linear.IntegerLinearRegression::fit@100 (line 26)
ScopeDesc(pc=0x000000011a396e08 offset=508):
   org.jml.regression.linear.IntegerLinearRegression::fit@123 (line 25)
ScopeDesc(pc=0x000000011a396e0d offset=50d):
   org.jml.regression.linear.IntegerLinearRegression::fit@80 (line 25)
ScopeDesc(pc=0x000000011a396e29 offset=529):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
ScopeDesc(pc=0x000000011a396e32 offset=532):
   org.jml.regression.linear.IntegerLinearRegression::fit@135 (line 31)
ScopeDesc(pc=0x000000011a396e3d offset=53d):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x000000011a396e5d offset=55d):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a396e80 offset=580):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: 0
    - l5: 0
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[16]
ScopeDesc(pc=0x000000011a396e94 offset=594):
   org.jml.regression.linear.IntegerLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011a396f50 offset=650):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: reg rbp [10],int
    - @2: 0
ScopeDesc(pc=0x000000011a396f64 offset=664):
   org.jml.regression.linear.IntegerLinearRegression::fit@134 (line 31)
ScopeDesc(pc=0x000000011a396f74 offset=674):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x000000011a396f88 offset=688):
   org.jml.regression.linear.IntegerLinearRegression::fit@7 (line 11)
ScopeDesc(pc=0x000000011a396f98 offset=698):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: 0
ScopeDesc(pc=0x000000011a396fac offset=6ac):
   org.jml.regression.linear.IntegerLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x000000011a39700c offset=70c):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x000000011a397020 offset=720):
   org.jml.regression.linear.IntegerLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x000000011a397030 offset=730):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x000000011a397044 offset=744):
   org.jml.regression.linear.IntegerLinearRegression::fit@3 (line 11)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011a396808: 600b
relocInfo@0x000000011a396808 [type=6(runtime_call) addr=0x000000011a39690b offset=11] | [destination=0x0000000112915920]
         @0x000000011a39680a: a145
relocInfo@0x000000011a39680a [type=10(poll) addr=0x000000011a396a50 offset=325]
         @0x000000011a39680c: a2ff
relocInfo@0x000000011a39680c [type=10(poll) addr=0x000000011a396d4f offset=767]
         @0x000000011a39680e: b0f6
relocInfo@0x000000011a39680e [type=11(poll_return) addr=0x000000011a396e45 offset=246]
         @0x000000011a396810: 6436
relocInfo@0x000000011a396810 [type=6(runtime_call) addr=0x000000011a396e7b offset=54 format=1] | [destination=0x0000000112916540]
         @0x000000011a396812: f8030a7d877700017005
relocInfo@0x000000011a39681a [type=7(external_word) addr=0x000000011a396e80 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a39681c: 640e
relocInfo@0x000000011a39681c [type=6(runtime_call) addr=0x000000011a396e8e offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39681e: f8030a85353100017010
relocInfo@0x000000011a396826 [type=7(external_word) addr=0x000000011a396e9e offset=16 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a396828: 640e
relocInfo@0x000000011a396828 [type=6(runtime_call) addr=0x000000011a396eac offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39682a: f8030a85353100017006
relocInfo@0x000000011a396832 [type=7(external_word) addr=0x000000011a396eb2 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a396834: 640e
relocInfo@0x000000011a396834 [type=6(runtime_call) addr=0x000000011a396ec0 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a396836: f8030a85353100017006
relocInfo@0x000000011a39683e [type=7(external_word) addr=0x000000011a396ec6 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a396840: 640e
relocInfo@0x000000011a396840 [type=6(runtime_call) addr=0x000000011a396ed4 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a396842: f8030a85353100017006
relocInfo@0x000000011a39684a [type=7(external_word) addr=0x000000011a396eda offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a39684c: 640e
relocInfo@0x000000011a39684c [type=6(runtime_call) addr=0x000000011a396ee8 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39684e: f8030a85353100017006
relocInfo@0x000000011a396856 [type=7(external_word) addr=0x000000011a396eee offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a396858: 640e
relocInfo@0x000000011a396858 [type=6(runtime_call) addr=0x000000011a396efc offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39685a: f8030a85353100017006
relocInfo@0x000000011a396862 [type=7(external_word) addr=0x000000011a396f02 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a396864: 640e
relocInfo@0x000000011a396864 [type=6(runtime_call) addr=0x000000011a396f10 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a396866: f8030a85353100017006
relocInfo@0x000000011a39686e [type=7(external_word) addr=0x000000011a396f16 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a396870: 640e
relocInfo@0x000000011a396870 [type=6(runtime_call) addr=0x000000011a396f24 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a396872: f8030a85353100017006
relocInfo@0x000000011a39687a [type=7(external_word) addr=0x000000011a396f2a offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a39687c: 640e
relocInfo@0x000000011a39687c [type=6(runtime_call) addr=0x000000011a396f38 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39687e: 6413
relocInfo@0x000000011a39687e [type=6(runtime_call) addr=0x000000011a396f4b offset=19 format=1] | [destination=0x0000000112916540]
         @0x000000011a396880: f8030a7d877700017005
relocInfo@0x000000011a396888 [type=7(external_word) addr=0x000000011a396f50 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a39688a: 640e
relocInfo@0x000000011a39688a [type=6(runtime_call) addr=0x000000011a396f5e offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39688c: 6411
relocInfo@0x000000011a39688c [type=6(runtime_call) addr=0x000000011a396f6f offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a39688e: f8030a7d877700017005
relocInfo@0x000000011a396896 [type=7(external_word) addr=0x000000011a396f74 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a396898: 640e
relocInfo@0x000000011a396898 [type=6(runtime_call) addr=0x000000011a396f82 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a39689a: 6411
relocInfo@0x000000011a39689a [type=6(runtime_call) addr=0x000000011a396f93 offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a39689c: f8030a7d877700017005
relocInfo@0x000000011a3968a4 [type=7(external_word) addr=0x000000011a396f98 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3968a6: 640e
relocInfo@0x000000011a3968a6 [type=6(runtime_call) addr=0x000000011a396fa6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968a8: f8030a85353100017006
relocInfo@0x000000011a3968b0 [type=7(external_word) addr=0x000000011a396fac offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3968b2: 640e
relocInfo@0x000000011a3968b2 [type=6(runtime_call) addr=0x000000011a396fba offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968b4: f8030a85353100017006
relocInfo@0x000000011a3968bc [type=7(external_word) addr=0x000000011a396fc0 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3968be: 640e
relocInfo@0x000000011a3968be [type=6(runtime_call) addr=0x000000011a396fce offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968c0: f8030a85353100017006
relocInfo@0x000000011a3968c8 [type=7(external_word) addr=0x000000011a396fd4 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3968ca: 640e
relocInfo@0x000000011a3968ca [type=6(runtime_call) addr=0x000000011a396fe2 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968cc: f8030a85353100017006
relocInfo@0x000000011a3968d4 [type=7(external_word) addr=0x000000011a396fe8 offset=6 data={0a8535310001}] | [target=0x000000010a853531]
         @0x000000011a3968d6: 640e
relocInfo@0x000000011a3968d6 [type=6(runtime_call) addr=0x000000011a396ff6 offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968d8: 6411
relocInfo@0x000000011a3968d8 [type=6(runtime_call) addr=0x000000011a397007 offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a3968da: f8030a7d877700017005
relocInfo@0x000000011a3968e2 [type=7(external_word) addr=0x000000011a39700c offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3968e4: 640e
relocInfo@0x000000011a3968e4 [type=6(runtime_call) addr=0x000000011a39701a offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968e6: 6411
relocInfo@0x000000011a3968e6 [type=6(runtime_call) addr=0x000000011a39702b offset=17 format=1] | [destination=0x0000000112916540]
         @0x000000011a3968e8: f8030a7d877700017005
relocInfo@0x000000011a3968f0 [type=7(external_word) addr=0x000000011a397030 offset=5 data={0a7d87770001}] | [target=0x000000010a7d8777]
         @0x000000011a3968f2: 640e
relocInfo@0x000000011a3968f2 [type=6(runtime_call) addr=0x000000011a39703e offset=14 format=1] | [destination=0x000000010a111f50]
         @0x000000011a3968f4: f1ff8006
relocInfo@0x000000011a3968f6 [type=8(internal_word) addr=0x000000011a397044 offset=6 data=511] | [target=0x000000011a396e45]
         @0x000000011a3968f8: 6411
relocInfo@0x000000011a3968f8 [type=6(runtime_call) addr=0x000000011a397055 offset=17 format=1] | [destination=0x0000000112917220]
         @0x000000011a3968fa: 000b
relocInfo@0x000000011a3968fa [type=0(none) addr=0x000000011a397060 offset=11]
         @0x000000011a3968fc: 6400
relocInfo@0x000000011a3968fc [type=6(runtime_call) addr=0x000000011a397060 offset=0 format=1] | [destination=0x0000000112861120]
         @0x000000011a3968fe: 640f
relocInfo@0x000000011a3968fe [type=6(runtime_call) addr=0x000000011a39706f offset=15 format=1] | [destination=0x0000000112916860]
         @0x000000011a396900: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x000000011a396934, 0x000000011a396ffc > < 0x000000011a396938, 0x000000011a397020 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000121b7d938 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000121b7d938}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000026e48fb00 {method} {0x000000026e48fb00} 'fit' '([I[I)V' in 'org/jml/regression/linear/IntegerLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
13.708 ms/op
# Warmup Iteration   9: 13.865 ms/op
# Warmup Iteration  10: 13.686 ms/op
# Warmup Iteration  11: 17.509 ms/op
# Warmup Iteration  12: 17.941 ms/op
# Warmup Iteration  13: 14.230 ms/op
# Warmup Iteration  14: 12.882 ms/op
# Warmup Iteration  15: 12.021 ms/op
# Warmup Iteration  16: 11.453 ms/op
# Warmup Iteration  17: 12.656 ms/op
# Warmup Iteration  18: 12.518 ms/op
# Warmup Iteration  19: 11.445 ms/op
# Warmup Iteration  20: 11.584 ms/op
# Warmup Iteration  21: 11.517 ms/op
# Warmup Iteration  22: 12.073 ms/op
# Warmup Iteration  23: 12.597 ms/op
# Warmup Iteration  24: 11.963 ms/op
# Warmup Iteration  25: 11.627 ms/op
# Warmup Iteration  26: 11.694 ms/op
# Warmup Iteration  27: 10.904 ms/op
# Warmup Iteration  28: 11.430 ms/op
# Warmup Iteration  29: 11.097 ms/op
# Warmup Iteration  30: 10.820 ms/op
# Warmup Iteration  31: 15.958 ms/op
# Warmup Iteration  32: 19.922 ms/op
# Warmup Iteration  33: 28.791 ms/op
# Warmup Iteration  34: 17.650 ms/op
# Warmup Iteration  35: 15.460 ms/op
# Warmup Iteration  36: 13.321 ms/op
# Warmup Iteration  37: 13.159 ms/op
# Warmup Iteration  38: 12.546 ms/op
# Warmup Iteration  39: 13.257 ms/op
# Warmup Iteration  40: 12.962 ms/op
# Warmup Iteration  41: 12.921 ms/op
# Warmup Iteration  42: 13.231 ms/op
# Warmup Iteration  43: 12.380 ms/op
# Warmup Iteration  44: 12.921 ms/op
# Warmup Iteration  45: 11.987 ms/op
# Warmup Iteration  46: 11.949 ms/op
# Warmup Iteration  47: 12.549 ms/op
# Warmup Iteration  48: 11.456 ms/op
# Warmup Iteration  49: 11.424 ms/op
# Warmup Iteration  50: 11.582 ms/op
# Warmup Iteration  51: 11.522 ms/op
# Warmup Iteration  52: 11.878 ms/op
# Warmup Iteration  53: 11.507 ms/op
# Warmup Iteration  54: 11.355 ms/op
# Warmup Iteration  55: 11.643 ms/op
# Warmup Iteration  56: 11.072 ms/op
# Warmup Iteration  57: 11.975 ms/op
# Warmup Iteration  58: 11.047 ms/op
# Warmup Iteration  59: 11.190 ms/op
# Warmup Iteration  60: 11.269 ms/op
# Warmup Iteration  61: 12.570 ms/op
# Warmup Iteration  62: 11.557 ms/op
# Warmup Iteration  63: 12.054 ms/op
# Warmup Iteration  64: 11.253 ms/op
# Warmup Iteration  65: 12.190 ms/op
# Warmup Iteration  66: 11.268 ms/op
# Warmup Iteration  67: 11.661 ms/op
# Warmup Iteration  68: 11.080 ms/op
# Warmup Iteration  69: 10.986 ms/op
# Warmup Iteration  70: 12.673 ms/op
# Warmup Iteration  71: 10.983 ms/op
# Warmup Iteration  72: 10.883 ms/op
# Warmup Iteration  73: 10.876 ms/op
# Warmup Iteration  74: 12.173 ms/op
# Warmup Iteration  75: 10.875 ms/op
# Warmup Iteration  76: 12.756 ms/op
# Warmup Iteration  77: 10.784 ms/op
# Warmup Iteration  78: 10.778 ms/op
# Warmup Iteration  79: 12.396 ms/op
# Warmup Iteration  80: 11.972 ms/op
# Warmup Iteration  81: 10.615 ms/op
# Warmup Iteration  82: 10.747 ms/op
# Warmup Iteration  83: 11.203 ms/op
# Warmup Iteration  84: 11.309 ms/op
# Warmup Iteration  85: 11.064 ms/op
# Warmup Iteration  86: 11.570 ms/op
# Warmup Iteration  87: 12.491 ms/op
# Warmup Iteration  88: 11.689 ms/op
# Warmup Iteration  89: 11.231 ms/op
# Warmup Iteration  90: 11.263 ms/op
# Warmup Iteration  91: 12.432 ms/op
# Warmup Iteration  92: 11.523 ms/op
# Warmup Iteration  93: 11.619 ms/op
# Warmup Iteration  94: 11.584 ms/op
# Warmup Iteration  95: 10.963 ms/op
# Warmup Iteration  96: 11.145 ms/op
# Warmup Iteration  97: 11.076 ms/op
# Warmup Iteration  98: 10.943 ms/op
# Warmup Iteration  99: 10.907 ms/op
# Warmup Iteration 100: 11.036 ms/op
Iteration   1: 10.883 ms/op
Iteration   2: 11.358 ms/op
Iteration   3: 11.140 ms/op
Iteration   4: 11.102 ms/op
Iteration   5: 11.149 ms/op
Iteration   6: 11.086 ms/op
Iteration   7: 11.275 ms/op
Iteration   8: 10.926 ms/op
Iteration   9: 11.298 ms/op
Iteration  10: 11.982 ms/op
------------------------------------------------------------------------
org.jml.regression.linear.IntegerLinearRegression::fit([I[I)V
  interpreter_invocation_count:        6 
  invocation_counter:                  6 
  backedge_counter:             30815232 
  mdo size: 600 bytes

0 aload_1
1 arraylength
2 aload_2
3 arraylength
4 if_icmpeq 17
  0   bci: 4    BranchData          taken(5) displacement(48)
                                    not taken(0)
7 new 7 <java/lang/IllegalArgumentException>
10 dup
11 fast_aldc Arrays length are not equals
13 invokespecial 11 <java/lang/IllegalArgumentException.<init>(Ljava/lang/String;)V> 
  32  bci: 13   CounterData         count(0)
16 athrow
17 iconst_0
18 istore_3
19 iconst_0
20 istore #4
22 iconst_0
23 istore #5
25 fast_iload #5
27 aload_1
28 arraylength
29 if_icmpge 54
  48  bci: 29   BranchData          trap(intrinsic_or_type_checked_inlining recompiled) taken(2) displacement(56)
                                    not taken(19671423)
32 iload_3
33 aload_1
34 fast_iload #5
36 iaload
37 iadd
38 istore_3
39 fast_iload #4
41 aload_2
42 fast_iload #5
44 iaload
45 iadd
46 istore #4
48 iinc #5 1
51 goto 25
  80  bci: 51   JumpData            taken(19671423) displacement(-32)
54 iload_3
55 aload_1
56 arraylength
57 idiv
58 istore #5
60 fast_iload #4
62 aload_1
63 arraylength
64 idiv
65 istore #6
67 iconst_0
68 istore #7
70 iconst_0
71 istore #8
73 iconst_0
74 istore #9
76 fast_iload #9
78 aload_1
79 arraylength
80 if_icmpge 129
  104 bci: 80   BranchData          trap(intrinsic_or_type_checked_inlining recompiled) taken(2) displacement(56)
                                    not taken(11022976)
83 fast_iload #7
85 aload_1
86 fast_iload #9
88 iaload
89 fast_iload #5
91 isub
92 aload_1
93 fast_iload #9
95 iaload
96 fast_iload #5
98 isub
99 imul
100 iadd
101 istore #7
103 fast_iload #8
105 aload_1
106 fast_iload #9
108 iaload
109 fast_iload #5
111 isub
112 aload_2
113 fast_iload #9
115 iaload
116 fast_iload #6
118 isub
119 imul
120 iadd
121 istore #8
123 iinc #9 1
126 goto 76
  136 bci: 126  JumpData            taken(11022976) displacement(-32)
129 fast_aload_0
130 iload #8
132 fast_iload #7
134 idiv
135 fast_iputfield 14 <org/jml/regression/linear/IntegerLinearRegression.slope/I> 
138 fast_aload_0
139 fast_iload #6
141 aload_0
142 fast_igetfield 14 <org/jml/regression/linear/IntegerLinearRegression.slope/I> 
145 fast_iload #5
147 imul
148 isub
149 fast_iputfield 20 <org/jml/regression/linear/IntegerLinearRegression.intercept/I> 
152 return
------------------------------------------------------------------------
Total MDO size: 600 bytes


Result "org.jml.regression.linear.BenchmarkLinearRegression.testIntLinearRegression":
  N = 10
  mean =     11.220 ±(99.9%) 0.465 ms/op

  Histogram, ms/op:
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 0 
    [10.375, 10.500) = 0 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 
    [10.875, 11.000) = 2 
    [11.000, 11.125) = 2 
    [11.125, 11.250) = 2 
    [11.250, 11.375) = 3 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 

  Percentiles, ms/op:
      p(0.0000) =     10.883 ms/op
     p(50.0000) =     11.145 ms/op
     p(90.0000) =     11.919 ms/op
     p(95.0000) =     11.982 ms/op
     p(99.0000) =     11.982 ms/op
     p(99.9000) =     11.982 ms/op
     p(99.9900) =     11.982 ms/op
     p(99.9990) =     11.982 ms/op
     p(99.9999) =     11.982 ms/op
    p(100.0000) =     11.982 ms/op


# JMH version: 1.32
# VM version: JDK 16-internal, OpenJDK 64-Bit Server VM, 16-internal+0-adhoc.ominil.jdk16
# VM invoker: /Library/Java/JavaVirtualMachines/macosx-x86_64-server-fastdebug/jdk/bin/java
# VM options: --add-modules=jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*IntegerLinearRegression::fit -XX:PrintAssemblyOptions=intel -XX:-UseCompressedOops
# Blackhole mode: full + dont-inline hint
# Warmup: 100 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jml.regression.linear.BenchmarkLinearRegression.testIntVectorLinearRegression

# Run progress: 50.00% complete, ETA 00:00:04
# Fork: 1 of 1
CompileCommand: print *IntegerLinearRegression.fit bool print = true
OpenJDK 64-Bit Server VM warning: printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output
# Warmup Iteration   1: 439.142 ms/op
# Warmup Iteration   2: 90.984 ms/op
# Warmup Iteration   3: 146.497 ms/op
# Warmup Iteration   4: 7.672 ms/op
# Warmup Iteration   5: 8.157 ms/op
# Warmup Iteration   6: 8.124 ms/op
# Warmup Iteration   7: 7.847 ms/op
# Warmup Iteration   8: 8.129 ms/op
# Warmup Iteration   9: 8.258 ms/op
# Warmup Iteration  10: 7.993 ms/op
# Warmup Iteration  11: 8.110 ms/op
# Warmup Iteration  12: 8.436 ms/op
# Warmup Iteration  13: 8.256 ms/op
# Warmup Iteration  14: 8.178 ms/op
# Warmup Iteration  15: 7.963 ms/op
# Warmup Iteration  16: 8.354 ms/op
# Warmup Iteration  17: 8.482 ms/op
# Warmup Iteration  18: 8.302 ms/op
# Warmup Iteration  19: 8.221 ms/op
# Warmup Iteration  20: 8.552 ms/op
# Warmup Iteration  21: 8.097 ms/op
# Warmup Iteration  22: 8.626 ms/op
# Warmup Iteration  23: 8.079 ms/op
# Warmup Iteration  24: 8.616 ms/op
# Warmup Iteration  25: 8.377 ms/op
# Warmup Iteration  26: 8.189 ms/op
# Warmup Iteration  27: 8.216 ms/op
# Warmup Iteration  28: 8.213 ms/op
# Warmup Iteration  29: 8.012 ms/op
# Warmup Iteration  30: 8.159 ms/op
# Warmup Iteration  31: 8.268 ms/op
# Warmup Iteration  32: 8.134 ms/op
# Warmup Iteration  33: 8.013 ms/op
# Warmup Iteration  34: 8.007 ms/op
# Warmup Iteration  35: 8.002 ms/op
# Warmup Iteration  36: 7.953 ms/op
# Warmup Iteration  37: 7.855 ms/op
# Warmup Iteration  38: 8.022 ms/op
# Warmup Iteration  39: 8.392 ms/op
# Warmup Iteration  40: 8.341 ms/op
# Warmup Iteration  41: 7.968 ms/op
# Warmup Iteration  42: 8.116 ms/op
# Warmup Iteration  43: 7.911 ms/op
# Warmup Iteration  44: 8.416 ms/op
# Warmup Iteration  45: 7.959 ms/op
# Warmup Iteration  46: 7.873 ms/op
# Warmup Iteration  47: 8.501 ms/op
# Warmup Iteration  48: 9.751 ms/op
# Warmup Iteration  49: 8.523 ms/op
# Warmup Iteration  50: 8.065 ms/op
# Warmup Iteration  51: 7.811 ms/op
# Warmup Iteration  52: 7.936 ms/op
# Warmup Iteration  53: 7.846 ms/op
# Warmup Iteration  54: 8.255 ms/op
# Warmup Iteration  55: 8.817 ms/op
# Warmup Iteration  56: 8.716 ms/op
# Warmup Iteration  57: 8.320 ms/op
# Warmup Iteration  58: 8.068 ms/op
# Warmup Iteration  59: 7.969 ms/op
# Warmup Iteration  60: 9.014 ms/op
# Warmup Iteration  61: 8.588 ms/op
# Warmup Iteration  62: 7.942 ms/op
# Warmup Iteration  63: 7.996 ms/op
# Warmup Iteration  64: 7.984 ms/op
# Warmup Iteration  65: 7.739 ms/op
# Warmup Iteration  66: 7.764 ms/op
# Warmup Iteration  67: 8.476 ms/op
# Warmup Iteration  68: 8.595 ms/op
# Warmup Iteration  69: 8.243 ms/op
# Warmup Iteration  70: 8.090 ms/op
# Warmup Iteration  71: 8.315 ms/op
# Warmup Iteration  72: 8.217 ms/op
# Warmup Iteration  73: 7.902 ms/op
# Warmup Iteration  74: 7.743 ms/op
# Warmup Iteration  75: 7.880 ms/op
# Warmup Iteration  76: 7.776 ms/op
# Warmup Iteration  77: 9.305 ms/op
# Warmup Iteration  78: 8.466 ms/op
# Warmup Iteration  79: 8.901 ms/op
# Warmup Iteration  80: 8.036 ms/op
# Warmup Iteration  81: 7.880 ms/op
# Warmup Iteration  82: 7.934 ms/op
# Warmup Iteration  83: 7.874 ms/op
# Warmup Iteration  84: 8.338 ms/op
# Warmup Iteration  85: 8.284 ms/op
# Warmup Iteration  86: 8.432 ms/op
# Warmup Iteration  87: 8.477 ms/op
# Warmup Iteration  88: 8.470 ms/op
# Warmup Iteration  89: 8.351 ms/op
# Warmup Iteration  90: 8.262 ms/op
# Warmup Iteration  91: 8.428 ms/op
# Warmup Iteration  92: 8.273 ms/op
# Warmup Iteration  93: 8.481 ms/op
# Warmup Iteration  94: 8.271 ms/op
# Warmup Iteration  95: 8.421 ms/op
# Warmup Iteration  96: 8.322 ms/op
# Warmup Iteration  97: 7.907 ms/op
# Warmup Iteration  98: 7.803 ms/op
# Warmup Iteration  99: 8.267 ms/op
# Warmup Iteration 100: 8.562 ms/op
Iteration   1: 8.345 ms/op
Iteration   2: 8.586 ms/op
Iteration   3: 8.869 ms/op
Iteration   4: 8.243 ms/op
Iteration   5: 8.009 ms/op
Iteration   6: 8.119 ms/op
Iteration   7: 7.954 ms/op
Iteration   8: 7.712 ms/op
Iteration   9: 7.655 ms/op
Iteration  10: 7.909 ms/op


Result "org.jml.regression.linear.BenchmarkLinearRegression.testIntVectorLinearRegression":
  N = 10
  mean =      8.140 ±(99.9%) 0.576 ms/op

  Histogram, ms/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 2 
    [7.750, 7.875) = 0 
    [7.875, 8.000) = 2 
    [8.000, 8.125) = 2 
    [8.125, 8.250) = 1 
    [8.250, 8.375) = 1 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 1 
    [8.625, 8.750) = 0 
    [8.750, 8.875) = 1 

  Percentiles, ms/op:
      p(0.0000) =      7.655 ms/op
     p(50.0000) =      8.064 ms/op
     p(90.0000) =      8.841 ms/op
     p(95.0000) =      8.869 ms/op
     p(99.0000) =      8.869 ms/op
     p(99.9000) =      8.869 ms/op
     p(99.9900) =      8.869 ms/op
     p(99.9990) =      8.869 ms/op
     p(99.9999) =      8.869 ms/op
    p(100.0000) =      8.869 ms/op


# Run complete. Total time: 00:00:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt   Score   Error  Units
BenchmarkLinearRegression.testIntLinearRegression          ss   10  11.220 ± 0.465  ms/op
BenchmarkLinearRegression.testIntVectorLinearRegression    ss   10   8.140 ± 0.576  ms/op
