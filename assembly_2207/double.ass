CompileCommand: print *DoubleLinearRegression.fit bool print = true
# JMH version: 1.32
# VM version: JDK 16-internal, OpenJDK 64-Bit Server VM, 16-internal+0-adhoc.ominil.jdk16
# VM invoker: /Library/Java/JavaVirtualMachines/macosx-x86_64-server-fastdebug/jdk/bin/java
# VM options: --add-modules=jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*DoubleLinearRegression::fit -XX:PrintAssemblyOptions=intel -XX:-UseCompressedOops
# Blackhole mode: full + dont-inline hint
# Warmup: 100 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jml.regression.linear.BenchmarkLinearRegression.testDoubleLinearRegression

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
CompileCommand: print *DoubleLinOepaernRJeDgKr e6s4s-iBoint. fSietr vbeoro lV Mp rwianrtn i=n gt:r uper
inting of assembly code is enabled; turning on DebugNonSafepoints to gain additional output
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)    2618  955 %     3       org.jml.regression.linear.DoubleLinearRegression::fit @ 25 (155 bytes)
 total in heap  [0x0000000117f25a10,0x0000000117f26768] = 3416
 relocation     [0x0000000117f25b88,0x0000000117f25c90] = 264
 main code      [0x0000000117f25ca0,0x0000000117f26260] = 1472
 stub code      [0x0000000117f26260,0x0000000117f262c8] = 104
 oops           [0x0000000117f262c8,0x0000000117f262d0] = 8
 metadata       [0x0000000117f262d0,0x0000000117f262d8] = 8
 scopes data    [0x0000000117f262d8,0x0000000117f26448] = 368
 scopes pcs     [0x0000000117f26448,0x0000000117f26718] = 720
 dependencies   [0x0000000117f26718,0x0000000117f26720] = 8
 nul chk table  [0x0000000117f26720,0x0000000117f26768] = 72

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
 ;;  block B10 [0, 0]
  0x0000000117f25ca0: 448b 5608 | 49c1 e203 

  0x0000000117f25ca8: ;   {runtime_call ic_miss_stub}
  0x0000000117f25ca8: 4c3b d00f | 856f fc9e | ff90 9090 | 9090 9090 | 9090 9090 | 9090 9090 
[Verified Entry Point]
  0x0000000117f25cc0: 8984 2400 | a0fe ff55 | 4881 ec90 

  0x0000000117f25ccc: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25ccc: 0000 0048 | bf00 40f0 | 7202 0000 | 008b 9f1c | 0100 0083 | c302 899f | 1c01 0000 | 81e3 fe07 
  0x0000000117f25cec: 0000 83fb | 000f 8432 

  0x0000000117f25cf4: ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@0 (line 11)
  0x0000000117f25cf4: 0300 008b 

  0x0000000117f25cf8: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
  0x0000000117f25cf8: 7a0c 8b59 

  0x0000000117f25cfc: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
                      ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25cfc: 0c3b fb48 | bf00 40f0 | 7202 0000 | 0048 bb70 | 0100 0000 | 0000 000f | 850a 0000 | 0048 bb60 
  0x0000000117f25d1c: 0100 0000 | 0000 0048 | 8b04 1f48 | 8d40 0148 | 8904 1f0f | 85e0 0100 

  0x0000000117f25d34: ;*if_icmpeq {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
  0x0000000117f25d34: 00bf 0000 | 0000 c5f9 | 57c0 c5f1 | 57c9 e979 

  0x0000000117f25d44: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x0000000117f25d44: 0000 0090 
 ;;  block B4 [32, 51]
  0x0000000117f25d48: 3b7a 0c0f | 832b 0300 | 0048 63c7 | c5fb 1054 

  0x0000000117f25d58: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x0000000117f25d58: c210 c5eb | 58d1 3b79 | 0c0f 8369 | 0300 0048 | 63c7 c5fb 

  0x0000000117f25d6c: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x0000000117f25d6c: 104c c110 | c5f3 58c8 

  0x0000000117f25d74: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25d74: ffc7 48b8 | 0040 f072 | 0200 0000 | 8b98 2001 | 0000 83c3 | 0289 9820 | 0100 0081 | e3fe 3f00 
  0x0000000117f25d94: 0083 fb00 
 ;;  168 branch [EQ] [CounterOverflowStub: 0x00007fa516f95040]
  0x0000000117f25d98: 0f84 5403 

  0x0000000117f25d9c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x0000000117f25d9c: 0000 4d8b | 9730 0100 

  0x0000000117f25da4: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x0000000117f25da4: 0041 8502 

  0x0000000117f25da8: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25da8: 48b8 0040 | f072 0200 | 0000 ff80 | b001 0000 | c5f9 28c1 

  0x0000000117f25dbc: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x0000000117f25dbc: c5f9 28ca 
 ;;  block B1 [25, 29]
  0x0000000117f25dc0: ; implicit exception: dispatches to 0x0000000117f26113
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
  0x0000000117f25dc0: 8b42 0c3b 

  0x0000000117f25dc4: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25dc4: f848 bb00 | 40f0 7202 | 0000 0049 | b8a0 0100 | 0000 0000 | 000f 8c0a | 0000 0049 | b890 0100 
  0x0000000117f25de4: 0000 0000 | 004e 8b0c | 034d 8d49 | 014e 890c | 030f 8c4d 

  0x0000000117f25df8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x0000000117f25df8: ffff ffc5 | eb2a d0c5 | f35e cac5 | fb5e c2bf | 0000 0000 | c5e9 57d2 | c5e1 57db 
 ;;  204 branch [AL] [B6] 
  0x0000000117f25e14: e998 0000 

  0x0000000117f25e18: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x0000000117f25e18: 0090 9090 | 9090 9090 
 ;;  block B7 [85, 128]
  0x0000000117f25e20: 3b7a 0c0f | 8303 0300 | 0048 63df | c5fb 1064 

  0x0000000117f25e30: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x0000000117f25e30: da10 c5db | 5ce1 c5f9 | 28ec c5d3 | 59ec c5d3 | 58eb 3b79 | 0c0f 8335 | 0300 0048 | 63df c5fb 
  0x0000000117f25e50: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x0000000117f25e50: 105c d910 | c5e3 5cd8 | c5e3 59dc | c5e3 58da 

  0x0000000117f25e60: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25e60: ffc7 48bb | 0040 f072 | 0200 0000 | 448b 8320 | 0100 0041 | 83c0 0244 | 8983 2001 | 0000 4181 
  0x0000000117f25e80: e0fe 3f00 | 0041 83f8 | 000f 8413 

  0x0000000117f25e8c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x0000000117f25e8c: 0300 004d | 8b97 3001 

  0x0000000117f25e94: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {poll}
  0x0000000117f25e94: 0000 4185 

  0x0000000117f25e98: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25e98: 0248 bb00 | 40f0 7202 | 0000 00ff | 83e8 0100 | 00c5 f928 | d3c5 f928 

  0x0000000117f25eb0: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25eb0: dd3b f848 | bb00 40f0 | 7202 0000 | 0049 b8d8 | 0100 0000 | 0000 000f | 8c0a 0000 | 0049 b8c8 
  0x0000000117f25ed0: 0100 0000 | 0000 004e | 8b0c 034d | 8d49 014e | 890c 030f | 8c37 ffff 

  0x0000000117f25ee8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x0000000117f25ee8: ffc5 eb5e | d3c5 fb11 

  0x0000000117f25ef0: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x0000000117f25ef0: 5618 c5eb | 59d1 c5fb | 5cc2 c5fb 

  0x0000000117f25efc: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
  0x0000000117f25efc: 1146 1048 | 81c4 9000 

  0x0000000117f25f04: ;   {poll_return}
  0x0000000117f25f04: 0000 5d49 | 3ba7 2801 | 0000 0f87 | c802 0000 

  0x0000000117f25f14: ;*return {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@154 (line 33)
  0x0000000117f25f14: c390 9090 

  0x0000000117f25f18: ;   {no_reloc}
  0x0000000117f25f18: e9e4 0200 | 0000 0000 | 0000 498b | 8748 0100 | 0048 8d78 | 3849 3bbf | 5801 0000 | 0f87 d102 
  0x0000000117f25f38: 0000 4989 | bf48 0100 | 0048 c700 | 0100 0000 | 488b ca48 | c1e9 0389 | 4808 4833 | c989 480c 
  0x0000000117f25f58: 4833 c948 | bf05 0000 | 0000 0000 | 0048 894c | f808 48ff 

  0x0000000117f25f6c: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x0000000117f25f6c: cf75 f648 

  0x0000000117f25f70: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f25f70: 8bd0 48be | 0040 f072 | 0200 0000 | 4883 8680 | 0100 0001 

  0x0000000117f25f84: ;   {oop("Arrays length are not equals"{0x000000018f500000})}
  0x0000000117f25f84: 48ba 0000 | 508f 0100 | 0000 488b 

  0x0000000117f25f90: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
  0x0000000117f25f90: f048 8944 

  0x0000000117f25f94: ;   {optimized virtual_call}
  0x0000000117f25f94: 2468 90e8 

  0x0000000117f25f98: ; ImmutableOopMap {[104]=Oop }
                      ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
  0x0000000117f25f98: 84fc 9eff | 488b 4424 | 68e9 9102 

  0x0000000117f25fa4: ;*athrow {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@16 (line 11)
  0x0000000117f25fa4: 0000 8984 | 2400 a0fe | ff55 4881 | ec90 0000 | 0048 8b5e | 7848 8b46 | 7048 8b56 | 68c5 fb10 
  0x0000000117f25fc4: 4658 c5fb | 104e 488b | 4e40 488b | fe48 895c | 2460 4889 | 4424 5848 | 8954 2450 | 894c 2448 
  0x0000000117f25fe4: c5fb 1144 | 2478 c5fb | 114c 2470 

  0x0000000117f25ff0: ;   {runtime_call SharedRuntime::OSR_migration_end(long*)}
  0x0000000117f25ff0: e8ab f032 | f68b 4c24 | 4848 8bf9 | c5fb 104c | 2470 c5f9 | 28c1 c5fb | 104c 2478 | 488b 5424 
  0x0000000117f26010: 5048 8bca | 488b 4424 | 5848 8bd0 | 488b 5c24 | 6048 8bf3 
 ;;  104 branch [AL] [B1] 
  0x0000000117f26024: e997 fdff 

  0x0000000117f26028: ;   {metadata({method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f26028: ff49 ba60 | fac8 7202 | 0000 004c | 8954 2408 | 48c7 0424 | ffff ffff 

  0x0000000117f26040: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000117f26040: e87b 4593 

  0x0000000117f26044: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*synchronization entry
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
  0x0000000117f26044: ffe9 adfc 

  0x0000000117f26048: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f26048: ffff e8f1 

  0x0000000117f2604c: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
                      ;   {external_word}
  0x0000000117f2604c: a493 ff48 | bf69 ab5f | 0e01 0000 | 0048 83e4 

  0x0000000117f2605c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f2605c: f0e8 eeee 

  0x0000000117f26060: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f26060: 08f6 f4e8 

  0x0000000117f26064: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
  0x0000000117f26064: d8a4 93ff 

  0x0000000117f26068: ;   {external_word}
  0x0000000117f26068: 48bf 69ab | 5f0e 0100 | 0000 4883 

  0x0000000117f26074: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f26074: e4f0 e8d5 | ee08 f6f4 
 ;; RangeCheckStub slow case
  0x0000000117f2607c: 4889 3c24 | 4889 5424 

  0x0000000117f26084: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000117f26084: 08e8 b6ad 

  0x0000000117f26088: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
                      ;   {external_word}
  0x0000000117f26088: 93ff 48bf | 69ab 5f0e | 0100 0000 | 4883 e4f0 

  0x0000000117f26098: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f26098: e8b3 ee08 

  0x0000000117f2609c: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f2609c: f6f4 e89d 

  0x0000000117f260a0: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000117f260a0: a493 ff48 | bf69 ab5f | 0e01 0000 | 0048 83e4 

  0x0000000117f260b0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f260b0: f0e8 9aee 

  0x0000000117f260b4: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f260b4: 08f6 f4e8 

  0x0000000117f260b8: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x0000000117f260b8: 84a4 93ff 

  0x0000000117f260bc: ;   {external_word}
  0x0000000117f260bc: 48bf 69ab | 5f0e 0100 | 0000 4883 

  0x0000000117f260c8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f260c8: e4f0 e881 | ee08 f6f4 
 ;; RangeCheckStub slow case
  0x0000000117f260d0: 4889 3c24 | 4889 4c24 

  0x0000000117f260d8: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000117f260d8: 08e8 62ad 

  0x0000000117f260dc: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000117f260dc: 93ff 48bf | 69ab 5f0e | 0100 0000 | 4883 e4f0 

  0x0000000117f260ec: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f260ec: e85f ee08 

  0x0000000117f260f0: ;   {metadata({method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f260f0: f6f4 49ba | 60fa c872 | 0200 0000 | 4c89 5424 | 0848 c704 | 2433 0000 

  0x0000000117f26108: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000117f26108: 00e8 b244 

  0x0000000117f2610c: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x0000000117f2610c: 93ff e98b 

  0x0000000117f26110: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f26110: fcff ffe8 

  0x0000000117f26114: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
  0x0000000117f26114: 28a4 93ff 

  0x0000000117f26118: ;   {external_word}
  0x0000000117f26118: 48bf 69ab | 5f0e 0100 | 0000 4883 

  0x0000000117f26124: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f26124: e4f0 e825 | ee08 f6f4 
 ;; RangeCheckStub slow case
  0x0000000117f2612c: 4889 3c24 | 4889 5424 

  0x0000000117f26134: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000117f26134: 08e8 06ad 

  0x0000000117f26138: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
                      ;   {external_word}
  0x0000000117f26138: 93ff 48bf | 69ab 5f0e | 0100 0000 | 4883 e4f0 

  0x0000000117f26148: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f26148: e803 ee08 

  0x0000000117f2614c: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f2614c: f6f4 e8ed 

  0x0000000117f26150: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
                      ;   {external_word}
  0x0000000117f26150: a393 ff48 | bf69 ab5f | 0e01 0000 | 0048 83e4 

  0x0000000117f26160: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f26160: f0e8 eaed 

  0x0000000117f26164: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f26164: 08f6 f4e8 

  0x0000000117f26168: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x0000000117f26168: d4a3 93ff 

  0x0000000117f2616c: ;   {external_word}
  0x0000000117f2616c: 48bf 69ab | 5f0e 0100 | 0000 4883 

  0x0000000117f26178: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f26178: e4f0 e8d1 | ed08 f6f4 
 ;; RangeCheckStub slow case
  0x0000000117f26180: 4889 3c24 | 4889 4c24 

  0x0000000117f26188: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000117f26188: 08e8 b2ac 

  0x0000000117f2618c: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
                      ;   {external_word}
  0x0000000117f2618c: 93ff 48bf | 69ab 5f0e | 0100 0000 | 4883 e4f0 

  0x0000000117f2619c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f2619c: e8af ed08 

  0x0000000117f261a0: ;   {metadata({method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f261a0: f6f4 49ba | 60fa c872 | 0200 0000 | 4c89 5424 | 0848 c704 | 2480 0000 

  0x0000000117f261b8: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000117f261b8: 00e8 0244 

  0x0000000117f261bc: ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x0000000117f261bc: 93ff e9cc 

  0x0000000117f261c0: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f261c0: fcff ffe8 

  0x0000000117f261c4: ; ImmutableOopMap {rsi=Oop }
                      ;*putfield slope {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x0000000117f261c4: 78a3 93ff 

  0x0000000117f261c8: ;   {external_word}
  0x0000000117f261c8: 48bf 69ab | 5f0e 0100 | 0000 4883 

  0x0000000117f261d4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f261d4: e4f0 e875 | ed08 f6f4 
 ;; C1SafepointPollStub slow case
  0x0000000117f261dc: ;   {internal_word}
  0x0000000117f261dc: 49ba 075f | f217 0100 | 0000 4d89 | 97e8 0300 

  0x0000000117f261ec: ;   {runtime_call SafepointBlob}
  0x0000000117f261ec: 00e9 2e10 

  0x0000000117f261f0: ;   {metadata(NULL)}
  0x0000000117f261f0: 9fff 48ba | 0000 0000 | 0000 0000 
 ;; patch data encoded as movl
  0x0000000117f261fc: b800 0f05 

  0x0000000117f26200: ;   {runtime_call load_klass_patching Runtime1 stub}
  0x0000000117f26200: 0ae8 7a56 

  0x0000000117f26204: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x0000000117f26204: 93ff e90d | fdff ff48 

  0x0000000117f2620c: ;   {runtime_call fast_new_instance Runtime1 stub}
  0x0000000117f2620c: 8bd2 e8ad 

  0x0000000117f26210: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x0000000117f26210: 9893 ffe9 | 57fd ffff | 9090 498b | 8750 0400 | 0049 c787 | 5004 0000 | 0000 0000 | 49c7 8758 
  0x0000000117f26230: 0400 0000 | 0000 0048 | 81c4 9000 

  0x0000000117f2623c: ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000117f2623c: 0000 5de9 | fcb5 93ff | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
  0x0000000117f2625c: f4f4 f4f4 
[Stub Code]
  0x0000000117f26260: ;   {no_reloc}
  0x0000000117f26260: 9090 9090 

  0x0000000117f26264: ;   {static_stub}
  0x0000000117f26264: 9048 bb00 | 0000 0000 

  0x0000000117f2626c: ;   {runtime_call}
  0x0000000117f2626c: 0000 00e9 | fbff ffff 
[Exception Handler]
  0x0000000117f26274: 48bb adde | 0000 0000 | 0000 48b9 | adde 0000 | 0000 0000 | 48be adde | 0000 0000 | 0000 48bf 
  0x0000000117f26294: adde 0000 | 0000 0000 

  0x0000000117f2629c: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000000117f2629c: e83f 7e93 

  0x0000000117f262a0: ;   {external_word}
  0x0000000117f262a0: ff48 bf69 | ab5f 0e01 | 0000 0048 

  0x0000000117f262ac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f262ac: 83e4 f0e8 | 9cec 08f6 

  0x0000000117f262b4: ;   {section_word}
  0x0000000117f262b4: f449 bab5 | 62f2 1701 | 0000 0041 

  0x0000000117f262c0: ;   {runtime_call DeoptimizationBlob}
  0x0000000117f262c0: 52e9 9a05 | 9fff f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x0000000117f262c8:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x0000000117f262d0:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x0000000117f25c9f offset=ffffffff bits=0):
PcDesc(pc=0x0000000117f25cf7 offset=57 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@0 (line 11)
PcDesc(pc=0x0000000117f25cfa offset=5a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
PcDesc(pc=0x0000000117f25cfd offset=5d bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
PcDesc(pc=0x0000000117f25d35 offset=95 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
PcDesc(pc=0x0000000117f25d47 offset=a7 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
PcDesc(pc=0x0000000117f25d5a offset=ba bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
PcDesc(pc=0x0000000117f25d70 offset=d0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x0000000117f25d9e offset=fe bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000117f25da5 offset=105 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rdi [14],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f25dc0 offset=120 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000117f25dc3 offset=123 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
PcDesc(pc=0x0000000117f25dfb offset=15b bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x0000000117f25e19 offset=179 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
PcDesc(pc=0x0000000117f25e32 offset=192 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
PcDesc(pc=0x0000000117f25e54 offset=1b4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x0000000117f25e8f offset=1ef bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x0000000117f25e96 offset=1f6 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rdi [14],int
PcDesc(pc=0x0000000117f25eb1 offset=211 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x0000000117f25ee9 offset=249 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x0000000117f25ef2 offset=252 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x0000000117f25eff offset=25f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
PcDesc(pc=0x0000000117f25f15 offset=275 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@154 (line 33)
PcDesc(pc=0x0000000117f25f6f offset=2cf bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
PcDesc(pc=0x0000000117f25f91 offset=2f1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
PcDesc(pc=0x0000000117f25f9c offset=2fc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: stack[104],oop
PcDesc(pc=0x0000000117f25fa6 offset=306 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@16 (line 11)
PcDesc(pc=0x0000000117f26045 offset=3a5 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f2604f offset=3af bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f26068 offset=3c8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f2608a offset=3ea bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f260a3 offset=403 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f260bc offset=41c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f260de offset=43e bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f2610e offset=46e bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rdi [14],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f26118 offset=478 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f2613a offset=49a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f26153 offset=4b3 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f2616c offset=4cc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f2618e offset=4ee bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f261be offset=51e bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rdi [14],int
PcDesc(pc=0x0000000117f261c8 offset=528 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f26206 offset=566 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f26213 offset=573 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f262c9 offset=629 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 20 OopMaps

ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop } pc offsets: 261 502 
ImmutableOopMap {[104]=Oop } pc offsets: 764 
ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop } pc offsets: 933 943 968 
ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop } pc offsets: 1002 1027 1052 1086 1134 1144 1178 1203 1228 1262 1310 
ImmutableOopMap {rsi=Oop } pc offsets: 1320 
ImmutableOopMap {} pc offsets: 1382 1395 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x0000000117f25cf7 offset=57):
   org.jml.regression.linear.DoubleLinearRegression::fit@0 (line 11)
ScopeDesc(pc=0x0000000117f25cfa offset=5a):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x0000000117f25cfd offset=5d):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x0000000117f25d35 offset=95):
   org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
ScopeDesc(pc=0x0000000117f25d47 offset=a7):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x0000000117f25d5a offset=ba):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x0000000117f25d70 offset=d0):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x0000000117f25d9e offset=fe):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000117f25da5 offset=105):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rdi [14],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f25dc0 offset=120):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000117f25dc3 offset=123):
   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x0000000117f25dfb offset=15b):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x0000000117f25e19 offset=179):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
ScopeDesc(pc=0x0000000117f25e32 offset=192):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
ScopeDesc(pc=0x0000000117f25e54 offset=1b4):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x0000000117f25e8f offset=1ef):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x0000000117f25e96 offset=1f6):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rdi [14],int
ScopeDesc(pc=0x0000000117f25eb1 offset=211):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x0000000117f25ee9 offset=249):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x0000000117f25ef2 offset=252):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x0000000117f25eff offset=25f):
   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
ScopeDesc(pc=0x0000000117f25f15 offset=275):
   org.jml.regression.linear.DoubleLinearRegression::fit@154 (line 33)
ScopeDesc(pc=0x0000000117f25f6f offset=2cf):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
ScopeDesc(pc=0x0000000117f25f91 offset=2f1):
   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
ScopeDesc(pc=0x0000000117f25f9c offset=2fc):
   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: stack[104],oop
ScopeDesc(pc=0x0000000117f25fa6 offset=306):
   org.jml.regression.linear.DoubleLinearRegression::fit@16 (line 11)
ScopeDesc(pc=0x0000000117f26045 offset=3a5):
   org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f2604f offset=3af):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f26068 offset=3c8):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f2608a offset=3ea):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f260a3 offset=403):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f260bc offset=41c):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f260de offset=43e):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f2610e offset=46e):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rdi [14],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f26118 offset=478):
   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f2613a offset=49a):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f26153 offset=4b3):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f2616c offset=4cc):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f2618e offset=4ee):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f261be offset=51e):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rdi [14],int
ScopeDesc(pc=0x0000000117f261c8 offset=528):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f26206 offset=566):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f26213 offset=573):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x0000000117f25b88: 600b
relocInfo@0x0000000117f25b88 [type=6(runtime_call) addr=0x0000000117f25cab offset=11] | [destination=0x0000000117915920]
         @0x0000000117f25b8a: c024
relocInfo@0x0000000117f25b8a [type=12(metadata) addr=0x0000000117f25ccf offset=36] | [metadata_addr=0x0000000117f25cd1 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b8c: c030
relocInfo@0x0000000117f25b8c [type=12(metadata) addr=0x0000000117f25cff offset=48] | [metadata_addr=0x0000000117f25d01 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b8e: c077
relocInfo@0x0000000117f25b8e [type=12(metadata) addr=0x0000000117f25d76 offset=119] | [metadata_addr=0x0000000117f25d78 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b90: a02f
relocInfo@0x0000000117f25b90 [type=10(poll) addr=0x0000000117f25da5 offset=47]
         @0x0000000117f25b92: c003
relocInfo@0x0000000117f25b92 [type=12(metadata) addr=0x0000000117f25da8 offset=3] | [metadata_addr=0x0000000117f25daa *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b94: c01d
relocInfo@0x0000000117f25b94 [type=12(metadata) addr=0x0000000117f25dc5 offset=29] | [metadata_addr=0x0000000117f25dc7 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b96: c09d
relocInfo@0x0000000117f25b96 [type=12(metadata) addr=0x0000000117f25e62 offset=157] | [metadata_addr=0x0000000117f25e64 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b98: a034
relocInfo@0x0000000117f25b98 [type=10(poll) addr=0x0000000117f25e96 offset=52]
         @0x0000000117f25b9a: c003
relocInfo@0x0000000117f25b9a [type=12(metadata) addr=0x0000000117f25e99 offset=3] | [metadata_addr=0x0000000117f25e9b *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b9c: c01a
relocInfo@0x0000000117f25b9c [type=12(metadata) addr=0x0000000117f25eb3 offset=26] | [metadata_addr=0x0000000117f25eb5 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25b9e: b054
relocInfo@0x0000000117f25b9e [type=11(poll_return) addr=0x0000000117f25f07 offset=84]
         @0x0000000117f25ba0: 0011
relocInfo@0x0000000117f25ba0 [type=0(none) addr=0x0000000117f25f18 offset=17]
         @0x0000000117f25ba2: c05a
relocInfo@0x0000000117f25ba2 [type=12(metadata) addr=0x0000000117f25f72 offset=90] | [metadata_addr=0x0000000117f25f74 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25ba4: 1012
relocInfo@0x0000000117f25ba4 [type=1(oop) addr=0x0000000117f25f84 offset=18] | [oop_addr=0x0000000117f25f86 *=0x000000018f500000 offset=0]
         @0x0000000117f25ba6: 3413
relocInfo@0x0000000117f25ba6 [type=3(opt_virtual_call) addr=0x0000000117f25f97 offset=19 format=1] | [destination=0x0000000117915c20 metadata=0x0000000000000000]
         @0x0000000117f25ba8: 6459
relocInfo@0x0000000117f25ba8 [type=6(runtime_call) addr=0x0000000117f25ff0 offset=89 format=1] | [destination=0x000000010e2550a0]
         @0x0000000117f25baa: c039
relocInfo@0x0000000117f25baa [type=12(metadata) addr=0x0000000117f26029 offset=57] | [metadata_addr=0x0000000117f2602b *=0x0000000272c8fa60 offset=0]metadata_value=0x0000000272c8fa60: {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25bac: 6417
relocInfo@0x0000000117f25bac [type=6(runtime_call) addr=0x0000000117f26040 offset=23 format=1] | [destination=0x000000011785a5c0]
         @0x0000000117f25bae: 640a
relocInfo@0x0000000117f25bae [type=6(runtime_call) addr=0x0000000117f2604a offset=10 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25bb0: f8030e5fab6900017005
relocInfo@0x0000000117f25bb8 [type=7(external_word) addr=0x0000000117f2604f offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25bba: 640e
relocInfo@0x0000000117f25bba [type=6(runtime_call) addr=0x0000000117f2605d offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25bbc: 6406
relocInfo@0x0000000117f25bbc [type=6(runtime_call) addr=0x0000000117f26063 offset=6 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25bbe: f8030e5fab6900017005
relocInfo@0x0000000117f25bc6 [type=7(external_word) addr=0x0000000117f26068 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25bc8: 640e
relocInfo@0x0000000117f25bc8 [type=6(runtime_call) addr=0x0000000117f26076 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25bca: 640f
relocInfo@0x0000000117f25bca [type=6(runtime_call) addr=0x0000000117f26085 offset=15 format=1] | [destination=0x0000000117860e40]
         @0x0000000117f25bcc: f8030e5fab6900017005
relocInfo@0x0000000117f25bd4 [type=7(external_word) addr=0x0000000117f2608a offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25bd6: 640e
relocInfo@0x0000000117f25bd6 [type=6(runtime_call) addr=0x0000000117f26098 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25bd8: 6406
relocInfo@0x0000000117f25bd8 [type=6(runtime_call) addr=0x0000000117f2609e offset=6 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25bda: f8030e5fab6900017005
relocInfo@0x0000000117f25be2 [type=7(external_word) addr=0x0000000117f260a3 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25be4: 640e
relocInfo@0x0000000117f25be4 [type=6(runtime_call) addr=0x0000000117f260b1 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25be6: 6406
relocInfo@0x0000000117f25be6 [type=6(runtime_call) addr=0x0000000117f260b7 offset=6 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25be8: f8030e5fab6900017005
relocInfo@0x0000000117f25bf0 [type=7(external_word) addr=0x0000000117f260bc offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25bf2: 640e
relocInfo@0x0000000117f25bf2 [type=6(runtime_call) addr=0x0000000117f260ca offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25bf4: 640f
relocInfo@0x0000000117f25bf4 [type=6(runtime_call) addr=0x0000000117f260d9 offset=15 format=1] | [destination=0x0000000117860e40]
         @0x0000000117f25bf6: f8030e5fab6900017005
relocInfo@0x0000000117f25bfe [type=7(external_word) addr=0x0000000117f260de offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c00: 640e
relocInfo@0x0000000117f25c00 [type=6(runtime_call) addr=0x0000000117f260ec offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c02: c006
relocInfo@0x0000000117f25c02 [type=12(metadata) addr=0x0000000117f260f2 offset=6] | [metadata_addr=0x0000000117f260f4 *=0x0000000272c8fa60 offset=0]metadata_value=0x0000000272c8fa60: {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25c04: 6417
relocInfo@0x0000000117f25c04 [type=6(runtime_call) addr=0x0000000117f26109 offset=23 format=1] | [destination=0x000000011785a5c0]
         @0x0000000117f25c06: 640a
relocInfo@0x0000000117f25c06 [type=6(runtime_call) addr=0x0000000117f26113 offset=10 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25c08: f8030e5fab6900017005
relocInfo@0x0000000117f25c10 [type=7(external_word) addr=0x0000000117f26118 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c12: 640e
relocInfo@0x0000000117f25c12 [type=6(runtime_call) addr=0x0000000117f26126 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c14: 640f
relocInfo@0x0000000117f25c14 [type=6(runtime_call) addr=0x0000000117f26135 offset=15 format=1] | [destination=0x0000000117860e40]
         @0x0000000117f25c16: f8030e5fab6900017005
relocInfo@0x0000000117f25c1e [type=7(external_word) addr=0x0000000117f2613a offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c20: 640e
relocInfo@0x0000000117f25c20 [type=6(runtime_call) addr=0x0000000117f26148 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c22: 6406
relocInfo@0x0000000117f25c22 [type=6(runtime_call) addr=0x0000000117f2614e offset=6 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25c24: f8030e5fab6900017005
relocInfo@0x0000000117f25c2c [type=7(external_word) addr=0x0000000117f26153 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c2e: 640e
relocInfo@0x0000000117f25c2e [type=6(runtime_call) addr=0x0000000117f26161 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c30: 6406
relocInfo@0x0000000117f25c30 [type=6(runtime_call) addr=0x0000000117f26167 offset=6 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25c32: f8030e5fab6900017005
relocInfo@0x0000000117f25c3a [type=7(external_word) addr=0x0000000117f2616c offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c3c: 640e
relocInfo@0x0000000117f25c3c [type=6(runtime_call) addr=0x0000000117f2617a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c3e: 640f
relocInfo@0x0000000117f25c3e [type=6(runtime_call) addr=0x0000000117f26189 offset=15 format=1] | [destination=0x0000000117860e40]
         @0x0000000117f25c40: f8030e5fab6900017005
relocInfo@0x0000000117f25c48 [type=7(external_word) addr=0x0000000117f2618e offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c4a: 640e
relocInfo@0x0000000117f25c4a [type=6(runtime_call) addr=0x0000000117f2619c offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c4c: c006
relocInfo@0x0000000117f25c4c [type=12(metadata) addr=0x0000000117f261a2 offset=6] | [metadata_addr=0x0000000117f261a4 *=0x0000000272c8fa60 offset=0]metadata_value=0x0000000272c8fa60: {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f25c4e: 6417
relocInfo@0x0000000117f25c4e [type=6(runtime_call) addr=0x0000000117f261b9 offset=23 format=1] | [destination=0x000000011785a5c0]
         @0x0000000117f25c50: 640a
relocInfo@0x0000000117f25c50 [type=6(runtime_call) addr=0x0000000117f261c3 offset=10 format=1] | [destination=0x0000000117860540]
         @0x0000000117f25c52: f8030e5fab6900017005
relocInfo@0x0000000117f25c5a [type=7(external_word) addr=0x0000000117f261c8 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c5c: 640e
relocInfo@0x0000000117f25c5c [type=6(runtime_call) addr=0x0000000117f261d6 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c5e: f2d58006
relocInfo@0x0000000117f25c60 [type=8(internal_word) addr=0x0000000117f261dc offset=6 data=725] | [target=0x0000000117f25f07]
         @0x0000000117f25c62: 6411
relocInfo@0x0000000117f25c62 [type=6(runtime_call) addr=0x0000000117f261ed offset=17 format=1] | [destination=0x0000000117917220]
         @0x0000000117f25c64: c005
relocInfo@0x0000000117f25c64 [type=12(metadata) addr=0x0000000117f261f2 offset=5] | [metadata_addr=0x0000000117f261f4 *=0x0000000000000000 offset=0]
         @0x0000000117f25c66: 640f
relocInfo@0x0000000117f25c66 [type=6(runtime_call) addr=0x0000000117f26201 offset=15 format=1] | [destination=0x000000011785b880]
         @0x0000000117f25c68: 640d
relocInfo@0x0000000117f25c68 [type=6(runtime_call) addr=0x0000000117f2620e offset=13 format=1] | [destination=0x000000011785fac0]
         @0x0000000117f25c6a: 6431
relocInfo@0x0000000117f25c6a [type=6(runtime_call) addr=0x0000000117f2623f offset=49 format=1] | [destination=0x0000000117861840]
         @0x0000000117f25c6c: 0021
relocInfo@0x0000000117f25c6c [type=0(none) addr=0x0000000117f26260 offset=33]
         @0x0000000117f25c6e: f801fd095005
relocInfo@0x0000000117f25c72 [type=5(static_stub) addr=0x0000000117f26265 offset=5 data=-759] | [static_call=0x0000000117f25f97]
         @0x0000000117f25c74: c000
relocInfo@0x0000000117f25c74 [type=12(metadata) addr=0x0000000117f26265 offset=0] | [metadata_addr=0x0000000117f26267 *=0x0000000000000000 offset=0]
         @0x0000000117f25c76: 640a
relocInfo@0x0000000117f25c76 [type=6(runtime_call) addr=0x0000000117f2626f offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x0000000117f25c78: 642d
relocInfo@0x0000000117f25c78 [type=6(runtime_call) addr=0x0000000117f2629c offset=45 format=1] | [destination=0x000000011785e0e0]
         @0x0000000117f25c7a: f8030e5fab6900017005
relocInfo@0x0000000117f25c82 [type=7(external_word) addr=0x0000000117f262a1 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f25c84: 640e
relocInfo@0x0000000117f25c84 [type=6(runtime_call) addr=0x0000000117f262af offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f25c86: f801feae9006
relocInfo@0x0000000117f25c8a [type=9(section_word) addr=0x0000000117f262b5 offset=6 data=-338] | [target=0x0000000117f262b5]
         @0x0000000117f25c8c: 640c
relocInfo@0x0000000117f25c8c [type=6(runtime_call) addr=0x0000000117f262c1 offset=12 format=1] | [destination=0x0000000117916860]
         @0x0000000117f25c8e: 0000
relocInfo@0x0000000117f25c8e [type=0(none) addr=0x0000000117f262c1 offset=0]
         @0x0000000117f25c90: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 8 entries, 68 bytes):
{
   < 0x0000000117f25cf7, 0x0000000117f2604a > < 0x0000000117f25cfa, 0x0000000117f26063 > < 0x0000000117f25d5e, 0x0000000117f2609e > 
   < 0x0000000117f25d5e, 0x0000000117f260b7 > < 0x0000000117f25dc0, 0x0000000117f26113 > < 0x0000000117f25e42, 0x0000000117f2614e > 
   < 0x0000000117f25e42, 0x0000000117f26167 > < 0x0000000117f25eed, 0x0000000117f261c3 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 956 ------------------------
{method}
 - this oop:          0x0000000272c8fa60
 - method holder:     'org/jml/regression/linear/DoubleLinearRegression'
 - constants:         0x0000000272c8f518 constant pool [71]/operands[5] {0x0000000272c8f518} for 'org/jml/regression/linear/DoubleLinearRegression' cache=0x0000000272c8fe20
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([D[D)V'
 - max stack:         9
 - max locals:        16
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000011780de20
 - adapters:          AHE@0x00007fa51303fe70: 0xbbb00000 i2c: 0x0000000117885ee0 c2i: 0x0000000117885fbf c2iUV: 0x0000000117885f92 c2iNCI: 0x0000000117885ffc
 - compiled entry     0x0000000117885fbf
 - code size:         155
 - code start:        0x0000000272c8f928
 - code end (excl):   0x0000000272c8f9c3
 - method data:       0x0000000272f04000
 - checked ex length: 0
 - linenumber start:  0x0000000272c8f9c3
 - localvar length:   11
 - localvar start:    0x0000000272c8f9da

------------------------ OptoAssembly for Compile_id = 956 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N424: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B40 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c     movq    R13, [RSI + #120 (8-bit)]	# ptr
020     movq    RBP, [RSI + #112 (8-bit)]	# ptr
024     movl    RBX, [RSI + #64 (8-bit)]	# int
027     movq    R12, [RSI + #104 (8-bit)]	# ptr
02b     movsd   XMM0, [RSI + #88 (8-bit)]	# double
030     movdq   R14, XMM0	# spill
035     movsd   XMM0, [RSI + #72 (8-bit)]	# double
03a     movsd   [rsp + #24], XMM0	# spill
040     movq    RDI, RSI	# spill
043     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
050     testq   R13, R13	# ptr
053     je     B40  P=0.001000 C=-1.000000

059     B2: #	out( B50 B3 ) <- in( B1 )  Freq: 0.999
059     movl    R11, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass org/jml/regression/linear/DoubleLinearRegression: 0x00007fa517974a20:Constant:exact *	# compressed klass ptr
067     jne,u   B50  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R8, R13	# spill
070     # checkcastPP of R8

070     B4: #	out( B41 B5 ) <- in( B3 B40 )  Freq: 0.999999
070     testq   RBP, RBP	# ptr
073     je     B41  P=0.001000 C=-1.000000

079     B5: #	out( B50 B6 ) <- in( B4 )  Freq: 0.998999
079     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
087     jne,u   B50  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     movq    RCX, RBP	# spill
090     # checkcastPP of RCX

090     B7: #	out( B42 B8 ) <- in( B6 B41 )  Freq: 0.999998
090     testq   R12, R12	# ptr
093     je     B42  P=0.001000 C=-1.000000

099     B8: #	out( B50 B9 ) <- in( B7 )  Freq: 0.998998
099     movl    R11, [R12 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 2 bytes pad for loops and calls
0a0     cmpl    R11, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
0a7     jne,u   B50  P=0.000001 C=-1.000000

0ad     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0ad     # checkcastPP of R12

0ad     B10: #	out( B52 B11 ) <- in( B9 B42 )  Freq: 0.999997
0ad     movl    R10, [RCX + #12 (8-bit)]	# range
0b1     NullCheck RCX

0b1     B11: #	out( B52 B12 ) <- in( B10 )  Freq: 0.999996
0b1     movl    RSI, [R12 + #12 (8-bit)]	# range
0b6     NullCheck R12

0b6     B12: #	out( B51 B13 ) <- in( B11 )  Freq: 0.999995
0b6     cmpl    RBX, R10
0b9     jge     B51  P=0.000000 C=7274913.000000

0bf     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0bf     movl    R11, RBX	# spill
0c2     incl    R11	# int
0c5     xorl    RDI, RDI	# int
0c7     cmpl    R11, RDI
0ca     cmovllt R11, RDI	# max
0ce     cmpl    R11, R10
0d1     cmovlgt R11, R10	# min

0d5     B14: #	out( B43 B15 ) <- in( B13 B17 ) Loop( B14-B17 inner pre of N377) Freq: 1.99998
0d5     cmpl    RBX, R10	# unsigned
0d8     jnb,u   B43  P=0.000001 C=-1.000000

0de     B15: #	out( B44 B16 ) <- in( B14 )  Freq: 1.99998
0de     movdq   XMM0, R14	# spill
0e3     vaddsd  XMM1, XMM0, [RCX + #16 + RBX << #3]
0e9     cmpl    RBX, RSI	# unsigned
0eb     jnb,u   B44  P=0.000001 C=-1.000000

0f1     B16: #	out( B18 B17 ) <- in( B15 )  Freq: 1.99998
0f1     movsd   XMM0, [rsp + #24]	# spill
0f7     vaddsd  XMM0, XMM0, [R12 + #16 + RBX << #3]
0fe     incl    RBX	# int
100     cmpl    RBX, R11
103     jge,s   B18	# loop end  P=0.500000 C=7274913.000000

105     B17: #	out( B14 ) <- in( B16 )  Freq: 0.99999
105     movdq   R14, XMM1	# spill
10a     movsd   [rsp + #24], XMM0	# spill
110     jmp,s   B14

112     B18: #	out( B29 B19 ) <- in( B16 )  Freq: 0.99999
112     cmpl    R10, RSI
115     movl    RDX, R10	# spill
118     cmovlgt RDX, RSI	# min
11b     movl    R11, RDX	# spill
11e     addl    R11, #-7	# int
122     movl    RAX, #-2147483648	# int
127     cmpl    RDX, R11
12a     cmovll R11, RAX	# signed, int
12e     cmpl    RBX, R11
131     jge     B29  P=0.000001 C=-1.000000

137     B19: #	out( B45 B20 ) <- in( B18 )  Freq: 0.999989
137     # castII of RBX
137     cmpl    RBX, R10	# unsigned
        nop 	# 6 bytes pad for loops and calls
140     jnb,u   B45  P=0.000001 C=-1.000000

146     B20: #	out( B46 B21 ) <- in( B19 )  Freq: 0.999988
146     cmpl    RBX, RSI	# unsigned
148     jnb,u   B46  P=0.000001 C=-1.000000

14e     B21: #	out( B47 B22 ) <- in( B20 )  Freq: 0.999987
14e     movl    R9, RBX	# spill
151     addl    R9, #7	# int
155     cmpl    R9, RSI	# unsigned
158     jnb,u   B47  P=0.000001 C=-1.000000

15e     B22: #	out( B48 B23 ) <- in( B21 )  Freq: 0.999986
        nop 	# 2 bytes pad for loops and calls
160     cmpl    R9, R10	# unsigned
163     jnb,u   B48  P=0.000001 C=-1.000000

169     B23: #	out( B49 B24 ) <- in( B22 )  Freq: 0.999985
169     cmpl    RBX, R10	# unsigned
16c     jnb,u   B49  P=0.000001 C=-1.000000

172     B24: #	out( B26 ) <- in( B23 )  Freq: 0.999984
172     movl    R9, #8000	# int
178     # TLS is in R15
178     jmp,s   B26

17a     B25: #	out( B29 B26 ) <- in( B28 ) top-of-loop Freq: 999984
17a     movq    RBP, [R15 + #304 (32-bit)]	# ptr
181     testl   rax, [RBP]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:51 (line 15) L[0]=R8 L[1]=RCX L[2]=R12 L[3]=XMM1 L[4]=_ L[5]=XMM0 L[6]=_ L[7]=RBX L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {r8=Oop r12=Oop rcx=Oop off=385/0x181}
184     cmpl    RBX, R11
187     jge     B29  P=0.000000 C=7274913.000000

18d     B26: #	out( B27 ) <- in( B24 B25 ) Loop( B26-B25 ) Freq: 999984
18d     movl    RDX, R11	# spill
190     subl    RDX, RBX	# int
192     cmpl    R11, RBX
195     cmovll RDX, RDI	# signed, int
198     cmpl    RDX, #8000	# unsigned
19e     cmovlnbe RDX, R9	# unsigned, int
1a2     addl    RDX, RBX	# int
        nop 	# 12 bytes pad for loops and calls

1b0     B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N171 strip mined) Freq: 9.99984e+11
1b0     vaddsd  XMM0, XMM0, [R12 + #16 + RBX << #3]
1b7     vaddsd  XMM1, XMM1, [RCX + #16 + RBX << #3]
1bd     movslq  RAX, RBX	# i2l
1c0     vaddsd  XMM1, XMM1, [RCX + #24 + RAX << #3]
1c6     vaddsd  XMM0, XMM0, [R12 + #24 + RAX << #3]
1cd     vaddsd  XMM1, XMM1, [RCX + #32 + RAX << #3]
1d3     vaddsd  XMM0, XMM0, [R12 + #32 + RAX << #3]
1da     vaddsd  XMM1, XMM1, [RCX + #40 + RAX << #3]
1e0     vaddsd  XMM0, XMM0, [R12 + #40 + RAX << #3]
1e7     vaddsd  XMM1, XMM1, [RCX + #48 + RAX << #3]
1ed     vaddsd  XMM0, XMM0, [R12 + #48 + RAX << #3]
1f4     vaddsd  XMM1, XMM1, [RCX + #56 + RAX << #3]
1fa     vaddsd  XMM0, XMM0, [R12 + #56 + RAX << #3]
201     vaddsd  XMM1, XMM1, [RCX + #64 + RAX << #3]
207     vaddsd  XMM0, XMM0, [R12 + #64 + RAX << #3]
20e     vaddsd  XMM1, XMM1, [RCX + #72 + RAX << #3]
214     vaddsd  XMM0, XMM0, [R12 + #72 + RAX << #3]
21b     addl    RBX, #8	# int
        nop 	# 2 bytes pad for loops and calls
220     cmpl    RBX, RDX
222     jl,s   B27	# loop end  P=1.000000 C=7274913.000000

224     B28: #	out( B25 ) <- in( B27 )  Freq: 476830
224     jmp     B25

229     B29: #	out( B34 B30 ) <- in( B18 B25 )  Freq: 0.999985
229     cmpl    RBX, R10
22c     jge,s   B34  P=0.000001 C=-1.000000

22e     B30: #	out( B31 ) <- in( B29 )  Freq: 0.999984
22e     # castII of RBX
        nop 	# 2 bytes pad for loops and calls

230     B31: #	out( B36 B32 ) <- in( B30 B33 ) Loop( B31-B33 inner post of N377) Freq: 328960
230     cmpl    RBX, R10	# unsigned
233     jnb,u   B36  P=0.000001 C=-1.000000

239     B32: #	out( B38 B33 ) <- in( B31 )  Freq: 328960
239     vaddsd  XMM1, XMM1, [RCX + #16 + RBX << #3]
        nop 	# 1 bytes pad for loops and calls
240     cmpl    RBX, RSI	# unsigned
242     jnb,u   B38  P=0.000001 C=-1.000000

248     B33: #	out( B31 B34 ) <- in( B32 )  Freq: 328960
248     vaddsd  XMM0, XMM0, [R12 + #16 + RBX << #3]
24f     incl    RBX	# int
251     cmpl    RBX, R10
254     jl,s   B31	# loop end  P=0.999999 C=7274913.000000

256     B34: #	out( B35 ) <- in( B33 B29 )  Freq: 0.333329
256     movsd   [rsp + #0], XMM0	# spill
25b     movdq   RBP, XMM1	# spill

260     B35: #	out( N424 ) <- in( B51 B34 )  Freq: 0.333329
260     movl    RSI, #-187	# int
265     movq    [rsp + #8], R8	# spill
26a     movq    [rsp + #16], RCX	# spill
26f     movq    [rsp + #24], R12	# spill
274     movl    [rsp + #36], RBX	# spill
278     movl    [rsp + #40], R10	# spill
        nop 	# 2 bytes pad for loops and calls
27f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:29 (line 15) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=RBP L[4]=_ L[5]=rsp + #0 L[6]=_ L[7]=rsp + #36 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=rsp + #36 STK[1]=rsp + #40
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=644/0x284}
284     stop	# ShouldNotReachHere

298     B36: #	out( B37 ) <- in( B31 )  Freq: 0.333328
298     movsd   [rsp + #0], XMM1	# spill
29d     movdq   RBP, XMM0	# spill

2a2     B37: #	out( N424 ) <- in( B36 B43 )  Freq: 0.33333
2a2     movl    RSI, #-28	# int
2a7     movq    [rsp + #8], R8	# spill
2ac     movq    [rsp + #24], R12	# spill
2b1     movq    [rsp + #40], RCX	# spill
2b6     movl    [rsp + #36], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
2bb     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:36 (line 16) L[0]=rsp + #8 L[1]=rsp + #40 L[2]=rsp + #24 L[3]=_ L[4]=_ L[5]=RBP L[6]=_ L[7]=rsp + #36 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #40 STK[3]=rsp + #36
        # OopMap {[8]=Oop [24]=Oop [40]=Oop off=704/0x2c0}
2c0     stop	# ShouldNotReachHere

2d4     B38: #	out( B39 ) <- in( B32 )  Freq: 0.333328
2d4     movsd   [rsp + #0], XMM0	# spill
2d9     movdq   RBP, XMM1	# spill

2de     B39: #	out( N424 ) <- in( B38 B44 )  Freq: 0.33333
2de     movl    RSI, #-28	# int
2e3     movq    [rsp + #8], R8	# spill
2e8     movq    [rsp + #16], RCX	# spill
2ed     movq    [rsp + #40], R12	# spill
2f2     movl    [rsp + #36], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
2f7     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:44 (line 17) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #40 L[3]=RBP L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #36 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #40 STK[3]=rsp + #36
        # OopMap {[8]=Oop [16]=Oop [40]=Oop off=764/0x2fc}
2fc     stop	# ShouldNotReachHere

310     B40: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
310     xorl    R8, R8	# ptr
313     jmp     B4

318     B41: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
318     xorl    RCX, RCX	# ptr
31a     jmp     B7

31f     B42: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
31f     xorl    R12, R12	# ptr
322     jmp     B10

327     B43: #	out( B37 ) <- in( B14 )  Freq: 2.02654e-06
327     movq    [rsp + #0], R14	# spill
32b     movq    RBP, [rsp + #24]	# spill
330     jmp     B37

335     B44: #	out( B39 ) <- in( B15 )  Freq: 2.02654e-06
335     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #0]
33e     movdq   RBP, XMM1	# spill
343     jmp,s   B39

345     B45: #	out( N424 ) <- in( B19 )  Freq: 1.01327e-06
345     stop	# ShouldNotReachHere

359     B46: #	out( N424 ) <- in( B20 )  Freq: 1.01327e-06
359     stop	# ShouldNotReachHere

36d     B47: #	out( N424 ) <- in( B21 )  Freq: 1.01327e-06
36d     stop	# ShouldNotReachHere

381     B48: #	out( N424 ) <- in( B22 )  Freq: 1.01327e-06
381     stop	# ShouldNotReachHere

395     B49: #	out( N424 ) <- in( B23 )  Freq: 1.01326e-06
395     stop	# ShouldNotReachHere

3a9     B50: #	out( N424 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
3a9     movl    RSI, #-115	# int
3ae     movq    [rsp + #0], R12	# spill
3b2     movq    [rsp + #8], R14	# spill
3b7     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
3c1     movl    [rsp + #24], RBX	# spill
3c5     movq    [rsp + #32], R13	# spill
        nop 	# 1 bytes pad for loops and calls
3cb     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:25 (line 15) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #16 L[6]=_ L[7]=rsp + #24 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=976/0x3d0}
3d0     stop	# ShouldNotReachHere

3e4     B51: #	out( B35 ) <- in( B12 )  Freq: 4.76835e-07
3e4     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #0]
3ed     movq    RBP, R14	# spill
3f0     jmp     B35

3f5     B52: #	out( N424 ) <- in( B11 B10 )  Freq: 2.02655e-06
3f5     movl    RSI, #-138	# int
3fa     movq    RBP, R8	# spill
3fd     movq    [rsp + #0], RCX	# spill
401     movq    [rsp + #8], R12	# spill
406     movq    [rsp + #16], R14	# spill
40b     movl    [rsp + #32], RBX	# spill
40f     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:25 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1044/0x414}
414     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2648  956 %     4       org.jml.regression.linear.DoubleLinearRegression::fit @ 25 (155 bytes)
 total in heap  [0x000000011f38b390,0x000000011f38bd98] = 2568
 relocation     [0x000000011f38b508,0x000000011f38b5a0] = 152
 main code      [0x000000011f38b5a0,0x000000011f38b9e0] = 1088
 stub code      [0x000000011f38b9e0,0x000000011f38b9f8] = 24
 oops           [0x000000011f38b9f8,0x000000011f38ba00] = 8
 metadata       [0x000000011f38ba00,0x000000011f38ba18] = 24
 scopes data    [0x000000011f38ba18,0x000000011f38bb68] = 336
 scopes pcs     [0x000000011f38bb68,0x000000011f38bd78] = 528
 dependencies   [0x000000011f38bd78,0x000000011f38bd80] = 8
 nul chk table  [0x000000011f38bd80,0x000000011f38bd98] = 24

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
 ;; N424: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f38b5a0: ;   {runtime_call os::breakpoint()}
  0x000000011f38b5a0: e8fb 09dc | ee90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B40 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f38b5b0: 8984 2400 | a0fe ff55 | 4883 ec40 | 4c8b 6e78 | 488b 6e70 | 8b5e 404c | 8b66 68c5 | fb10 4658 
  0x000000011f38b5d0: c4c1 f97e | c6c5 fb10 | 4648 c5fb | 1144 2418 | 488b fe49 | baa0 5025 | 0e01 0000 | 0041 ffd2 
  0x000000011f38b5f0: 4d85 ed0f | 84b7 0200 | 0045 8b5d | 0890 9090 

  0x000000011f38b600: ;   {metadata('org/jml/regression/linear/DoubleLinearRegression')}
  0x000000011f38b600: 4181 fb20 | 1d12 460f | 853c 0300 | 004d 8bc5 
 ;; B4: #	out( B41 B5 ) <- in( B3 B40 )  Freq: 0.999999
  0x000000011f38b610: 4885 ed0f | 849f 0200 | 0044 8b55 | 0890 9090 

  0x000000011f38b620: ;   {metadata({type array double})}
  0x000000011f38b620: 4181 fac3 | 8010 460f | 851c 0300 | 0048 8bcd 
 ;; B7: #	out( B42 B8 ) <- in( B6 B41 )  Freq: 0.999998
  0x000000011f38b630: 4d85 e40f | 8486 0200 | 0045 8b5c | 2408 9090 

  0x000000011f38b640: ;   {metadata({type array double})}
  0x000000011f38b640: 4181 fbc3 | 8010 460f | 85fc 0200 

  0x000000011f38b64c: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f38b64c: 0044 8b51 

  0x000000011f38b650: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
  0x000000011f38b650: 0c41 8b74 

  0x000000011f38b654: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f38b654: 240c 413b | da0f 8d25 

  0x000000011f38b65c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f38b65c: 0300 0044 | 8bdb 41ff | c333 ff44 | 3bdf 440f | 4cdf 453b | da45 0f4f 

  0x000000011f38b674: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f38b674: da41 3bda | 0f83 4902 | 0000 c4c1 | f96e c6c5 | fb58 4cd9 

  0x000000011f38b688: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f38b688: 103b de0f | 8344 0200 | 00c5 fb10 | 4424 18c4 | c17b 5844 

  0x000000011f38b69c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f38b69c: dc10 ffc3 | 413b db7d 

  0x000000011f38b6a4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f38b6a4: 0dc4 c1f9 | 7ece c5fb | 1144 2418 | ebc3 443b | d641 8bd2 | 0f4f d644 | 8bda 4183 | c3f9 b800 
  0x000000011f38b6c4: 0000 8041 | 3bd3 440f | 4cd8 413b | db0f 8df2 | 0000 0041 | 3bda 9090 | 9090 9090 | 0f83 ff01 
  0x000000011f38b6e4: 0000 3bde | 0f83 0b02 | 0000 448b | cb41 83c1 | 0744 3bce | 0f83 0f02 | 0000 9090 | 453b ca0f 
  0x000000011f38b704: 8318 0200 | 0041 3bda | 0f83 2302 | 0000 41b9 

  0x000000011f38b714: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x000000011f38b714: 401f 0000 | eb13 498b | af30 0100 

  0x000000011f38b720: ; ImmutableOopMap {r8=Oop r12=Oop rcx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x000000011f38b720: 0085 4500 | 413b db0f | 8d9c 0000 | 0041 8bd3 | 2bd3 443b | db0f 4cd7 | 81fa 401f | 0000 410f 
  0x000000011f38b740: 47d1 03d3 | 9090 9090 | 9090 9090 

  0x000000011f38b74c: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f38b74c: 9090 9090 
 ;; B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N171 strip mined) Freq: 9.99984e+11
  0x000000011f38b750: c4c1 7b58 | 44dc 10c5 | f358 4cd9 | 1048 63c3 | c5f3 584c | c118 c4c1 | 7b58 44c4 | 18c5 f358 
  0x000000011f38b770: 4cc1 20c4 | c17b 5844 | c420 c5f3 | 584c c128 | c4c1 7b58 | 44c4 28c5 | f358 4cc1 | 30c4 c17b 
  0x000000011f38b790: 5844 c430 | c5f3 584c | c138 c4c1 | 7b58 44c4 | 38c5 f358 | 4cc1 40c4 | c17b 5844 | c440 c5f3 
  0x000000011f38b7b0: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f38b7b0: 584c c148 | c4c1 7b58 

  0x000000011f38b7b8: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f38b7b8: 44c4 4883 

  0x000000011f38b7bc: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f38b7bc: c308 9090 

  0x000000011f38b7c0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f38b7c0: 3bda 7c8c 
 ;; B28: #	out( B25 ) <- in( B27 )  Freq: 476830
  0x000000011f38b7c4: e951 ffff | ff41 3bda 

  0x000000011f38b7cc: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f38b7cc: 7d28 9090 
 ;; B31: #	out( B36 B32 ) <- in( B30 B33 ) Loop( B31-B33 inner post of N377) Freq: 328960
  0x000000011f38b7d0: 413b da0f | 835f 0000 | 00c5 f358 

  0x000000011f38b7dc: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f38b7dc: 4cd9 1090 | 3bde 0f83 | 8c00 0000 
 ;; B33: #	out( B31 B34 ) <- in( B32 )  Freq: 328960
  0x000000011f38b7e8: c4c1 7b58 

  0x000000011f38b7ec: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f38b7ec: 44dc 10ff 

  0x000000011f38b7f0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f38b7f0: c341 3bda | 7cda c5fb | 1104 24c4 

  0x000000011f38b7fc: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f38b7fc: e1f9 7ecd 
 ;; B35: #	out( N424 ) <- in( B51 B34 )  Freq: 0.333329
  0x000000011f38b800: be45 ffff | ff4c 8944 | 2408 4889 | 4c24 104c | 8964 2418 | 895c 2424 | 4489 5424 

  0x000000011f38b81c: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38b81c: 2890 90e8 

  0x000000011f38b820: ; ImmutableOopMap {[8]=Oop [16]=Oop [24]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f38b820: 1cad 58f8 

  0x000000011f38b824: ;   {external_word}
  0x000000011f38b824: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38b830: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b830: e4f0 e819 

  0x000000011f38b834: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f38b834: 97c2 eef4 
 ;; B36: #	out( B37 ) <- in( B31 )  Freq: 0.333328
  0x000000011f38b838: c5fb 110c | 24c4 e1f9 | 7ec5 bee4 | ffff ff4c | 8944 2408 | 4c89 6424 | 1848 894c | 2428 895c 
  0x000000011f38b858: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38b858: 2424 90e8 

  0x000000011f38b85c: ; ImmutableOopMap {[8]=Oop [24]=Oop [40]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x000000011f38b85c: e0ac 58f8 

  0x000000011f38b860: ;   {external_word}
  0x000000011f38b860: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38b86c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b86c: e4f0 e8dd 

  0x000000011f38b870: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x000000011f38b870: 96c2 eef4 
 ;; B38: #	out( B39 ) <- in( B32 )  Freq: 0.333328
  0x000000011f38b874: c5fb 1104 | 24c4 e1f9 | 7ecd bee4 | ffff ff4c | 8944 2408 | 4889 4c24 | 104c 8964 | 2428 895c 
  0x000000011f38b894: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38b894: 2424 90e8 

  0x000000011f38b898: ; ImmutableOopMap {[8]=Oop [16]=Oop [40]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f38b898: a4ac 58f8 

  0x000000011f38b89c: ;   {external_word}
  0x000000011f38b89c: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38b8a8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b8a8: e4f0 e8a1 

  0x000000011f38b8ac: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f38b8ac: 96c2 eef4 
 ;; B40: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x000000011f38b8b0: 4533 c0e9 | 58fd ffff 
 ;; B41: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x000000011f38b8b8: 33c9 e971 | fdff ff45 | 33e4 e986 | fdff ff4c | 8934 2448 | 8b6c 2418 | e96d ffff | ff48 ff74 
  0x000000011f38b8d8: 2418 488f | 0424 c4e1 | f97e cdeb 

  0x000000011f38b8e4: ;   {external_word}
  0x000000011f38b8e4: 9948 bfa6 | 6d6f 0e01 | 0000 0048 

  0x000000011f38b8f0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b8f0: 83e4 f0e8 | 5896 c2ee 

  0x000000011f38b8f8: ;   {external_word}
  0x000000011f38b8f8: f448 bfa6 | 6d6f 0e01 | 0000 0048 

  0x000000011f38b904: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b904: 83e4 f0e8 | 4496 c2ee 

  0x000000011f38b90c: ;   {external_word}
  0x000000011f38b90c: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f38b918: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b918: 83e4 f0e8 | 3096 c2ee 

  0x000000011f38b920: ;   {external_word}
  0x000000011f38b920: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f38b92c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b92c: 83e4 f0e8 | 1c96 c2ee 

  0x000000011f38b934: ;   {external_word}
  0x000000011f38b934: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f38b940: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b940: 83e4 f0e8 | 0896 c2ee | f4be 8dff | ffff 4c89 | 2424 4c89 | 7424 0848 | ff74 2418 | 488f 4424 
  0x000000011f38b960: 1089 5c24 | 184c 896c 

  0x000000011f38b968: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38b968: 2420 90e8 

  0x000000011f38b96c: ; ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f38b96c: d0ab 58f8 

  0x000000011f38b970: ;   {external_word}
  0x000000011f38b970: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38b97c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b97c: e4f0 e8cd | 95c2 eef4 
 ;; B51: #	out( B35 ) <- in( B12 )  Freq: 4.76835e-07
  0x000000011f38b984: 48ff 7424 | 1848 8f04 | 2449 8bee | e96b feff | ffbe 76ff | ffff 498b | e848 890c | 244c 8964 
  0x000000011f38b9a4: 2408 4c89 | 7424 1089 

  0x000000011f38b9ac: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38b9ac: 5c24 20e8 

  0x000000011f38b9b0: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f38b9b0: 8cab 58f8 

  0x000000011f38b9b4: ;   {external_word}
  0x000000011f38b9b4: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38b9c0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38b9c0: e4f0 e889 

  0x000000011f38b9c4: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f38b9c4: 95c2 eef4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011f38b9e0: ;   {no_reloc}
  0x000000011f38b9e0: e93b 574d | f8e8 0000 | 0000 4883 

  0x000000011f38b9ec: ;   {runtime_call DeoptimizationBlob}
  0x000000011f38b9ec: 2c24 05e9 | 6cae 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011f38b9f8:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011f38ba00:   0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
  0x000000011f38ba08:   0x0000000230840618 {type array double}
  0x000000011f38ba10:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011f38b59f offset=ffffffff bits=0):
PcDesc(pc=0x000000011f38b64d offset=ad bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
PcDesc(pc=0x000000011f38b651 offset=b1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
PcDesc(pc=0x000000011f38b656 offset=b6 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f38b65f offset=bf bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f38b675 offset=d5 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f38b689 offset=e9 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f38b69e offset=fe bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f38b6a0 offset=100 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f38b6a5 offset=105 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f38b718 offset=178 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f38b721 offset=181 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg r8 [16],oop
    - l1: reg rcx [2],oop
    - l2: reg r12 [24],oop
    - l3: 0
    - l4: reg xmm1 [64],double
    - l5: 0
    - l6: reg xmm0 [48],double
    - l7: reg rbx [6],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f38b724 offset=184 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f38b750 offset=1b0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f38b7b4 offset=214 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f38b7bb offset=21b bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f38b7be offset=21e bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f38b7c4 offset=224 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f38b7d0 offset=230 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f38b7df offset=23f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f38b7ef offset=24f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f38b7f1 offset=251 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f38b800 offset=260 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f38b824 offset=284 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[24],oop
    - l3: 0
    - l4: reg rbp [10],double
    - l5: 0
    - l6: stack[0],double
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: stack[36]
    - @1: stack[40]
PcDesc(pc=0x000000011f38b838 offset=298 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f38b860 offset=2c0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
   Locals
    - l0: stack[8],oop
    - l1: stack[40],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],double
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
PcDesc(pc=0x000000011f38b874 offset=2d4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
PcDesc(pc=0x000000011f38b89c offset=2fc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[40],oop
    - l3: 0
    - l4: reg rbp [10],double
    - l5: empty
    - l6: empty
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
PcDesc(pc=0x000000011f38b8b0 offset=310 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f38b970 offset=3d0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: 0
    - l4: stack[8],double
    - l5: 0
    - l6: stack[16],double
    - l7: stack[24]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f38b9b4 offset=414 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: stack[16],double
    - l5: 0
    - l6: stack[24],double
    - l7: stack[32]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f38b9c8 offset=428 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
PcDesc(pc=0x000000011f38b9f9 offset=459 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 6 OopMaps

ImmutableOopMap {r8=Oop r12=Oop rcx=Oop } pc offsets: 385 
ImmutableOopMap {[8]=Oop [16]=Oop [24]=Oop } pc offsets: 644 
ImmutableOopMap {[8]=Oop [24]=Oop [40]=Oop } pc offsets: 704 
ImmutableOopMap {[8]=Oop [16]=Oop [40]=Oop } pc offsets: 764 
ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop } pc offsets: 976 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1044 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011f38b64d offset=ad):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x000000011f38b651 offset=b1):
   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x000000011f38b656 offset=b6):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f38b65f offset=bf):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f38b675 offset=d5):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f38b689 offset=e9):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f38b69e offset=fe):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f38b6a0 offset=100):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f38b6a5 offset=105):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f38b718 offset=178):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f38b721 offset=181):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg r8 [16],oop
    - l1: reg rcx [2],oop
    - l2: reg r12 [24],oop
    - l3: 0
    - l4: reg xmm1 [64],double
    - l5: 0
    - l6: reg xmm0 [48],double
    - l7: reg rbx [6],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f38b724 offset=184):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f38b750 offset=1b0):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f38b7b4 offset=214):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f38b7bb offset=21b):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f38b7be offset=21e):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f38b7c4 offset=224):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f38b7d0 offset=230):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f38b7df offset=23f):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f38b7ef offset=24f):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f38b7f1 offset=251):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f38b800 offset=260):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f38b824 offset=284):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[24],oop
    - l3: 0
    - l4: reg rbp [10],double
    - l5: 0
    - l6: stack[0],double
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: stack[36]
    - @1: stack[40]
ScopeDesc(pc=0x000000011f38b838 offset=298):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f38b860 offset=2c0):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
   Locals
    - l0: stack[8],oop
    - l1: stack[40],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],double
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
ScopeDesc(pc=0x000000011f38b874 offset=2d4):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x000000011f38b89c offset=2fc):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[40],oop
    - l3: 0
    - l4: reg rbp [10],double
    - l5: empty
    - l6: empty
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
ScopeDesc(pc=0x000000011f38b8b0 offset=310):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f38b970 offset=3d0):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: 0
    - l4: stack[8],double
    - l5: 0
    - l6: stack[16],double
    - l7: stack[24]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f38b9b4 offset=414):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: stack[16],double
    - l5: 0
    - l6: stack[24],double
    - l7: stack[32]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f38b9c8 offset=428):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011f38b508: 6400
relocInfo@0x000000011f38b508 [type=6(runtime_call) addr=0x000000011f38b5a0 offset=0 format=1] | [destination=0x000000010e14bfa0]
         @0x000000011f38b50a: f001cc60
relocInfo@0x000000011f38b50c [type=12(metadata) addr=0x000000011f38b600 offset=96 format=3 data=1] | [metadata_addr=0x000000011f38ba00 *=0x000000023090e900 offset=0]metadata_value=0x000000023090e900: 'org/jml/regression/linear/DoubleLinearRegression'
         @0x000000011f38b50e: f002cc20
relocInfo@0x000000011f38b510 [type=12(metadata) addr=0x000000011f38b620 offset=32 format=3 data=2] | [metadata_addr=0x000000011f38ba08 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f38b512: f002cc20
relocInfo@0x000000011f38b514 [type=12(metadata) addr=0x000000011f38b640 offset=32 format=3 data=2] | [metadata_addr=0x000000011f38ba08 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f38b516: a0e1
relocInfo@0x000000011f38b516 [type=10(poll) addr=0x000000011f38b721 offset=225]
         @0x000000011f38b518: 64fe
relocInfo@0x000000011f38b518 [type=6(runtime_call) addr=0x000000011f38b81f offset=254 format=1] | [destination=0x0000000117916540]
         @0x000000011f38b51a: f8030e67b77700017005
relocInfo@0x000000011f38b522 [type=7(external_word) addr=0x000000011f38b824 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38b524: 640e
relocInfo@0x000000011f38b524 [type=6(runtime_call) addr=0x000000011f38b832 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b526: 6429
relocInfo@0x000000011f38b526 [type=6(runtime_call) addr=0x000000011f38b85b offset=41 format=1] | [destination=0x0000000117916540]
         @0x000000011f38b528: f8030e67b77700017005
relocInfo@0x000000011f38b530 [type=7(external_word) addr=0x000000011f38b860 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38b532: 640e
relocInfo@0x000000011f38b532 [type=6(runtime_call) addr=0x000000011f38b86e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b534: 6429
relocInfo@0x000000011f38b534 [type=6(runtime_call) addr=0x000000011f38b897 offset=41 format=1] | [destination=0x0000000117916540]
         @0x000000011f38b536: f8030e67b77700017005
relocInfo@0x000000011f38b53e [type=7(external_word) addr=0x000000011f38b89c offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38b540: 640e
relocInfo@0x000000011f38b540 [type=6(runtime_call) addr=0x000000011f38b8aa offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b542: f8030e6f6da60001703b
relocInfo@0x000000011f38b54a [type=7(external_word) addr=0x000000011f38b8e5 offset=59 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f38b54c: 640e
relocInfo@0x000000011f38b54c [type=6(runtime_call) addr=0x000000011f38b8f3 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b54e: f8030e6f6da600017006
relocInfo@0x000000011f38b556 [type=7(external_word) addr=0x000000011f38b8f9 offset=6 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f38b558: 640e
relocInfo@0x000000011f38b558 [type=6(runtime_call) addr=0x000000011f38b907 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b55a: f8030e6f653100017006
relocInfo@0x000000011f38b562 [type=7(external_word) addr=0x000000011f38b90d offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38b564: 640e
relocInfo@0x000000011f38b564 [type=6(runtime_call) addr=0x000000011f38b91b offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b566: f8030e6f653100017006
relocInfo@0x000000011f38b56e [type=7(external_word) addr=0x000000011f38b921 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38b570: 640e
relocInfo@0x000000011f38b570 [type=6(runtime_call) addr=0x000000011f38b92f offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b572: f8030e6f653100017006
relocInfo@0x000000011f38b57a [type=7(external_word) addr=0x000000011f38b935 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38b57c: 640e
relocInfo@0x000000011f38b57c [type=6(runtime_call) addr=0x000000011f38b943 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b57e: 6428
relocInfo@0x000000011f38b57e [type=6(runtime_call) addr=0x000000011f38b96b offset=40 format=1] | [destination=0x0000000117916540]
         @0x000000011f38b580: f8030e67b77700017005
relocInfo@0x000000011f38b588 [type=7(external_word) addr=0x000000011f38b970 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38b58a: 640e
relocInfo@0x000000011f38b58a [type=6(runtime_call) addr=0x000000011f38b97e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b58c: 6431
relocInfo@0x000000011f38b58c [type=6(runtime_call) addr=0x000000011f38b9af offset=49 format=1] | [destination=0x0000000117916540]
         @0x000000011f38b58e: f8030e67b77700017005
relocInfo@0x000000011f38b596 [type=7(external_word) addr=0x000000011f38b9b4 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38b598: 640e
relocInfo@0x000000011f38b598 [type=6(runtime_call) addr=0x000000011f38b9c2 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38b59a: 001e
relocInfo@0x000000011f38b59a [type=0(none) addr=0x000000011f38b9e0 offset=30]
         @0x000000011f38b59c: 6400
relocInfo@0x000000011f38b59c [type=6(runtime_call) addr=0x000000011f38b9e0 offset=0 format=1] | [destination=0x0000000117861120]
         @0x000000011f38b59e: 640f
relocInfo@0x000000011f38b59e [type=6(runtime_call) addr=0x000000011f38b9ef offset=15 format=1] | [destination=0x0000000117916860]
         @0x000000011f38b5a0: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.DoubleLinearRegression
   [nmethod<=klass]org.jml.regression.linear.DoubleLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x000000011f38b64d, 0x000000011f38b995 > < 0x000000011f38b651, 0x000000011f38b995 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
#2: 0x0000000230840618 {type array double}
#3: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 957 ------------------------
{method}
 - this oop:          0x0000000272c8fa60
 - method holder:     'org/jml/regression/linear/DoubleLinearRegression'
 - constants:         0x0000000272c8f518 constant pool [71]/operands[5] {0x0000000272c8f518} for 'org/jml/regression/linear/DoubleLinearRegression' cache=0x0000000272c8fe20
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([D[D)V'
 - max stack:         9
 - max locals:        16
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000011780de20
 - adapters:          AHE@0x00007fa51303fe70: 0xbbb00000 i2c: 0x0000000117885ee0 c2i: 0x0000000117885fbf c2iUV: 0x0000000117885f92 c2iNCI: 0x0000000117885ffc
 - compiled entry     0x0000000117885fbf
 - code size:         155
 - code start:        0x0000000272c8f928
 - code end (excl):   0x0000000272c8f9c3
 - method data:       0x0000000272f04000
 - checked ex length: 0
 - linenumber start:  0x0000000272c8f9c3
 - localvar length:   11
 - localvar start:    0x0000000272c8f9da

------------------------ OptoAssembly for Compile_id = 957 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r583 rsp+108: in_preserve
#r582 rsp+104: return address
#r581 rsp+100: in_preserve
#r580 rsp+96: saved fp register
#r579 rsp+92: pad2, stack alignment
#r578 rsp+88: pad2, stack alignment
#r577 rsp+84: Fixed slot 1
#r576 rsp+80: Fixed slot 0
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N617: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B47 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

01c     movq    R13, [RSI + #120 (8-bit)]	# ptr
020     movq    RBP, [RSI + #112 (8-bit)]	# ptr
024     movl    R12, [RSI]	# int
027     movq    RBX, [RSI + #104 (8-bit)]	# ptr
02b     movsd   XMM0, [RSI + #56 (8-bit)]	# double
030     movsd   [rsp + #40], XMM0	# spill
036     movsd   XMM0, [RSI + #40 (8-bit)]	# double
03b     movsd   [rsp + #48], XMM0	# spill
041     movsd   XMM0, [RSI + #24 (8-bit)]	# double
046     movsd   [rsp + #32], XMM0	# spill
04c     movsd   XMM0, [RSI + #8 (8-bit)]	# double
051     movsd   [rsp + #56], XMM0	# spill
057     movq    RDI, RSI	# spill
        nop 	# 6 bytes pad for loops and calls
060     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
070     testq   R13, R13	# ptr
073     je     B47  P=0.001000 C=-1.000000

079     B2: #	out( B58 B3 ) <- in( B1 )  Freq: 0.999
079     movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass org/jml/regression/linear/DoubleLinearRegression: 0x00007fa516f8ca20:Constant:exact *	# compressed klass ptr
087     jne,u   B58  P=0.000001 C=-1.000000

08d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
08d     movq    R14, R13	# spill
090     # checkcastPP of R14

090     B4: #	out( B48 B5 ) <- in( B3 B47 )  Freq: 0.999999
090     testq   RBP, RBP	# ptr
093     je     B48  P=0.001000 C=-1.000000

099     B5: #	out( B58 B6 ) <- in( B4 )  Freq: 0.998999
099     movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R11, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
0a7     jne,u   B58  P=0.000001 C=-1.000000

0ad     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
0ad     movq    RDX, RBP	# spill
0b0     # checkcastPP of RDX

0b0     B7: #	out( B49 B8 ) <- in( B6 B48 )  Freq: 0.999998
0b0     testq   RBX, RBX	# ptr
0b3     je     B49  P=0.001000 C=-1.000000

0b9     B8: #	out( B58 B9 ) <- in( B7 )  Freq: 0.998998
0b9     movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0c0     cmpl    R11, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
0c7     jne,u   B58  P=0.000001 C=-1.000000

0cd     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0cd     # checkcastPP of RBX

0cd     B10: #	out( B60 B11 ) <- in( B9 B49 )  Freq: 0.999997
0cd     movl    RAX, [RDX + #12 (8-bit)]	# range
0d0     NullCheck RDX

0d0     B11: #	out( B60 B12 ) <- in( B10 )  Freq: 0.999996
0d0     movl    R10, [RBX + #12 (8-bit)]	# range
0d4     NullCheck RBX

0d4     B12: #	out( B59 B13 ) <- in( B11 )  Freq: 0.999995
0d4     cmpl    R12, RAX
0d7     jge     B59  P=0.000000 C=5804996.000000

0dd     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0dd     movl    R9, RBX	# ptr -> int
0e0     movl    R11, R12	# spill
0e3     incl    R11	# int
0e6     shrl    R9, #3
0ea     andl    R9, #3	# int
0ee     xorl    R8, R8	# int
0f1     cmpl    R11, R8
0f4     cmovllt R11, R8	# max
0f8     cmpl    R11, RAX
0fb     cmovlgt R11, RAX	# min
0ff     addl    R9, R11	# int
102     movl    RDI, #2	# int
107     subl    RDI, R9	# int
10a     andl    RDI, #3	# int
10d     addl    RDI, R11	# int
110     cmpl    RDI, RAX
112     cmovlgt RDI, RAX	# min

115     B14: #	out( B50 B15 ) <- in( B13 B17 ) Loop( B14-B17 inner pre of N443) Freq: 1.99998
115     cmpl    R12, RAX	# unsigned
118     jnb,u   B50  P=0.000001 C=-1.000000

11e     B15: #	out( B51 B16 ) <- in( B14 )  Freq: 1.99998
11e     movsd   XMM0, [RDX + #16 + R12 << #3]	# double
125     vsubsd  XMM0, XMM0, [RSP + #40 (32-bit)]
12b     vmulsd  XMM1, XMM0, XMM0
12f     movsd   XMM2, [rsp + #32]	# spill
135     vaddsd  XMM1, XMM2, XMM1
139     cmpl    R12, R10	# unsigned
        nop 	# 4 bytes pad for loops and calls
140     jnb,u   B51  P=0.000001 C=-1.000000

146     B16: #	out( B18 B17 ) <- in( B15 )  Freq: 1.99998
146     movsd   XMM2, [RBX + #16 + R12 << #3]	# double
14d     vsubsd  XMM2, XMM2, [RSP + #48 (32-bit)]
153     vmulsd  XMM0, XMM2, XMM0
157     movsd   XMM2, [rsp + #56]	# spill
15d     vaddsd  XMM0, XMM2, XMM0
161     incl    R12	# int
164     cmpl    R12, RDI
167     jge,s   B18	# loop end  P=0.500000 C=5804996.000000

169     B17: #	out( B14 ) <- in( B16 )  Freq: 0.99999
169     movsd   [rsp + #32], XMM1	# spill
16f     movsd   [rsp + #56], XMM0	# spill
175     jmp,s   B14

177     B18: #	out( B36 B19 ) <- in( B16 )  Freq: 0.99999
177     cmpl    RAX, R10
17a     movl    R9, RAX	# spill
17d     cmovlgt R9, R10	# min
181     movl    R11, R9	# spill
184     addl    R11, #-15	# int
188     movl    RDI, #-2147483648	# int
18d     cmpl    R9, R11
190     cmovll R11, RDI	# signed, int
194     cmpl    R12, R11
197     jge     B36  P=0.000001 C=-1.000000

19d     B19: #	out( B52 B20 ) <- in( B18 )  Freq: 0.999989
19d     # castII of R12
        nop 	# 3 bytes pad for loops and calls
1a0     cmpl    R12, RAX	# unsigned
1a3     jnb,u   B52  P=0.000001 C=-1.000000

1a9     B20: #	out( B53 B21 ) <- in( B19 )  Freq: 0.999988
1a9     cmpl    R12, R10	# unsigned
1ac     jnb,u   B53  P=0.000001 C=-1.000000

1b2     B21: #	out( B54 B22 ) <- in( B20 )  Freq: 0.999987
1b2     movl    RCX, R12	# spill
1b5     addl    RCX, #15	# int
1b8     cmpl    RCX, R10	# unsigned
        nop 	# 5 bytes pad for loops and calls
1c0     jnb,u   B54  P=0.000001 C=-1.000000

1c6     B22: #	out( B55 B23 ) <- in( B21 )  Freq: 0.999986
1c6     cmpl    R12, R10	# unsigned
1c9     jnb,u   B55  P=0.000001 C=-1.000000

1cf     B23: #	out( B56 B24 ) <- in( B22 )  Freq: 0.999985
1cf     cmpl    RCX, RAX	# unsigned
1d1     jnb,u   B56  P=0.000001 C=-1.000000

1d7     B24: #	out( B57 B25 ) <- in( B23 )  Freq: 0.999984
1d7     cmpl    R12, RAX	# unsigned
        nop 	# 6 bytes pad for loops and calls
1e0     jnb,u   B57  P=0.000001 C=-1.000000

1e6     B25: #	out( B28 ) <- in( B24 )  Freq: 0.999983
1e6     replicateD XMM2,[RSP + #40 (32-bit)]
1ed     replicateD XMM3,[RSP + #48 (32-bit)]
1f4     movl    RCX, #16000	# int
1f9     # TLS is in R15
1f9     jmp,s   B28

1fb     B26: #	out( B34 B27 ) <- in( B30 ) top-of-loop Freq: 999983
1fb     movq    RSI, [R15 + #304 (32-bit)]	# ptr
202     testl   rax, [RSI]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:128 (line 25) L[0]=R14 L[1]=RDX L[2]=RBX L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #40 L[8]=_ L[9]=rsp + #48 L[10]=_ L[11]=RBP L[12]=_ L[13]=XMM0 L[14]=_ L[15]=R12
        # OopMap {rbx=Oop rdx=Oop r14=Oop off=514/0x202}
204     cmpl    R12, R11
207     jge     B34  P=0.000000 C=5804996.000000

20d     B27: #	out( B28 ) <- in( B26 )  Freq: 999983
20d     movdq   XMM1, RBP	# spill

212     B28: #	out( B29 ) <- in( B25 B27 ) Loop( B28-B27 ) Freq: 999983
212     movl    RSI, R11	# spill
215     subl    RSI, R12	# int
218     cmpl    R11, R12
21b     cmovll RSI, R8	# signed, int
21f     cmpl    RSI, #16000	# unsigned
225     cmovlnbe RSI, RCX	# unsigned, int
228     addl    RSI, R12	# int
22b     movdq   RBP, XMM1	# spill
230     movapd  XMM15, XMM0	# spill
        nop 	# 12 bytes pad for loops and calls

240     B29: #	out( B29 B30 ) <- in( B28 B29 ) Loop( B29-B29 inner main of N201 strip mined) Freq: 9.99983e+11
240     load_vector XMM0,[RBX + #16 + R12 << #3]
247     load_vector XMM1,[RDX + #16 + R12 << #3]
24e     vsubpd  XMM0,XMM0,XMM3	! sub packedD
252     vsubpd  XMM1,XMM1,XMM2	! sub packedD
256     vmulpd  XMM11,XMM1,XMM1	! mul packedD
25a     vmulpd  XMM8,XMM0,XMM1	! mul packedD
25e     movslq  R13, R12	# i2l
261     load_vector XMM0,[RDX + #48 + R13 << #3]
268     load_vector XMM6,[RBX + #112 + R13 << #3]
26f     load_vector XMM10,[RDX + #80 + R13 << #3]
276     load_vector XMM1,[RDX + #112 + R13 << #3]
27d     load_vector XMM4,[RBX + #48 + R13 << #3]
284     load_vector XMM5,[RBX + #80 + R13 << #3]
28b     vsubpd  XMM0,XMM0,XMM2	! sub packedD
28f     vsubpd  XMM5,XMM5,XMM3	! sub packedD
293     vmulpd  XMM12,XMM0,XMM0	! mul packedD
297     vsubpd  XMM4,XMM4,XMM3	! sub packedD
29b     vsubpd  XMM1,XMM1,XMM2	! sub packedD
29f     vmulpd  XMM7,XMM4,XMM0	! mul packedD
2a3     vmulpd  XMM9,XMM1,XMM1	! mul packedD
2a7     vsubpd  XMM0,XMM10,XMM2	! sub packedD
2ab     vsubpd  XMM4,XMM6,XMM3	! sub packedD
2af     vmulpd  XMM6,XMM5,XMM0	! mul packedD
2b3     vmulpd  XMM1,XMM4,XMM1	! mul packedD
2b7     vmulpd  XMM10,XMM0,XMM0	! mul packedD
2bb     movdq   XMM0, RBP	# spill
2c0     vector_reduction_double XMM0,XMM11 ; using XMM13, XMM14 as TEMP
2e6     vector_reduction_double XMM0,XMM12 ; using XMM11, XMM13 as TEMP
30c     vector_reduction_double XMM0,XMM10 ; using XMM11, XMM12 as TEMP
332     vector_reduction_double XMM0,XMM9 ; using XMM10, XMM11 as TEMP
358     movdq   RBP, XMM0	# spill
35d     movapd  XMM0, XMM15	# spill
362     vector_reduction_double XMM0,XMM8 ; using XMM9, XMM10 as TEMP
388     vector_reduction_double XMM0,XMM7 ; using XMM8, XMM9 as TEMP
3ac     vector_reduction_double XMM0,XMM6 ; using XMM7, XMM8 as TEMP
3cf     vector_reduction_double XMM0,XMM1 ; using XMM5, XMM4 as TEMP
3ef     movapd  XMM15, XMM0	# spill
3f3     addl    R12, #16	# int
3f7     cmpl    R12, RSI
        nop 	# 6 bytes pad for loops and calls
400     jl     B29	# loop end  P=1.000000 C=5804996.000000

406     B30: #	out( B26 ) <- in( B29 )  Freq: 476829
406     jmp     B26

40b     B31: #	out( B32 ) <- in( B34 )  Freq: 0.499992
40b     # castII of R12

40b     B32: #	out( B36 B33 ) <- in( B31 B33 ) Loop( B32-B33 inner post of N857) Freq: 0.999983
40b     load_vector XMM0,[RBX + #16 + R12 << #3]
412     load_vector XMM1,[RDX + #16 + R12 << #3]
419     vsubpd  XMM0,XMM0,XMM3	! sub packedD
41d     vsubpd  XMM1,XMM1,XMM2	! sub packedD
421     vmulpd  XMM4,XMM1,XMM1	! mul packedD
425     vmulpd  XMM1,XMM0,XMM1	! mul packedD
429     movapd  XMM0, XMM15	# spill
42e     vector_reduction_double XMM0,XMM1 ; using XMM6, XMM5 as TEMP
44e     movdq   XMM1, RBP	# spill
453     vector_reduction_double XMM1,XMM4 ; using XMM5, XMM6 as TEMP
473     addl    R12, #4	# int
477     cmpl    R12, R11
47a     jge,s   B36	# loop end  P=0.500000 C=5804996.000000

47c     B33: #	out( B32 ) <- in( B32 )  Freq: 0.499992
47c     movdq   RBP, XMM1	# spill
481     movapd  XMM15, XMM0	# spill
485     jmp,s   B32

487     B34: #	out( B31 B35 ) <- in( B26 )  Freq: 0.999983
487     movl    R11, R9	# spill
48a     addl    R11, #-3	# int
48e     cmpl    R9, R11
491     cmovll R11, RDI	# signed, int
495     cmpl    R12, R11
498     jl     B31  P=0.500000 C=-1.000000

49e     B35: #	out( B36 ) <- in( B34 )  Freq: 0.499992
49e     movdq   XMM1, RBP	# spill

4a3     B36: #	out( B41 B37 ) <- in( B18 B32 B35 )  Freq: 0.999984
4a3     cmpl    R12, RAX
4a6     jge     B41  P=0.000001 C=-1.000000

4ac     B37: #	out( B38 ) <- in( B36 )  Freq: 0.999983
4ac     # castII of R12

4ac     B38: #	out( B43 B39 ) <- in( B37 B40 ) Loop( B38-B40 inner post of N443) Freq: 328960
4ac     cmpl    R12, RAX	# unsigned
4af     jnb,u   B43  P=0.000001 C=-1.000000

4b5     B39: #	out( B45 B40 ) <- in( B38 )  Freq: 328960
4b5     movsd   XMM2, [RDX + #16 + R12 << #3]	# double
4bc     vsubsd  XMM2, XMM2, [RSP + #40 (32-bit)]
4c2     vmulsd  XMM3, XMM2, XMM2
4c6     vaddsd  XMM1, XMM1, XMM3
4ca     cmpl    R12, R10	# unsigned
4cd     jnb,u   B45  P=0.000001 C=-1.000000

4d3     B40: #	out( B38 B41 ) <- in( B39 )  Freq: 328959
4d3     movsd   XMM3, [RBX + #16 + R12 << #3]	# double
4da     vsubsd  XMM3, XMM3, [RSP + #48 (32-bit)]
4e0     vmulsd  XMM2, XMM3, XMM2
4e4     vaddsd  XMM0, XMM0, XMM2
4e8     incl    R12	# int
4eb     cmpl    R12, RAX
4ee     jl,s   B38	# loop end  P=0.999999 C=5804996.000000

4f0     B41: #	out( B42 ) <- in( B40 B36 )  Freq: 0.333328
4f0     movsd   [rsp + #0], XMM0	# spill
4f5     movdq   RBP, XMM1	# spill

4fa     B42: #	out( N617 ) <- in( B59 B41 )  Freq: 0.333329
4fa     movl    RSI, #-187	# int
4ff     movq    [rsp + #8], R14	# spill
504     movq    [rsp + #16], RDX	# spill
509     movq    [rsp + #24], RBX	# spill
50e     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
518     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #40]
522     movl    [rsp + #52], R12	# spill
527     movl    [rsp + #56], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
52c     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:82 (line 25) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #32 L[8]=_ L[9]=rsp + #40 L[10]=_ L[11]=RBP L[12]=_ L[13]=rsp + #0 L[14]=_ L[15]=rsp + #52 STK[0]=rsp + #52 STK[1]=rsp + #56
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=1332/0x534}
534     stop	# ShouldNotReachHere

548     B43: #	out( B44 ) <- in( B38 )  Freq: 0.333328
548     movsd   [rsp + #0], XMM1	# spill
54d     movdq   RBP, XMM0	# spill

552     B44: #	out( N617 ) <- in( B43 B50 )  Freq: 0.33333
552     movl    RSI, #-28	# int
557     movq    [rsp + #8], R14	# spill
55c     movq    [rsp + #24], RBX	# spill
561     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
56b     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #40]
575     movq    [rsp + #56], RDX	# spill
57a     movl    [rsp + #52], R12	# spill
        nop 	# 1 bytes pad for loops and calls
580     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:90 (line 26) L[0]=rsp + #8 L[1]=rsp + #56 L[2]=rsp + #24 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #32 L[8]=_ L[9]=rsp + #40 L[10]=_ L[11]=_ L[12]=_ L[13]=RBP L[14]=_ L[15]=rsp + #52 STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #56 STK[3]=rsp + #52
        # OopMap {[8]=Oop [24]=Oop [56]=Oop off=1416/0x588}
588     stop	# ShouldNotReachHere

59c     B45: #	out( B46 ) <- in( B39 )  Freq: 0.333328
59c     movsd   [rsp + #8], XMM2	# spill
5a2     movsd   [rsp + #0], XMM0	# spill
5a7     movdq   RBP, XMM1	# spill

5ac     B46: #	out( N617 ) <- in( B45 B51 )  Freq: 0.33333
5ac     movl    RSI, #-28	# int
5b1     movq    [rsp + #16], R14	# spill
5b6     movq    [rsp + #24], RDX	# spill
5bb     movq    [rsp + #64], RBX	# spill
5c0     movl    [rsp + #60], R12	# spill
        nop 	# 3 bytes pad for loops and calls
5c8     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:117 (line 27) L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #64 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #40 L[8]=_ L[9]=rsp + #48 L[10]=_ L[11]=RBP L[12]=_ L[13]=_ L[14]=_ L[15]=rsp + #60 STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #8 STK[3]=_ STK[4]=rsp + #64 STK[5]=rsp + #60
        # OopMap {[16]=Oop [24]=Oop [64]=Oop off=1488/0x5d0}
5d0     stop	# ShouldNotReachHere

5e4     B47: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
5e4     xorl    R14, R14	# ptr
5e7     jmp     B4

5ec     B48: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
5ec     xorl    RDX, RDX	# ptr
5ee     jmp     B7

5f3     B49: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
5f3     xorl    RBX, RBX	# ptr
5f5     jmp     B10

5fa     B50: #	out( B44 ) <- in( B14 )  Freq: 2.02654e-06
5fa     pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
603     movq    RBP, [rsp + #56]	# spill
608     jmp     B44

60d     B51: #	out( B46 ) <- in( B15 )  Freq: 2.02654e-06
60d     movsd   [rsp + #8], XMM0	# spill
613     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #0]
61c     movdq   RBP, XMM1	# spill
621     jmp,s   B46

623     B52: #	out( N617 ) <- in( B19 )  Freq: 1.01327e-06
623     stop	# ShouldNotReachHere

637     B53: #	out( N617 ) <- in( B20 )  Freq: 1.01327e-06
637     stop	# ShouldNotReachHere

64b     B54: #	out( N617 ) <- in( B21 )  Freq: 1.01327e-06
64b     stop	# ShouldNotReachHere

65f     B55: #	out( N617 ) <- in( B22 )  Freq: 1.01327e-06
65f     stop	# ShouldNotReachHere

673     B56: #	out( N617 ) <- in( B23 )  Freq: 1.01326e-06
673     stop	# ShouldNotReachHere

687     B57: #	out( N617 ) <- in( B24 )  Freq: 1.01326e-06
687     stop	# ShouldNotReachHere

69b     B58: #	out( N617 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
69b     movl    RSI, #-115	# int
6a0     movq    [rsp + #0], RBX	# spill
6a4     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #8]
6ae     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #16]
6b8     pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #24]
6c2     movl    [rsp + #40], R12	# spill
6c7     movq    [rsp + #48], R13	# spill
6cc     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:78 (line 25) L[0]=rsp + #48 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #8 L[8]=_ L[9]=rsp + #16 L[10]=_ L[11]=rsp + #24 L[12]=_ L[13]=rsp + #56 L[14]=_ L[15]=rsp + #40
        # OopMap {rbp=Oop [0]=Oop [48]=Oop off=1748/0x6d4}
6d4     stop	# ShouldNotReachHere

6e8     B59: #	out( B42 ) <- in( B12 )  Freq: 4.76835e-07
6e8     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #0]
6f1     movq    RBP, [rsp + #32]	# spill
6f6     jmp     B42

6fb     B60: #	out( N617 ) <- in( B11 B10 )  Freq: 2.02655e-06
6fb     movl    RSI, #-138	# int
700     movq    RBP, R14	# spill
703     movq    [rsp + #0], RDX	# spill
707     movq    [rsp + #8], RBX	# spill
70c     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #16]
716     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #24]
720     movl    [rsp + #48], R12	# spill
        nop 	# 3 bytes pad for loops and calls
728     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:78 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=_ L[9]=rsp + #24 L[10]=_ L[11]=rsp + #32 L[12]=_ L[13]=rsp + #56 L[14]=_ L[15]=rsp + #48
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1840/0x730}
730     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2675  957 %     4       org.jml.regression.linear.DoubleLinearRegression::fit @ 78 (155 bytes)
 total in heap  [0x000000011f38be10,0x000000011f38cc08] = 3576
 relocation     [0x000000011f38bf88,0x000000011f38c030] = 168
 main code      [0x000000011f38c040,0x000000011f38c7a0] = 1888
 stub code      [0x000000011f38c7a0,0x000000011f38c7b8] = 24
 oops           [0x000000011f38c7b8,0x000000011f38c7c0] = 8
 metadata       [0x000000011f38c7c0,0x000000011f38c7d8] = 24
 scopes data    [0x000000011f38c7d8,0x000000011f38c948] = 368
 scopes pcs     [0x000000011f38c948,0x000000011f38cbe8] = 672
 dependencies   [0x000000011f38cbe8,0x000000011f38cbf0] = 8
 nul chk table  [0x000000011f38cbf0,0x000000011f38cc08] = 24

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
 ;; N617: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f38c040: ;   {runtime_call os::breakpoint()}
  0x000000011f38c040: e85b ffdb | ee90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B47 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f38c050: 8984 2400 | a0fe ff55 | 4883 ec60 | 4c8b 6e78 | 488b 6e70 | 448b 2648 | 8b5e 68c5 | fb10 4638 
  0x000000011f38c070: c5fb 1144 | 2428 c5fb | 1046 28c5 | fb11 4424 | 30c5 fb10 | 4618 c5fb | 1144 2420 | c5fb 1046 
  0x000000011f38c090: 08c5 fb11 | 4424 3848 | 8bfe 9090 | 9090 9090 | c5f8 7749 | baa0 5025 | 0e01 0000 | 0041 ffd2 
  0x000000011f38c0b0: 4d85 ed0f | 846b 0500 | 0045 8b55 | 0890 9090 

  0x000000011f38c0c0: ;   {metadata('org/jml/regression/linear/DoubleLinearRegression')}
  0x000000011f38c0c0: 4181 fa20 | 1d12 460f | 850e 0600 | 004d 8bf5 
 ;; B4: #	out( B48 B5 ) <- in( B3 B47 )  Freq: 0.999999
  0x000000011f38c0d0: 4885 ed0f | 8453 0500 | 0044 8b5d | 0890 9090 

  0x000000011f38c0e0: ;   {metadata({type array double})}
  0x000000011f38c0e0: 4181 fbc3 | 8010 460f | 85ee 0500 | 0048 8bd5 
 ;; B7: #	out( B49 B8 ) <- in( B6 B48 )  Freq: 0.999998
  0x000000011f38c0f0: 4885 db0f | 843a 0500 | 0044 8b5b | 0890 9090 

  0x000000011f38c100: ;   {metadata({type array double})}
  0x000000011f38c100: 4181 fbc3 | 8010 460f | 85ce 0500 

  0x000000011f38c10c: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f38c10c: 008b 420c 
 ;; B11: #	out( B60 B12 ) <- in( B10 )  Freq: 0.999996
  0x000000011f38c110: ; implicit exception: dispatches to 0x000000011f38c73b
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f38c110: 448b 530c 
 ;; B12: #	out( B59 B13 ) <- in( B11 )  Freq: 0.999995
  0x000000011f38c114: 443b e00f | 8d0b 0600 

  0x000000011f38c11c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c11c: 0044 8bcb | 458b dc41 | ffc3 41c1 | e903 4183 | e103 4533 | c045 3bd8 | 450f 4cd8 | 443b d844 
  0x000000011f38c13c: 0f4f d845 | 03cb bf02 | 0000 0041 | 2bf9 83e7 | 0341 03fb | 3bf8 0f4f 

  0x000000011f38c154: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f38c154: f844 3be0 | 0f83 dc04 | 0000 c4a1 | 7b10 44e2 | 10c5 fb5c 

  0x000000011f38c168: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f38c168: 4424 28c5 | fb59 c8c5 | fb10 5424 | 20c5 eb58 

  0x000000011f38c178: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f38c178: c945 3be2 | 9090 9090 | 0f83 c704 | 0000 c4a1 | 7b10 54e3 | 10c5 eb5c | 5424 30c5 | eb59 c0c5 
  0x000000011f38c198: fb10 5424 | 38c5 eb58 

  0x000000011f38c1a0: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f38c1a0: c041 ffc4 | 443b e77d 

  0x000000011f38c1a8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c1a8: 0ec5 fb11 | 4c24 20c5 | fb11 4424 | 38eb 9e41 | 3bc2 448b | c845 0f4f | ca45 8bd9 | 4183 c3f1 
  0x000000011f38c1c8: bf00 0000 | 8045 3bcb | 440f 4cdf | 453b e30f | 8d06 0300 | 0090 9090 | 443b e00f | 837a 0400 
  0x000000011f38c1e8: 0045 3be2 | 0f83 8504 | 0000 418b | cc83 c10f | 413b ca90 | 9090 9090 | 0f83 8504 | 0000 453b 
  0x000000011f38c208: e20f 8390 | 0400 003b | c80f 839c | 0400 0044 | 3be0 9090 | 9090 9090 | 0f83 a104 | 0000 c4e2 
  0x000000011f38c228: 7d19 5424 | 28c4 e27d | 195c 2430 | b980 3e00 

  0x000000011f38c238: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x000000011f38c238: 00eb 1749 | 8bb7 3001 

  0x000000011f38c240: ; ImmutableOopMap {rbx=Oop rdx=Oop r14=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {poll}
  0x000000011f38c240: 0000 8506 | 453b e30f | 8d7a 0200 | 00c4 e1f9 | 6ecd 418b | f341 2bf4 | 453b dc41 | 0f4c f081 
  0x000000011f38c260: fe80 3e00 | 000f 47f1 | 4103 f4c4 | e1f9 7ecd | c579 28f8 | 9090 9090 | 9090 9090 

  0x000000011f38c27c: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f38c27c: 9090 9090 
 ;; B29: #	out( B29 B30 ) <- in( B28 B29 ) Loop( B29-B29 inner main of N201 strip mined) Freq: 9.99983e+11
  0x000000011f38c280: c4a1 7e6f | 44e3 10c4 | a17e 6f4c | e210 c5fd | 5cc3 c5f5 | 5cca c575 | 59d9 c57d | 59c1 4d63 
  0x000000011f38c2a0: ecc4 a17e | 6f44 ea30 | c4a1 7e6f | 74eb 70c4 | 217e 6f54 | ea50 c4a1 | 7e6f 4cea | 70c4 a17e 
  0x000000011f38c2c0: 6f64 eb30 | c4a1 7e6f | 6ceb 50c5 | fd5c c2c5 | d55c ebc5 | 7d59 e0c5 | dd5c e3c5 | f55c cac5 
  0x000000011f38c2e0: dd59 f8c5 | 7559 c9c5 

  0x000000011f38c2e8: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f38c2e8: ad5c c2c5 | cd5c e3c5 | d559 f0c5 | dd59 c9c5 | 7d59 d0c4 | e1f9 6ec5 | c4c1 7b58 | c3c4 4179 
  0x000000011f38c308: 70f3 0ec4 | c17b 58c6 | c443 7d19 | de01 c4c1 | 7b58 c6c4 | 4179 70ee | 0ec4 c17b | 58c5 c4c1 
  0x000000011f38c328: 7b58 c4c4 | 4179 70ec | 0ec4 c17b | 58c5 c443 | 7d19 e501 | c4c1 7b58 | c5c4 4179 | 70dd 0ec4 
  0x000000011f38c348: c17b 58c3 | c4c1 7b58 | c2c4 4179 | 70e2 0ec4 | c17b 58c4 | c443 7d19 | d401 c4c1 | 7b58 c4c4 
  0x000000011f38c368: 4179 70dc | 0ec4 c17b | 58c3 c4c1 | 7b58 c1c4 | 4179 70d9 | 0ec4 c17b | 58c3 c443 | 7d19 cb01 
  0x000000011f38c388: c4c1 7b58 | c3c4 4179 | 70d3 0ec4 

  0x000000011f38c394: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f38c394: c17b 58c2 | c4e1 f97e | c5c4 c179 | 28c7 c4c1 | 7b58 c0c4 | 4179 70d0 | 0ec4 c17b | 58c2 c443 
  0x000000011f38c3b4: 7d19 c201 | c4c1 7b58 | c2c4 4179 | 70ca 0ec4 | c17b 58c1 | c5fb 58c7 | c579 70cf | 0ec4 c17b 
  0x000000011f38c3d4: 58c1 c4c3 | 7d19 f901 | c4c1 7b58 | c1c4 4179 | 70c1 0ec4 | c17b 58c0 | c5fb 58c6 | c579 70c6 
  0x000000011f38c3f4: 0ec4 c17b | 58c0 c4c3 | 7d19 f001 | c4c1 7b58 | c0c4 c179 | 70f8 0ec5 | fb58 c7c5 | fb58 c1c5 
  0x000000011f38c414: f970 e10e | c5fb 58c4 | c4e3 7d19 | cc01 c5fb | 58c4 c5f9 | 70ec 0ec5 

  0x000000011f38c42c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f38c42c: fb58 c5c5 | 7928 f841 

  0x000000011f38c434: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f38c434: 83c4 1044 | 3be6 9090 | 9090 9090 | 0f8c 3afe 

  0x000000011f38c444: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c444: ffff e9f0 

  0x000000011f38c448: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f38c448: fdff ffc4 | a17e 6f44 | e310 c4a1 | 7e6f 4ce2 | 10c5 fd5c | c3c5 f55c 

  0x000000011f38c460: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f38c460: cac5 f559 | e1c5 fd59 | c9c4 c179 | 28c7 c5fb | 58c1 c5f9 | 70e9 0ec5 | fb58 c5c4 | e37d 19cd 
  0x000000011f38c480: 01c5 fb58 | c5c5 f970 | f50e c5fb 

  0x000000011f38c48c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f38c48c: 58c6 c4e1 | f96e cdc5 | f358 ccc5 | f970 f40e | c5f3 58ce | c4e3 7d19 | e601 c5f3 | 58ce c5f9 
  0x000000011f38c4ac: 70ee 0ec5 

  0x000000011f38c4b0: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f38c4b0: f358 cd41 

  0x000000011f38c4b4: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f38c4b4: 83c4 0445 

  0x000000011f38c4b8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c4b8: 3be3 7d27 
 ;; B33: #	out( B32 ) <- in( B32 )  Freq: 0.499992
  0x000000011f38c4bc: c4e1 f97e | cdc5 7928 | f8eb 8445 | 8bd9 4183 | c3fd 453b | cb44 0f4c | df45 3be3 | 0f8c 6dff 
  0x000000011f38c4dc: ffff c4e1 | f96e cd44 | 3be0 0f8d 

  0x000000011f38c4e8: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x000000011f38c4e8: 4400 0000 
 ;; B37: #	out( B38 ) <- in( B36 )  Freq: 0.999983
 ;; B38: #	out( B43 B39 ) <- in( B37 B40 ) Loop( B38-B40 inner post of N443) Freq: 328960
  0x000000011f38c4ec: 443b e00f | 8393 0000 | 00c4 a17b | 1054 e210 | c5eb 5c54 

  0x000000011f38c500: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f38c500: 2428 c5eb | 59da c5f3 

  0x000000011f38c508: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f38c508: 58cb 453b | e20f 83c9 | 0000 00c4 | a17b 105c | e310 c5e3 | 5c5c 2430 | c5e3 59d2 

  0x000000011f38c524: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f38c524: c5fb 58c2 

  0x000000011f38c528: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f38c528: 41ff c444 | 3be0 7cbc 
 ;; B41: #	out( B42 ) <- in( B40 B36 )  Freq: 0.333328
  0x000000011f38c530: c5fb 1104 | 24c4 e1f9 

  0x000000011f38c538: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c538: 7ecd be45 | ffff ff4c | 8974 2408 | 4889 5424 | 1048 895c | 2418 48ff | 7424 2848 | 8f44 2420 
  0x000000011f38c558: 48ff 7424 | 3048 8f44 | 2428 4489 | 6424 3489 | 4424 3890 

  0x000000011f38c56c: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38c56c: c5f8 77e8 

  0x000000011f38c570: ; ImmutableOopMap {[8]=Oop [16]=Oop [24]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c570: cc9f 58f8 

  0x000000011f38c574: ;   {external_word}
  0x000000011f38c574: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38c580: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c580: e4f0 e8c9 

  0x000000011f38c584: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f38c584: 89c2 eef4 
 ;; B43: #	out( B44 ) <- in( B38 )  Freq: 0.333328
  0x000000011f38c588: c5fb 110c | 24c4 e1f9 | 7ec5 bee4 | ffff ff4c | 8974 2408 | 4889 5c24 | 1848 ff74 | 2428 488f 
  0x000000011f38c5a8: 4424 2048 | ff74 2430 | 488f 4424 | 2848 8954 | 2438 4489 | 6424 3490 

  0x000000011f38c5c0: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38c5c0: c5f8 77e8 

  0x000000011f38c5c4: ; ImmutableOopMap {[8]=Oop [24]=Oop [56]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x000000011f38c5c4: 789f 58f8 

  0x000000011f38c5c8: ;   {external_word}
  0x000000011f38c5c8: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38c5d4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c5d4: e4f0 e875 

  0x000000011f38c5d8: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x000000011f38c5d8: 89c2 eef4 
 ;; B45: #	out( B46 ) <- in( B39 )  Freq: 0.333328
  0x000000011f38c5dc: c5fb 1154 | 2408 c5fb | 1104 24c4 | e1f9 7ecd 
 ;; B46: #	out( N617 ) <- in( B45 B51 )  Freq: 0.33333
  0x000000011f38c5ec: bee4 ffff | ff4c 8974 | 2410 4889 | 5424 1848 | 895c 2440 | 4489 6424 | 3c90 9090 

  0x000000011f38c608: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38c608: c5f8 77e8 

  0x000000011f38c60c: ; ImmutableOopMap {[16]=Oop [24]=Oop [64]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f38c60c: 309f 58f8 

  0x000000011f38c610: ;   {external_word}
  0x000000011f38c610: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38c61c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c61c: e4f0 e82d 

  0x000000011f38c620: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f38c620: 89c2 eef4 
 ;; B47: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x000000011f38c624: 4533 f6e9 | a4fa ffff 
 ;; B48: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x000000011f38c62c: 33d2 e9bd | faff ff33 | dbe9 d3fa | ffff 48ff | 7424 2048 | 8f04 2448 | 8b6c 2438 | e945 ffff 
  0x000000011f38c64c: ffc5 fb11 | 4424 0848 | ff74 2438 | 488f 0424 | c4e1 f97e 

  0x000000011f38c660: ;   {external_word}
  0x000000011f38c660: cdeb 8948 | bfa6 6d6f | 0e01 0000 | 0048 83e4 

  0x000000011f38c670: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c670: f0e8 da88 

  0x000000011f38c674: ;   {external_word}
  0x000000011f38c674: c2ee f448 | bfa6 6d6f | 0e01 0000 | 0048 83e4 

  0x000000011f38c684: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c684: f0e8 c688 

  0x000000011f38c688: ;   {external_word}
  0x000000011f38c688: c2ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f38c698: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c698: f0e8 b288 

  0x000000011f38c69c: ;   {external_word}
  0x000000011f38c69c: c2ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f38c6ac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c6ac: f0e8 9e88 

  0x000000011f38c6b0: ;   {external_word}
  0x000000011f38c6b0: c2ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f38c6c0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c6c0: f0e8 8a88 

  0x000000011f38c6c4: ;   {external_word}
  0x000000011f38c6c4: c2ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f38c6d4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c6d4: f0e8 7688 | c2ee f4be | 8dff ffff | 4889 1c24 | 48ff 7424 | 2848 8f44 | 2408 48ff | 7424 3048 
  0x000000011f38c6f4: 8f44 2410 | 48ff 7424 | 2048 8f44 | 2418 4489 | 6424 284c | 896c 2430 

  0x000000011f38c70c: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38c70c: c5f8 77e8 

  0x000000011f38c710: ; ImmutableOopMap {rbp=Oop [0]=Oop [48]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f38c710: 2c9e 58f8 

  0x000000011f38c714: ;   {external_word}
  0x000000011f38c714: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38c720: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c720: e4f0 e829 | 88c2 eef4 
 ;; B59: #	out( B42 ) <- in( B12 )  Freq: 4.76835e-07
  0x000000011f38c728: 48ff 7424 | 3848 8f04 | 2448 8b6c | 2420 e9ff | fdff ffbe | 76ff ffff | 498b ee48 | 8914 2448 
  0x000000011f38c748: 895c 2408 | 48ff 7424 | 2848 8f44 | 2410 48ff | 7424 3048 | 8f44 2418 | 4489 6424 | 3090 9090 
  0x000000011f38c768: ;   {runtime_call UncommonTrapBlob}
  0x000000011f38c768: c5f8 77e8 

  0x000000011f38c76c: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f38c76c: d09d 58f8 

  0x000000011f38c770: ;   {external_word}
  0x000000011f38c770: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f38c77c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f38c77c: e4f0 e8cd 

  0x000000011f38c780: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f38c780: 87c2 eef4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011f38c7a0: ;   {no_reloc}
  0x000000011f38c7a0: e97b 494d | f8e8 0000 | 0000 4883 

  0x000000011f38c7ac: ;   {runtime_call DeoptimizationBlob}
  0x000000011f38c7ac: 2c24 05e9 | aca0 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011f38c7b8:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011f38c7c0:   0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
  0x000000011f38c7c8:   0x0000000230840618 {type array double}
  0x000000011f38c7d0:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011f38c03f offset=ffffffff bits=0):
PcDesc(pc=0x000000011f38c10d offset=cd bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
PcDesc(pc=0x000000011f38c110 offset=d0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@81 (line 25)
PcDesc(pc=0x000000011f38c114 offset=d4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f38c11d offset=dd bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f38c155 offset=115 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f38c16b offset=12b bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f38c179 offset=139 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f38c1a1 offset=161 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f38c1a4 offset=164 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f38c1a9 offset=169 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f38c239 offset=1f9 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f38c242 offset=202 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg r14 [28],oop
    - l1: reg rdx [4],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: 0
    - l14: reg xmm0 [48],double
    - l15: reg r12 [24],int
PcDesc(pc=0x000000011f38c244 offset=204 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f38c280 offset=240 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f38c2eb offset=2ab bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f38c398 offset=358 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f38c42f offset=3ef bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f38c437 offset=3f7 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f38c446 offset=406 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f38c44b offset=40b bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f38c461 offset=421 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f38c48e offset=44e bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f38c4b3 offset=473 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f38c4b7 offset=477 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f38c4bc offset=47c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f38c4ec offset=4ac bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
PcDesc(pc=0x000000011f38c502 offset=4c2 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f38c50a offset=4ca bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f38c528 offset=4e8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f38c52b offset=4eb bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f38c53a offset=4fa bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f38c574 offset=534 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)  reexecute=true
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[32],double
    - l9: 0
    - l10: stack[40],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: 0
    - l14: stack[0],double
    - l15: stack[52]
   Expression stack
    - @0: stack[52]
    - @1: stack[56]
PcDesc(pc=0x000000011f38c588 offset=548 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f38c5c8 offset=588 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
   Locals
    - l0: stack[8],oop
    - l1: stack[56],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[32],double
    - l9: 0
    - l10: stack[40],double
    - l11: empty
    - l12: empty
    - l13: 0
    - l14: reg rbp [10],double
    - l15: stack[52]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[56],oop
    - @3: stack[52]
PcDesc(pc=0x000000011f38c5dc offset=59c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
PcDesc(pc=0x000000011f38c610 offset=5d0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: stack[16],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: empty
    - l14: empty
    - l15: stack[60]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: 0
    - @3: stack[8],double
    - @4: stack[64],oop
    - @5: stack[60]
PcDesc(pc=0x000000011f38c624 offset=5e4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f38c714 offset=6d4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[8],double
    - l9: 0
    - l10: stack[16],double
    - l11: 0
    - l12: stack[24],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[40]
PcDesc(pc=0x000000011f38c770 offset=730 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: stack[32],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[48]
PcDesc(pc=0x000000011f38c784 offset=744 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
PcDesc(pc=0x000000011f38c7b9 offset=779 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 6 OopMaps

ImmutableOopMap {rbx=Oop rdx=Oop r14=Oop } pc offsets: 514 
ImmutableOopMap {[8]=Oop [16]=Oop [24]=Oop } pc offsets: 1332 
ImmutableOopMap {[8]=Oop [24]=Oop [56]=Oop } pc offsets: 1416 
ImmutableOopMap {[16]=Oop [24]=Oop [64]=Oop } pc offsets: 1488 
ImmutableOopMap {rbp=Oop [0]=Oop [48]=Oop } pc offsets: 1748 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1840 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011f38c10d offset=cd):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
ScopeDesc(pc=0x000000011f38c110 offset=d0):
   org.jml.regression.linear.DoubleLinearRegression::fit@81 (line 25)
ScopeDesc(pc=0x000000011f38c114 offset=d4):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f38c11d offset=dd):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f38c155 offset=115):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f38c16b offset=12b):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f38c179 offset=139):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f38c1a1 offset=161):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f38c1a4 offset=164):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f38c1a9 offset=169):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f38c239 offset=1f9):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f38c242 offset=202):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg r14 [28],oop
    - l1: reg rdx [4],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: 0
    - l14: reg xmm0 [48],double
    - l15: reg r12 [24],int
ScopeDesc(pc=0x000000011f38c244 offset=204):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f38c280 offset=240):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f38c2eb offset=2ab):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f38c398 offset=358):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f38c42f offset=3ef):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f38c437 offset=3f7):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f38c446 offset=406):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f38c44b offset=40b):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f38c461 offset=421):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f38c48e offset=44e):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f38c4b3 offset=473):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f38c4b7 offset=477):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f38c4bc offset=47c):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f38c4ec offset=4ac):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
ScopeDesc(pc=0x000000011f38c502 offset=4c2):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f38c50a offset=4ca):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f38c528 offset=4e8):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f38c52b offset=4eb):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f38c53a offset=4fa):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f38c574 offset=534):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)  reexecute=true
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[32],double
    - l9: 0
    - l10: stack[40],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: 0
    - l14: stack[0],double
    - l15: stack[52]
   Expression stack
    - @0: stack[52]
    - @1: stack[56]
ScopeDesc(pc=0x000000011f38c588 offset=548):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f38c5c8 offset=588):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
   Locals
    - l0: stack[8],oop
    - l1: stack[56],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[32],double
    - l9: 0
    - l10: stack[40],double
    - l11: empty
    - l12: empty
    - l13: 0
    - l14: reg rbp [10],double
    - l15: stack[52]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[56],oop
    - @3: stack[52]
ScopeDesc(pc=0x000000011f38c5dc offset=59c):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
ScopeDesc(pc=0x000000011f38c610 offset=5d0):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: stack[16],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: empty
    - l14: empty
    - l15: stack[60]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: 0
    - @3: stack[8],double
    - @4: stack[64],oop
    - @5: stack[60]
ScopeDesc(pc=0x000000011f38c624 offset=5e4):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f38c714 offset=6d4):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[8],double
    - l9: 0
    - l10: stack[16],double
    - l11: 0
    - l12: stack[24],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[40]
ScopeDesc(pc=0x000000011f38c770 offset=730):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: stack[32],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[48]
ScopeDesc(pc=0x000000011f38c784 offset=744):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011f38bf88: 6400
relocInfo@0x000000011f38bf88 [type=6(runtime_call) addr=0x000000011f38c040 offset=0 format=1] | [destination=0x000000010e14bfa0]
         @0x000000011f38bf8a: f001cc80
relocInfo@0x000000011f38bf8c [type=12(metadata) addr=0x000000011f38c0c0 offset=128 format=3 data=1] | [metadata_addr=0x000000011f38c7c0 *=0x000000023090e900 offset=0]metadata_value=0x000000023090e900: 'org/jml/regression/linear/DoubleLinearRegression'
         @0x000000011f38bf8e: f002cc20
relocInfo@0x000000011f38bf90 [type=12(metadata) addr=0x000000011f38c0e0 offset=32 format=3 data=2] | [metadata_addr=0x000000011f38c7c8 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f38bf92: f002cc20
relocInfo@0x000000011f38bf94 [type=12(metadata) addr=0x000000011f38c100 offset=32 format=3 data=2] | [metadata_addr=0x000000011f38c7c8 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f38bf96: a142
relocInfo@0x000000011f38bf96 [type=10(poll) addr=0x000000011f38c242 offset=322]
         @0x000000011f38bf98: 672d
relocInfo@0x000000011f38bf98 [type=6(runtime_call) addr=0x000000011f38c56f offset=813 format=1] | [destination=0x0000000117916540]
         @0x000000011f38bf9a: f8030e67b77700017005
relocInfo@0x000000011f38bfa2 [type=7(external_word) addr=0x000000011f38c574 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38bfa4: 640e
relocInfo@0x000000011f38bfa4 [type=6(runtime_call) addr=0x000000011f38c582 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bfa6: 6441
relocInfo@0x000000011f38bfa6 [type=6(runtime_call) addr=0x000000011f38c5c3 offset=65 format=1] | [destination=0x0000000117916540]
         @0x000000011f38bfa8: f8030e67b77700017005
relocInfo@0x000000011f38bfb0 [type=7(external_word) addr=0x000000011f38c5c8 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38bfb2: 640e
relocInfo@0x000000011f38bfb2 [type=6(runtime_call) addr=0x000000011f38c5d6 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bfb4: 6435
relocInfo@0x000000011f38bfb4 [type=6(runtime_call) addr=0x000000011f38c60b offset=53 format=1] | [destination=0x0000000117916540]
         @0x000000011f38bfb6: f8030e67b77700017005
relocInfo@0x000000011f38bfbe [type=7(external_word) addr=0x000000011f38c610 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38bfc0: 640e
relocInfo@0x000000011f38bfc0 [type=6(runtime_call) addr=0x000000011f38c61e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bfc2: f8030e6f6da600017045
relocInfo@0x000000011f38bfca [type=7(external_word) addr=0x000000011f38c663 offset=69 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f38bfcc: 640e
relocInfo@0x000000011f38bfcc [type=6(runtime_call) addr=0x000000011f38c671 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bfce: f8030e6f6da600017006
relocInfo@0x000000011f38bfd6 [type=7(external_word) addr=0x000000011f38c677 offset=6 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f38bfd8: 640e
relocInfo@0x000000011f38bfd8 [type=6(runtime_call) addr=0x000000011f38c685 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bfda: f8030e6f653100017006
relocInfo@0x000000011f38bfe2 [type=7(external_word) addr=0x000000011f38c68b offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38bfe4: 640e
relocInfo@0x000000011f38bfe4 [type=6(runtime_call) addr=0x000000011f38c699 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bfe6: f8030e6f653100017006
relocInfo@0x000000011f38bfee [type=7(external_word) addr=0x000000011f38c69f offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38bff0: 640e
relocInfo@0x000000011f38bff0 [type=6(runtime_call) addr=0x000000011f38c6ad offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bff2: f8030e6f653100017006
relocInfo@0x000000011f38bffa [type=7(external_word) addr=0x000000011f38c6b3 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38bffc: 640e
relocInfo@0x000000011f38bffc [type=6(runtime_call) addr=0x000000011f38c6c1 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38bffe: f8030e6f653100017006
relocInfo@0x000000011f38c006 [type=7(external_word) addr=0x000000011f38c6c7 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f38c008: 640e
relocInfo@0x000000011f38c008 [type=6(runtime_call) addr=0x000000011f38c6d5 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38c00a: 643a
relocInfo@0x000000011f38c00a [type=6(runtime_call) addr=0x000000011f38c70f offset=58 format=1] | [destination=0x0000000117916540]
         @0x000000011f38c00c: f8030e67b77700017005
relocInfo@0x000000011f38c014 [type=7(external_word) addr=0x000000011f38c714 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38c016: 640e
relocInfo@0x000000011f38c016 [type=6(runtime_call) addr=0x000000011f38c722 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38c018: 6449
relocInfo@0x000000011f38c018 [type=6(runtime_call) addr=0x000000011f38c76b offset=73 format=1] | [destination=0x0000000117916540]
         @0x000000011f38c01a: f8030e67b77700017005
relocInfo@0x000000011f38c022 [type=7(external_word) addr=0x000000011f38c770 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f38c024: 640e
relocInfo@0x000000011f38c024 [type=6(runtime_call) addr=0x000000011f38c77e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f38c026: 0022
relocInfo@0x000000011f38c026 [type=0(none) addr=0x000000011f38c7a0 offset=34]
         @0x000000011f38c028: 6400
relocInfo@0x000000011f38c028 [type=6(runtime_call) addr=0x000000011f38c7a0 offset=0 format=1] | [destination=0x0000000117861120]
         @0x000000011f38c02a: 640f
relocInfo@0x000000011f38c02a [type=6(runtime_call) addr=0x000000011f38c7af offset=15 format=1] | [destination=0x0000000117916860]
         @0x000000011f38c02c: 0000
relocInfo@0x000000011f38c02c [type=0(none) addr=0x000000011f38c7af offset=0]
         @0x000000011f38c02e: 0000
relocInfo@0x000000011f38c02e [type=0(none) addr=0x000000011f38c7af offset=0]
         @0x000000011f38c030: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.DoubleLinearRegression
   [nmethod<=klass]org.jml.regression.linear.DoubleLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x000000011f38c10d, 0x000000011f38c73b > < 0x000000011f38c110, 0x000000011f38c73b > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
#2: 0x0000000230840618 {type array double}
#3: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)    2700  982       3       org.jml.regression.linear.DoubleLinearRegression::fit (155 bytes)
 total in heap  [0x0000000117f30810,0x0000000117f31270] = 2656
 relocation     [0x0000000117f30988,0x0000000117f30a20] = 152
 main code      [0x0000000117f30a20,0x0000000117f30e60] = 1088
 stub code      [0x0000000117f30e60,0x0000000117f30ec8] = 104
 oops           [0x0000000117f30ec8,0x0000000117f30ed0] = 8
 metadata       [0x0000000117f30ed0,0x0000000117f30ed8] = 8
 scopes data    [0x0000000117f30ed8,0x0000000117f31020] = 328
 scopes pcs     [0x0000000117f31020,0x0000000117f31250] = 560
 dependencies   [0x0000000117f31250,0x0000000117f31258] = 8
 nul chk table  [0x0000000117f31258,0x0000000117f31270] = 24

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
  # this:     rsi:rsi   = 'org/jml/regression/linear/DoubleLinearRegression'
  # parm0:    rdx:rdx   = '[D'
  # parm1:    rcx:rcx   = '[D'
  #           [sp+0x70]  (sp of caller)
 ;;  block B9 [0, 0]
  0x0000000117f30a20: 448b 5608 | 49c1 e203 

  0x0000000117f30a28: ;   {runtime_call ic_miss_stub}
  0x0000000117f30a28: 4c3b d00f | 85ef 4e9e | ff90 9090 | 9090 9090 | 9090 9090 | 9090 9090 
[Verified Entry Point]
  0x0000000117f30a40: 8984 2400 | a0fe ff55 | 4883 ec60 

  0x0000000117f30a4c: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30a4c: 48bf 0040 | f072 0200 | 0000 8b87 | 1c01 0000 | 83c0 0289 | 871c 0100 | 0081 e0fe | 0700 0083 
  0x0000000117f30a6c: f800 0f84 

  0x0000000117f30a70: ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@0 (line 11)
  0x0000000117f30a70: a202 0000 
 ;;  block B10 [0, 0]
 ;;  block B0 [0, 4]
  0x0000000117f30a74: ; implicit exception: dispatches to 0x0000000117f30d37
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
  0x0000000117f30a74: 8b7a 0c8b 

  0x0000000117f30a78: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
  0x0000000117f30a78: 410c 3bf8 

  0x0000000117f30a7c: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30a7c: 48b8 0040 | f072 0200 | 0000 48bb | 7001 0000 | 0000 0000 | 0f85 0a00 | 0000 48bb | 6001 0000 
  0x0000000117f30a9c: 0000 0000 | 4c8b 0418 | 4d8d 4001 | 4c89 0418 
 ;;   50 branch [NE] [B1] 
  0x0000000117f30aac: 0f85 cf01 

  0x0000000117f30ab0: ;*if_icmpeq {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
  0x0000000117f30ab0: 0000 b800 | 0000 00c5 | f957 c0c5 | f157 c9e9 

  0x0000000117f30ac0: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x0000000117f30ac0: 7800 0000 | 9090 9090 
 ;;  block B4 [32, 51]
  0x0000000117f30ac8: 4863 d8c5 | fb10 54da 

  0x0000000117f30ad0: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x0000000117f30ad0: 10c5 eb58 | d13b 410c 
 ;;   94 branch [AE] [RangeCheckStub: 0x00007fa5180fcf20] [bci:44]
  0x0000000117f30ad8: 0f83 8b02 | 0000 4863 | d8c5 fb10 

  0x0000000117f30ae4: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x0000000117f30ae4: 4cd9 10c5 | f358 c8ff 

  0x0000000117f30aec: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30aec: c048 bb00 | 40f0 7202 | 0000 0044 | 8b83 2001 | 0000 4183 | c002 4489 | 8320 0100 | 0041 81e0 
  0x0000000117f30b0c: fe3f 0000 | 4183 f800 
 ;;  120 branch [EQ] [CounterOverflowStub: 0x00007fa5180fd8e0]
  0x0000000117f30b14: 0f84 7102 

  0x0000000117f30b18: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x0000000117f30b18: 0000 4d8b | 9730 0100 

  0x0000000117f30b20: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x0000000117f30b20: 0041 8502 

  0x0000000117f30b24: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30b24: 48bb 0040 | f072 0200 | 0000 ff83 | b001 0000 | c5f9 28c1 

  0x0000000117f30b38: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x0000000117f30b38: c5f9 28ca 
 ;;  block B3 [25, 29]
  0x0000000117f30b3c: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30b3c: 3bc7 48bb | 0040 f072 | 0200 0000 | 49b8 a001 | 0000 0000 | 0000 0f8c | 0a00 0000 | 49b8 9001 
  0x0000000117f30b5c: 0000 0000 | 0000 4e8b | 0c03 4d8d | 4901 4e89 | 0c03 0f8c 

  0x0000000117f30b70: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x0000000117f30b70: 54ff ffff 
 ;;  block B5 [54, 78]
  0x0000000117f30b74: c5eb 2ad7 | c5f3 5eca | c5fb 5ec2 | b800 0000 | 00c5 e957 | d2c5 e157 | dbe9 8e00 

  0x0000000117f30b90: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x0000000117f30b90: 0000 9090 | 9090 9090 
 ;;  block B7 [85, 128]
  0x0000000117f30b98: 4863 d8c5 | fb10 64da 

  0x0000000117f30ba0: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x0000000117f30ba0: 10c5 db5c | e1c5 f928 | ecc5 d359 | ecc5 d358 | eb3b 410c 
 ;;  196 branch [AE] [RangeCheckStub: 0x00007fa51a1ae4d0] [bci:117]
  0x0000000117f30bb4: 0f83 f201 | 0000 4863 | d8c5 fb10 

  0x0000000117f30bc0: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x0000000117f30bc0: 5cd9 10c5 | e35c d8c5 | e359 dcc5 | e358 daff 

  0x0000000117f30bd0: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30bd0: c048 bb00 | 40f0 7202 | 0000 0044 | 8b83 2001 | 0000 4183 | c002 4489 | 8320 0100 | 0041 81e0 
  0x0000000117f30bf0: fe3f 0000 | 4183 f800 
 ;;  230 branch [EQ] [CounterOverflowStub: 0x00007fa51a1aefd0]
  0x0000000117f30bf8: 0f84 d001 

  0x0000000117f30bfc: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x0000000117f30bfc: 0000 4d8b | 9730 0100 

  0x0000000117f30c04: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {poll}
  0x0000000117f30c04: 0041 8502 

  0x0000000117f30c08: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30c08: 48bb 0040 | f072 0200 | 0000 ff83 | e801 0000 | c5f9 28d3 

  0x0000000117f30c1c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x0000000117f30c1c: c5f9 28dd 
 ;;  block B6 [78, 82]
  0x0000000117f30c20: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30c20: 3bc7 48bb | 0040 f072 | 0200 0000 | 49b8 d801 | 0000 0000 | 0000 0f8c | 0a00 0000 | 49b8 c801 
  0x0000000117f30c40: 0000 0000 | 0000 4e8b | 0c03 4d8d | 4901 4e89 | 0c03 0f8c 

  0x0000000117f30c54: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x0000000117f30c54: 40ff ffff 
 ;;  block B8 [131, 154]
  0x0000000117f30c58: c5eb 5ed3 | c5fb 1156 

  0x0000000117f30c60: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x0000000117f30c60: 18c5 eb59 | d1c5 fb5c | c2c5 fb11 

  0x0000000117f30c6c: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
  0x0000000117f30c6c: 4610 4883 

  0x0000000117f30c70: ;   {poll_return}
  0x0000000117f30c70: c460 5d49 | 3ba7 2801 | 0000 0f87 | 6f01 0000 

  0x0000000117f30c80: ;*return {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@154 (line 33)
  0x0000000117f30c80: c390 9090 | 9090 9090 

  0x0000000117f30c88: ;   {no_reloc}
  0x0000000117f30c88: e987 0100 | 0000 0000 | 0000 498b | 8748 0100 | 0048 8d78 | 3849 3bbf | 5801 0000 | 0f87 7401 
  0x0000000117f30ca8: 0000 4989 | bf48 0100 | 0048 c700 | 0100 0000 | 488b ca48 | c1e9 0389 | 4808 4833 | c989 480c 
  0x0000000117f30cc8: 4833 c948 | bf05 0000 | 0000 0000 | 0048 894c | f808 48ff 

  0x0000000117f30cdc: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x0000000117f30cdc: cf75 f648 

  0x0000000117f30ce0: ;   {metadata(method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30ce0: 8bd0 48be | 0040 f072 | 0200 0000 | 4883 8680 | 0100 0001 

  0x0000000117f30cf4: ;   {oop("Arrays length are not equals"{0x000000018f500000})}
  0x0000000117f30cf4: 48ba 0000 | 508f 0100 | 0000 488b 

  0x0000000117f30d00: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
  0x0000000117f30d00: f048 8944 

  0x0000000117f30d04: ;   {optimized virtual_call}
  0x0000000117f30d04: 2448 90e8 

  0x0000000117f30d08: ; ImmutableOopMap {[72]=Oop }
                      ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
  0x0000000117f30d08: 144f 9eff | 488b 4424 | 48e9 3401 

  0x0000000117f30d14: ;   {metadata({method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30d14: 0000 49ba | 60fa c872 | 0200 0000 | 4c89 5424 | 0848 c704 | 24ff ffff 

  0x0000000117f30d2c: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000117f30d2c: ffe8 8e98 

  0x0000000117f30d30: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*synchronization entry
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
  0x0000000117f30d30: 92ff e93d 

  0x0000000117f30d34: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f30d34: fdff ffe8 

  0x0000000117f30d38: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
  0x0000000117f30d38: 04f8 92ff 

  0x0000000117f30d3c: ;   {external_word}
  0x0000000117f30d3c: 48bf 69ab | 5f0e 0100 | 0000 4883 

  0x0000000117f30d48: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f30d48: e4f0 e801 | 4208 f6f4 
 ;; ImplicitNullCheckStub slow case
  0x0000000117f30d50: ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000117f30d50: e8eb f792 

  0x0000000117f30d54: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
                      ;   {external_word}
  0x0000000117f30d54: ff48 bf69 | ab5f 0e01 | 0000 0048 

  0x0000000117f30d60: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f30d60: 83e4 f0e8 | e841 08f6 | f448 8904 | 2448 894c 

  0x0000000117f30d70: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000117f30d70: 2408 e8c9 

  0x0000000117f30d74: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
                      ;   {external_word}
  0x0000000117f30d74: 0093 ff48 | bf69 ab5f | 0e01 0000 | 0048 83e4 

  0x0000000117f30d84: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f30d84: f0e8 c641 

  0x0000000117f30d88: ;   {metadata({method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30d88: 08f6 f449 | ba60 fac8 | 7202 0000 | 004c 8954 | 2408 48c7 | 0424 3300 

  0x0000000117f30da0: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000117f30da0: 0000 e819 

  0x0000000117f30da4: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x0000000117f30da4: 9892 ffe9 | 6efd ffff 
 ;; RangeCheckStub slow case
  0x0000000117f30dac: 4889 0424 | 4889 4c24 

  0x0000000117f30db4: ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000117f30db4: 08e8 8600 

  0x0000000117f30db8: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
                      ;   {external_word}
  0x0000000117f30db8: 93ff 48bf | 69ab 5f0e | 0100 0000 | 4883 e4f0 

  0x0000000117f30dc8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f30dc8: e883 4108 

  0x0000000117f30dcc: ;   {metadata({method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression')}
  0x0000000117f30dcc: f6f4 49ba | 60fa c872 | 0200 0000 | 4c89 5424 | 0848 c704 | 2480 0000 

  0x0000000117f30de4: ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000117f30de4: 00e8 d697 

  0x0000000117f30de8: ; ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x0000000117f30de8: 92ff e90f 

  0x0000000117f30dec: ;   {internal_word}
  0x0000000117f30dec: feff ff49 | ba73 0cf3 | 1701 0000 | 004d 8997 | e803 0000 

  0x0000000117f30e00: ;   {runtime_call SafepointBlob}
  0x0000000117f30e00: e91b 649e 

  0x0000000117f30e04: ;   {metadata(NULL)}
  0x0000000117f30e04: ff48 ba00 | 0000 0000 | 0000 00b8 | 000f 050a 
 ;; patch entry point
  0x0000000117f30e14: ;   {runtime_call load_klass_patching Runtime1 stub}
  0x0000000117f30e14: e867 aa92 

  0x0000000117f30e18: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x0000000117f30e18: ffe9 6afe | ffff 488b 

  0x0000000117f30e20: ;   {runtime_call fast_new_instance Runtime1 stub}
  0x0000000117f30e20: d2e8 9aec 

  0x0000000117f30e24: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x0000000117f30e24: 92ff e9b4 | feff ff90 | 9049 8b87 | 5004 0000 | 49c7 8750 | 0400 0000 | 0000 0049 | c787 5804 
  0x0000000117f30e44: 0000 0000 | 0000 4883 

  0x0000000117f30e4c: ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000117f30e4c: c460 5de9 | ec09 93ff | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Stub Code]
  0x0000000117f30e60: ;   {no_reloc}
  0x0000000117f30e60: 9090 9090 

  0x0000000117f30e64: ;   {static_stub}
  0x0000000117f30e64: 9048 bb00 | 0000 0000 

  0x0000000117f30e6c: ;   {runtime_call}
  0x0000000117f30e6c: 0000 00e9 | fbff ffff 
[Exception Handler]
  0x0000000117f30e74: 48bb adde | 0000 0000 | 0000 48b9 | adde 0000 | 0000 0000 | 48be adde | 0000 0000 | 0000 48bf 
  0x0000000117f30e94: adde 0000 | 0000 0000 

  0x0000000117f30e9c: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000000117f30e9c: e83f d292 

  0x0000000117f30ea0: ;   {external_word}
  0x0000000117f30ea0: ff48 bf69 | ab5f 0e01 | 0000 0048 

  0x0000000117f30eac: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000117f30eac: 83e4 f0e8 | 9c40 08f6 

  0x0000000117f30eb4: ;   {section_word}
  0x0000000117f30eb4: f449 bab5 | 0ef3 1701 | 0000 0041 

  0x0000000117f30ec0: ;   {runtime_call DeoptimizationBlob}
  0x0000000117f30ec0: 52e9 9a59 | 9eff f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x0000000117f30ec8:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x0000000117f30ed0:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x0000000117f30a1f offset=ffffffff bits=0):
PcDesc(pc=0x0000000117f30a74 offset=54 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@0 (line 11)
PcDesc(pc=0x0000000117f30a77 offset=57 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
PcDesc(pc=0x0000000117f30a7a offset=5a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
PcDesc(pc=0x0000000117f30ab2 offset=92 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
PcDesc(pc=0x0000000117f30ac4 offset=a4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
PcDesc(pc=0x0000000117f30ad1 offset=b1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
PcDesc(pc=0x0000000117f30ae7 offset=c7 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x0000000117f30b1a offset=fa bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000117f30b21 offset=101 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rax [0],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30b3c offset=11c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x0000000117f30b74 offset=154 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x0000000117f30b92 offset=172 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
PcDesc(pc=0x0000000117f30ba1 offset=181 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
PcDesc(pc=0x0000000117f30bc3 offset=1a3 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x0000000117f30bfe offset=1de bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x0000000117f30c05 offset=1e5 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rax [0],int
PcDesc(pc=0x0000000117f30c20 offset=200 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x0000000117f30c58 offset=238 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x0000000117f30c61 offset=241 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x0000000117f30c6e offset=24e bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
PcDesc(pc=0x0000000117f30c81 offset=261 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@154 (line 33)
PcDesc(pc=0x0000000117f30cdf offset=2bf bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
PcDesc(pc=0x0000000117f30d01 offset=2e1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
PcDesc(pc=0x0000000117f30d0c offset=2ec bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: stack[72],oop
PcDesc(pc=0x0000000117f30d32 offset=312 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30d3c offset=31c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
62.439 ms/op
    - l15: empty
PcDesc(pc=0x0000000117f30d55 offset=335 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30d77 offset=357 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30da7 offset=387 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rax [0],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30dba offset=39a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30dea offset=3ca bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    # Warmup Iteration   2: - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rax [0],int
PcDesc(pc=0x0000000117f30e19 offset=3f9 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30e26 offset=406 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x0000000117f30ec9 offset=4a9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 12 OopMaps

ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop } pc offsets: 257 485 
ImmutableOopMap {[72]=Oop } pc offsets: 748 
ImmutableOopMap {rsi=Oop rdx=Oop rcx=Oop } pc offsets: 786 796 821 855 903 922 970 
ImmutableOopMap {} pc offsets: 1017 1030 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x0000000117f30a74 offset=54):
   org.jml.regression.linear.DoubleLinearRegression::fit@0 (line 11)
ScopeDesc(pc=0x0000000117f30a77 offset=57):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x0000000117f30a7a offset=5a):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x0000000117f30ab2 offset=92):
   org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
ScopeDesc(pc=0x0000000117f30ac4 offset=a4):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x0000000117f30ad1 offset=b1):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x0000000117f30ae7 offset=c7):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x0000000117f30b1a offset=fa):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000117f30b21 offset=101):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rax [0],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30b3c offset=11c):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x0000000117f30b74 offset=154):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x0000000117f30b92 offset=172):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
ScopeDesc(pc=0x0000000117f30ba1 offset=181):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
ScopeDesc(pc=0x0000000117f30bc3 offset=1a3):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x0000000117f30bfe offset=1de):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x0000000117f30c05 offset=1e5):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rax [0],int
ScopeDesc(pc=0x0000000117f30c20 offset=200):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x0000000117f30c58 offset=238):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x0000000117f30c61 offset=241):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x0000000117f30c6e offset=24e):
   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
ScopeDesc(pc=0x0000000117f30c81 offset=261):
   org.jml.regression.linear.DoubleLinearRegression::fit@154 (line 33)
ScopeDesc(pc=0x0000000117f30cdf offset=2bf):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
ScopeDesc(pc=0x0000000117f30d01 offset=2e1):
   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
ScopeDesc(pc=0x0000000117f30d0c offset=2ec):
   org.jml.regression.linear.DoubleLinearRegression::fit@13 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: stack[72],oop
ScopeDesc(pc=0x0000000117f30d32 offset=312):
   org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30d3c offset=31c):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30d55 offset=335):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30d77 offset=357):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30da7 offset=387):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm2 [80],double
    - l5: 0
    - l6: reg xmm1 [64],double
    - l7: reg rax [0],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30dba offset=39a):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30dea offset=3ca):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg xmm1 [64],double
    - l9: 0
    - l10: reg xmm0 [48],double
    - l11: 0
    - l12: reg xmm5 [128],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rax [0],int
ScopeDesc(pc=0x0000000117f30e19 offset=3f9):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x0000000117f30e26 offset=406):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x0000000117f30988: 600b
relocInfo@0x0000000117f30988 [type=6(runtime_call) addr=0x0000000117f30a2b offset=11] | [destination=0x0000000117915920]
         @0x0000000117f3098a: c021
relocInfo@0x0000000117f3098a [type=12(metadata) addr=0x0000000117f30a4c offset=33] | [metadata_addr=0x0000000117f30a4e *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f3098c: c030
relocInfo@0x0000000117f3098c [type=12(metadata) addr=0x0000000117f30a7c offset=48] | [metadata_addr=0x0000000117f30a7e *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f3098e: c071
relocInfo@0x0000000117f3098e [type=12(metadata) addr=0x0000000117f30aed offset=113] | [metadata_addr=0x0000000117f30aef *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f30990: a034
relocInfo@0x0000000117f30990 [type=10(poll) addr=0x0000000117f30b21 offset=52]
         @0x0000000117f30992: c003
relocInfo@0x0000000117f30992 [type=12(metadata) addr=0x0000000117f30b24 offset=3] | [metadata_addr=0x0000000117f30b26 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f30994: c01a
relocInfo@0x0000000117f30994 [type=12(metadata) addr=0x0000000117f30b3e offset=26] | [metadata_addr=0x0000000117f30b40 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f30996: c093
relocInfo@0x0000000117f30996 [type=12(metadata) addr=0x0000000117f30bd1 offset=147] | [metadata_addr=0x0000000117f30bd3 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f30998: a034
relocInfo@0x0000000117f30998 [type=10(poll) addr=0x0000000117f30c05 offset=52]
         @0x0000000117f3099a: c003
relocInfo@0x0000000117f3099a [type=12(metadata) addr=0x0000000117f30c08 offset=3] | [metadata_addr=0x0000000117f30c0a *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f3099c: c01a
relocInfo@0x0000000117f3099c [type=12(metadata) addr=0x0000000117f30c22 offset=26] | [metadata_addr=0x0000000117f30c24 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f3099e: b051
relocInfo@0x0000000117f3099e [type=11(poll_return) addr=0x0000000117f30c73 offset=81]
         @0x0000000117f309a0: 0015
relocInfo@0x0000000117f309a0 [type=0(none) addr=0x0000000117f30c88 offset=21]
         @0x0000000117f309a2: c05a
relocInfo@0x0000000117f309a2 [type=12(metadata) addr=0x0000000117f30ce2 offset=90] | [metadata_addr=0x0000000117f30ce4 *=0x0000000272f04000 offset=0]metadata_value=0x0000000272f04000: method data for {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f309a4: 1012
relocInfo@0x0000000117f309a4 [type=1(oop) addr=0x0000000117f30cf4 offset=18] | [oop_addr=0x0000000117f30cf6 *=0x000000018f500000 offset=0]
         @0x0000000117f309a6: 3413
relocInfo@0x0000000117f309a6 [type=3(opt_virtual_call) addr=0x0000000117f30d07 offset=19 format=1] | [destination=0x0000000117915c20 metadata=0x0000000000000000]
         @0x0000000117f309a8: c00f
relocInfo@0x0000000117f309a8 [type=12(metadata) addr=0x0000000117f30d16 offset=15] | [metadata_addr=0x0000000117f30d18 *=0x0000000272c8fa60 offset=0]metadata_value=0x0000000272c8fa60: {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f309aa: 6417
relocInfo@0x0000000117f309aa [type=6(runtime_call) addr=0x0000000117f30d2d offset=23 format=1] | [destination=0x000000011785a5c0]
         @0x0000000117f309ac: 640a
relocInfo@0x0000000117f309ac [type=6(runtime_call) addr=0x0000000117f30d37 offset=10 format=1] | [destination=0x0000000117860540]
         @0x0000000117f309ae: f8030e5fab6900017005
relocInfo@0x0000000117f309b6 [type=7(external_word) addr=0x0000000117f30d3c offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f309b8: 640e
relocInfo@0x0000000117f309b8 [type=6(runtime_call) addr=0x0000000117f30d4a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f309ba: 6406
relocInfo@0x0000000117f309ba [type=6(runtime_call) addr=0x0000000117f30d50 offset=6 format=1] | [destination=0x0000000117860540]
         @0x0000000117f309bc: f8030e5fab6900017005
relocInfo@0x0000000117f309c4 [type=7(external_word) addr=0x0000000117f30d55 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f309c6: 640e
relocInfo@0x0000000117f309c6 [type=6(runtime_call) addr=0x0000000117f30d63 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f309c8: 640f
relocInfo@0x0000000117f309c8 [type=6(runtime_call) addr=0x0000000117f30d72 offset=15 format=1] | [destination=0x0000000117860e40]
         @0x0000000117f309ca: f8030e5fab6900017005
relocInfo@0x0000000117f309d2 [type=7(external_word) addr=0x0000000117f30d77 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f309d4: 640e
relocInfo@0x0000000117f309d4 [type=6(runtime_call) addr=0x0000000117f30d85 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f309d6: c006
relocInfo@0x0000000117f309d6 [type=12(metadata) addr=0x0000000117f30d8b offset=6] | [metadata_addr=0x0000000117f30d8d *=0x0000000272c8fa60 offset=0]metadata_value=0x0000000272c8fa60: {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f309d8: 6417
relocInfo@0x0000000117f309d8 [type=6(runtime_call) addr=0x0000000117f30da2 offset=23 format=1] | [destination=0x000000011785a5c0]
         @0x0000000117f309da: 6413
relocInfo@0x0000000117f309da [type=6(runtime_call) addr=0x0000000117f30db5 offset=19 format=1] | [destination=0x0000000117860e40]
         @0x0000000117f309dc: f8030e5fab6900017005
relocInfo@0x0000000117f309e4 [type=7(external_word) addr=0x0000000117f30dba offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f309e6: 640e
relocInfo@0x0000000117f309e6 [type=6(runtime_call) addr=0x0000000117f30dc8 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f309e8: c006
relocInfo@0x0000000117f309e8 [type=12(metadata) addr=0x0000000117f30dce offset=6] | [metadata_addr=0x0000000117f30dd0 *=0x0000000272c8fa60 offset=0]metadata_value=0x0000000272c8fa60: {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
         @0x0000000117f309ea: 6417
relocInfo@0x0000000117f309ea [type=6(runtime_call) addr=0x0000000117f30de5 offset=23 format=1] | [destination=0x000000011785a5c0]
         @0x0000000117f309ec: f17c800a
relocInfo@0x0000000117f309ee [type=8(internal_word) addr=0x0000000117f30def offset=10 data=380] | [target=0x0000000117f30c73]
         @0x0000000117f309f0: 6411
relocInfo@0x0000000117f309f0 [type=6(runtime_call) addr=0x0000000117f30e00 offset=17 format=1] | [destination=0x0000000117917220]
         @0x0000000117f309f2: c005
relocInfo@0x0000000117f309f2 [type=12(metadata) addr=0x0000000117f30e05 offset=5] | [metadata_addr=0x0000000117f30e07 *=0x0000000000000000 offset=0]
         @0x0000000117f309f4: 640f
relocInfo@0x0000000117f309f4 [type=6(runtime_call) addr=0x0000000117f30e14 offset=15 format=1] | [destination=0x000000011785b880]
         @0x0000000117f309f6: 640d
relocInfo@0x0000000117f309f6 [type=6(runtime_call) addr=0x0000000117f30e21 offset=13 format=1] | [destination=0x000000011785fac0]
         @0x0000000117f309f8: 642e
relocInfo@0x0000000117f309f8 [type=6(runtime_call) addr=0x0000000117f30e4f offset=46 format=1] | [destination=0x0000000117861840]
         @0x0000000117f309fa: 0011
relocInfo@0x0000000117f309fa [type=0(none) addr=0x0000000117f30e60 offset=17]
         @0x0000000117f309fc: f801fd195005
relocInfo@0x0000000117f30a00 [type=5(static_stub) addr=0x0000000117f30e65 offset=5 data=-743] | [static_call=0x0000000117f30d07]
         @0x0000000117f30a02: c000
relocInfo@0x0000000117f30a02 [type=12(metadata) addr=0x0000000117f30e65 offset=0] | [metadata_addr=0x0000000117f30e67 *=0x0000000000000000 offset=0]
         @0x0000000117f30a04: 640a
relocInfo@0x0000000117f30a04 [type=6(runtime_call) addr=0x0000000117f30e6f offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x0000000117f30a06: 642d
relocInfo@0x0000000117f30a06 [type=6(runtime_call) addr=0x0000000117f30e9c offset=45 format=1] | [destination=0x000000011785e0e0]
         @0x0000000117f30a08: f8030e5fab6900017005
relocInfo@0x0000000117f30a10 [type=7(external_word) addr=0x0000000117f30ea1 offset=5 data={0e5fab690001}] | [target=0x000000010e5fab69]
         @0x0000000117f30a12: 640e
relocInfo@0x0000000117f30a12 [type=6(runtime_call) addr=0x0000000117f30eaf offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x0000000117f30a14: f801feae9006
relocInfo@0x0000000117f30a18 [type=9(section_word) addr=0x0000000117f30eb5 offset=6 data=-338] | [target=0x0000000117f30eb5]
         @0x0000000117f30a1a: 640c
relocInfo@0x0000000117f30a1a [type=6(runtime_call) addr=0x0000000117f30ec1 offset=12 format=1] | [destination=0x0000000117916860]
         @0x0000000117f30a1c: 0000
relocInfo@0x0000000117f30a1c [type=0(none) addr=0x0000000117f30ec1 offset=0]
         @0x0000000117f30a1e: 0000
relocInfo@0x0000000117f30a1e [type=0(none) addr=0x0000000117f30ec1 offset=0]
         @0x0000000117f30a20: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x0000000117f30a74, 0x0000000117f30d37 > < 0x0000000117f30a77, 0x0000000117f30d50 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
25.640 ms/op
# Warmup Iteration   3: 
============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 985 ------------------------
{method}
 - this oop:          0x0000000272c8fa60
 - method holder:     'org/jml/regression/linear/DoubleLinearRegression'
 - constants:         0x0000000272c8f518 constant pool [71]/operands[5] {0x0000000272c8f518} for 'org/jml/regression/linear/DoubleLinearRegression' cache=0x0000000272c8fe20
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([D[D)V'
 - max stack:         9
 - max locals:        16
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x000000011780de20
 - adapters:          AHE@0x00007fa51303fe70: 0xbbb00000 i2c: 0x0000000117885ee0 c2i: 0x0000000117885fbf c2iUV: 0x0000000117885f92 c2iNCI: 0x0000000117885ffc
 - compiled entry     0x0000000117f30a40
 - code size:         155
 - code start:        0x0000000272c8f928
 - code end (excl):   0x0000000272c8f9c3
 - method data:       0x0000000272f04000
 - checked ex length: 0
 - linenumber start:  0x0000000272c8f9c3
 - localvar length:   11
 - localvar start:    0x0000000272c8f9da
 - compiled code: nmethod   2731  982       3       org.jml.regression.linear.DoubleLinearRegression::fit (155 bytes)

------------------------ OptoAssembly for Compile_id = 985 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N827: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B63 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c     movq    R13, [RSI + #120 (8-bit)]	# ptr
020     movq    RBP, [RSI + #112 (8-bit)]	# ptr
024     movl    R12, [RSI + #64 (8-bit)]	# int
028     movq    RBX, [RSI + #104 (8-bit)]	# ptr
02c     movsd   XMM0, [RSI + #88 (8-bit)]	# double
031     movdq   R14, XMM0	# spill
036     movsd   XMM0, [RSI + #72 (8-bit)]	# double
03b     movsd   [rsp + #24], XMM0	# spill
041     movq    RDI, RSI	# spill
044     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
054     testq   R13, R13	# ptr
057     je     B63  P=0.001000 C=-1.000000

05d     B2: #	out( B88 B3 ) <- in( B1 )  Freq: 0.999
05d     movl    R11, [R13 + #8 (8-bit)]	# compressed klass ptr
061     cmpl    R11, narrowklass: precise klass org/jml/regression/linear/DoubleLinearRegression: 0x00007fa516d68a20:Constant:exact *	# compressed klass ptr
068     jne,u   B88  P=0.000001 C=-1.000000

06e     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06e     movq    R11, R13	# spill
071     # checkcastPP of R11

071     B4: #	out( B64 B5 ) <- in( B3 B63 )  Freq: 0.999999
071     testq   RBP, RBP	# ptr
074     je     B64  P=0.001000 C=-1.000000

07a     B5: #	out( B88 B6 ) <- in( B4 )  Freq: 0.998999
07a     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 2 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
087     jne,u   B88  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     movq    R9, RBP	# spill
090     # checkcastPP of R9

090     B7: #	out( B65 B8 ) <- in( B6 B64 )  Freq: 0.999998
090     testq   RBX, RBX	# ptr
093     je     B65  P=0.001000 C=-1.000000

099     B8: #	out( B88 B9 ) <- in( B7 )  Freq: 0.998998
099     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R10, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
0a7     jne,u   B88  P=0.000001 C=-1.000000

0ad     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0ad     # checkcastPP of RBX

0ad     B10: #	out( B89 B11 ) <- in( B9 B65 )  Freq: 0.999997
0ad     movl    R10, [R9 + #12 (8-bit)]	# range
0b1     NullCheck R9

0b1     B11: #	out( B90 B12 ) <- in( B10 )  Freq: 0.999996
0b1     movl    RDI, [RBX + #12 (8-bit)]	# range
0b4     NullCheck RBX

0b4     B12: #	out( B72 B13 ) <- in( B11 )  Freq: 0.999995
0b4     # TLS is in R15
0b4     xorl    RAX, RAX	# int
0b6     cmpl    R12, R10
0b9     jge     B72  P=0.000001 C=9950178.000000

0bf     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0bf     movl    R8, R12	# spill
0c2     incl    R8	# int
0c5     cmpl    R8, RAX
0c8     cmovllt R8, RAX	# max
0cc     cmpl    R8, R10
0cf     cmovlgt R8, R10	# min

0d3     B14: #	out( B66 B15 ) <- in( B13 B17 ) Loop( B14-B17 inner pre of N699) Freq: 1.99998
0d3     cmpl    R12, R10	# unsigned
0d6     jnb,u   B66  P=0.000001 C=-1.000000

0dc     B15: #	out( B69 B16 ) <- in( B14 )  Freq: 1.99998
0dc     movdq   XMM0, R14	# spill
0e1     vaddsd  XMM1, XMM0, [R9 + #16 + R12 << #3]
0e8     cmpl    R12, RDI	# unsigned
0eb     jnb,u   B69  P=0.000001 C=-1.000000

0f1     B16: #	out( B18 B17 ) <- in( B15 )  Freq: 1.99998
0f1     movsd   XMM0, [rsp + #24]	# spill
0f7     vaddsd  XMM2, XMM0, [RBX + #16 + R12 << #3]
0fe     incl    R12	# int
101     cmpl    R12, R8
104     jge,s   B18	# loop end  P=0.500000 C=9950178.000000

106     B17: #	out( B14 ) <- in( B16 )  Freq: 0.99999
106     movdq   R14, XMM1	# spill
10b     movsd   [rsp + #24], XMM2	# spill
111     jmp,s   B14

113     B18: #	out( B29 B19 ) <- in( B16 )  Freq: 0.99999
113     cmpl    R10, RDI
116     movl    RDX, R10	# spill
119     cmovlgt RDX, RDI	# min
11c     movl    R8, RDX	# spill
11f     addl    R8, #-7	# int
123     movl    RSI, #-2147483648	# int
128     cmpl    RDX, R8
12b     cmovll R8, RSI	# signed, int
12f     cmpl    R12, R8
132     jge     B29  P=0.000001 C=-1.000000

138     B19: #	out( B73 B20 ) <- in( B18 )  Freq: 0.999989
138     # castII of R12
138     cmpl    R12, R10	# unsigned
        nop 	# 5 bytes pad for loops and calls
140     jnb,u   B73  P=0.000001 C=-1.000000

146     B20: #	out( B74 B21 ) <- in( B19 )  Freq: 0.999988
146     cmpl    R12, RDI	# unsigned
149     jnb,u   B74  P=0.000001 C=-1.000000

14f     B21: #	out( B75 B22 ) <- in( B20 )  Freq: 0.999987
14f     movl    RCX, R12	# spill
152     addl    RCX, #7	# int
155     cmpl    RCX, RDI	# unsigned
157     jnb,u   B75  P=0.000001 C=-1.000000

15d     B22: #	out( B76 B23 ) <- in( B21 )  Freq: 0.999986
        nop 	# 3 bytes pad for loops and calls
160     cmpl    R12, RDI	# unsigned
163     jnb,u   B76  P=0.000001 C=-1.000000

169     B23: #	out( B77 B24 ) <- in( B22 )  Freq: 0.999985
169     cmpl    RCX, R10	# unsigned
16c     jnb,u   B77  P=0.000001 C=-1.000000

172     B24: #	out( B78 B25 ) <- in( B23 )  Freq: 0.999984
172     cmpl    R12, R10	# unsigned
175     jnb,u   B78  P=0.000001 C=-1.000000

17b     B25: #	out( B26 ) <- in( B24 )  Freq: 0.999983
17b     movl    RCX, #8000	# int

180     B26: #	out( B27 ) <- in( B25 B28 ) Loop( B26-B28 ) Freq: 986878
180     movl    RDX, R8	# spill
183     subl    RDX, R12	# int
186     cmpl    R8, R12
189     cmovll RDX, RAX	# signed, int
18c     cmpl    RDX, #8000	# unsigned
192     cmovlnbe RDX, RCX	# unsigned, int
195     addl    RDX, R12	# int
        nop 	# 8 bytes pad for loops and calls

1a0     B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N230 strip mined) Freq: 9.73945e+11
1a0     vaddsd  XMM0, XMM2, [RBX + #16 + R12 << #3]
1a7     vaddsd  XMM1, XMM1, [R9 + #16 + R12 << #3]
1ae     movslq  RSI, R12	# i2l
1b1     vaddsd  XMM1, XMM1, [R9 + #24 + RSI << #3]
1b8     vaddsd  XMM0, XMM0, [RBX + #24 + RSI << #3]
1be     vaddsd  XMM1, XMM1, [R9 + #32 + RSI << #3]
1c5     vaddsd  XMM0, XMM0, [RBX + #32 + RSI << #3]
1cb     vaddsd  XMM1, XMM1, [R9 + #40 + RSI << #3]
1d2     vaddsd  XMM0, XMM0, [RBX + #40 + RSI << #3]
1d8     vaddsd  XMM1, XMM1, [R9 + #48 + RSI << #3]
1df     vaddsd  XMM0, XMM0, [RBX + #48 + RSI << #3]
1e5     vaddsd  XMM1, XMM1, [R9 + #56 + RSI << #3]
1ec     vaddsd  XMM0, XMM0, [RBX + #56 + RSI << #3]
1f2     vaddsd  XMM1, XMM1, [R9 + #64 + RSI << #3]
1f9     vaddsd  XMM0, XMM0, [RBX + #64 + RSI << #3]
1ff     vaddsd  XMM1, XMM1, [R9 + #72 + RSI << #3]
206     vaddsd  XMM2, XMM0, [RBX + #72 + RSI << #3]
20c     addl    R12, #8	# int
210     cmpl    R12, RDX
213     jl,s   B27	# loop end  P=0.999999 C=9950178.000000

215     B28: #	out( B26 B29 ) <- in( B27 )  Freq: 986878
215     movq    RBP, [R15 + #304 (32-bit)]	# ptr
21c     testl   rax, [RBP]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:51 (line 15) L[0]=R11 L[1]=R9 L[2]=RBX L[3]=XMM1 L[4]=_ L[5]=XMM2 L[6]=_ L[7]=R12 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {r11=Oop r9=Oop rbx=Oop off=540/0x21c}
        nop 	# 1 bytes pad for loops and calls
220     cmpl    R12, R8
223     jl     B26  P=0.999999 C=9950178.000000

229     B29: #	out( B34 B30 ) <- in( B18 B28 )  Freq: 0.999984
229     cmpl    R12, R10
22c     jge,s   B34  P=0.500000 C=-1.000000

22e     B30: #	out( B31 ) <- in( B29 )  Freq: 0.499992
22e     # castII of R12
        nop 	# 2 bytes pad for loops and calls

230     B31: #	out( B67 B32 ) <- in( B30 B33 ) Loop( B31-B33 inner post of N699) Freq: 0.999982
230     cmpl    R12, R10	# unsigned
233     jnb,u   B67  P=0.000001 C=-1.000000

239     B32: #	out( B70 B33 ) <- in( B31 )  Freq: 0.999981
239     vaddsd  XMM1, XMM1, [R9 + #16 + R12 << #3]
240     cmpl    R12, RDI	# unsigned
243     jnb,u   B70  P=0.000001 C=-1.000000

249     B33: #	out( B31 B34 ) <- in( B32 )  Freq: 0.99998
249     vaddsd  XMM2, XMM2, [RBX + #16 + R12 << #3]
250     incl    R12	# int
253     cmpl    R12, R10
256     jl,s   B31	# loop end  P=0.500000 C=9950178.000000

258     B34: #	out( B87 B35 ) <- in( B72 B33 B29 )  Freq: 0.999983
258     cvtsi2sdl XMM0, R10	# i2d
25d     vdivsd  XMM1, XMM1, XMM0
261     vdivsd  XMM4, XMM2, XMM0
265     xorpd   XMM2, XMM2	# double 0.0
269     testl   R10, R10	# unsigned
26c     jbe,u   B87  P=0.000001 C=10001026.000000

272     B35: #	out( B79 B36 ) <- in( B34 )  Freq: 0.999982
272     movl    R8, R10	# spill
275     decl    R8	# int
278     cmpl    R8, R10	# unsigned
        nop 	# 5 bytes pad for loops and calls
280     jnb,u   B79  P=0.000001 C=-1.000000

286     B36: #	out( B79 B37 ) <- in( B35 )  Freq: 0.999981
286     testl   RDI, RDI	# unsigned
288     jbe,u   B79  P=0.000001 C=-1.000000

28e     B37: #	out( B79 B38 ) <- in( B36 )  Freq: 0.99998
28e     cmpl    R8, RDI	# unsigned
291     jnb,u   B79  P=0.000001 C=-1.000000

297     B38: #	out( B39 ) <- in( B37 )  Freq: 0.999979
297     movl    R12, RBX	# ptr -> int
29a     shrl    R12, #3
29e     andl    R12, #3	# int
2a2     movl    R8, #1	# int
2a8     subl    R8, R12	# int
2ab     andl    R8, #3	# int
2af     incl    R8	# int
2b2     cmpl    R8, R10
2b5     cmovlgt R8, R10	# min
2b9     xorl    RSI, RSI	# int
2bb     xorpd   XMM3, XMM3	# double 0.0

2bf     B39: #	out( B41 B40 ) <- in( B38 B40 ) Loop( B39-B40 inner pre of N529) Freq: 1.99996
2bf     movsd   XMM5, [RBX + #16 + RSI << #3]	# double
2c5     movsd   XMM6, [R9 + #16 + RSI << #3]	# double
2cc     vsubsd  XMM5, XMM5, XMM4
2d0     vsubsd  XMM0, XMM6, XMM1
2d4     vmulsd  XMM6, XMM0, XMM0
2d8     vmulsd  XMM0, XMM5, XMM0
2dc     vaddsd  XMM2, XMM2, XMM6
2e0     vaddsd  XMM3, XMM3, XMM0
2e4     movl    RDX, RSI	# spill
2e6     incl    RDX	# int
2e8     cmpl    RDX, R8
2eb     jge,s   B41	# loop end  P=0.500000 C=10001024.000000

2ed     B40: #	out( B39 ) <- in( B39 )  Freq: 0.999979
2ed     movl    RSI, RDX	# spill
2ef     jmp,s   B39

2f1     B41: #	out( B58 B42 ) <- in( B39 )  Freq: 0.999979
2f1     movl    RCX, R10	# spill
2f4     addl    RCX, #-15	# int
2f7     cmpl    RDX, RCX
2f9     jge     B58  P=0.000001 C=-1.000000

2ff     B42: #	out( B80 B43 ) <- in( B41 )  Freq: 0.999978
        nop 	# 1 bytes pad for loops and calls
300     cmpl    RDX, RDI	# unsigned
302     jnb,u   B80  P=0.000001 C=-1.000000

308     B43: #	out( B81 B44 ) <- in( B42 )  Freq: 0.999977
308     cmpl    RDX, R10	# unsigned
30b     jnb,u   B81  P=0.000001 C=-1.000000

311     B44: #	out( B82 B45 ) <- in( B43 )  Freq: 0.999976
311     cmpl    RDX, R10	# unsigned
314     jnb,u   B82  P=0.000001 C=-1.000000

31a     B45: #	out( B83 B46 ) <- in( B44 )  Freq: 0.999975
        nop 	# 6 bytes pad for loops and calls
320     cmpl    RDX, R10	# unsigned
323     jnb,u   B83  P=0.000001 C=-1.000000

329     B46: #	out( B84 B47 ) <- in( B45 )  Freq: 0.999974
329     addl    RSI, #16	# int
32c     cmpl    RSI, R10	# unsigned
32f     jnb,u   B84  P=0.000001 C=-1.000000

335     B47: #	out( B85 B48 ) <- in( B46 )  Freq: 0.999973
335     cmpl    RDX, RDI	# unsigned
337     jnb,u   B85  P=0.000001 C=-1.000000

33d     B48: #	out( B86 B49 ) <- in( B47 )  Freq: 0.999972
        nop 	# 3 bytes pad for loops and calls
340     cmpl    RSI, RDI	# unsigned
342     jnb,u   B86  P=0.000001 C=-1.000000

348     B49: #	out( B51 ) <- in( B48 )  Freq: 0.999971
348     replicateD XMM14,XMM4
34d     replicateD XMM0,XMM1
352     movl    R12, #16000	# int
358     jmp,s   B51

35a     B50: #	out( B51 ) <- in( B53 ) top-of-loop Freq: 986865
35a     movdq   XMM1, R8	# spill
35f     movdq   XMM4, RDI	# spill

364     B51: #	out( B52 ) <- in( B49 B50 ) Loop( B51-B50 ) Freq: 986866
364     movl    RSI, R10	# spill
367     subl    RSI, RDX	# int
369     addl    RSI, #-15	# int
36c     cmpl    RCX, RDX
36e     cmovll RSI, RAX	# signed, int
371     cmpl    RSI, #16000	# unsigned
377     cmovlnbe RSI, R12	# unsigned, int
37b     addl    RSI, RDX	# int
37d     movdq   R8, XMM1	# spill
382     movdq   RDI, XMM4	# spill
        nop 	# 9 bytes pad for loops and calls

390     B52: #	out( B52 B53 ) <- in( B51 B52 ) Loop( B52-B52 inner main of N307 strip mined) Freq: 9.73933e+11
390     load_vector XMM1,[RBX + #112 + RDX << #3]
396     load_vector XMM10,[RBX + #80 + RDX << #3]
39c     load_vector XMM12,[RBX + #48 + RDX << #3]
3a2     load_vector XMM13,[RBX + #16 + RDX << #3]
3a8     load_vector XMM5,[R9 + #112 + RDX << #3]
3af     load_vector XMM7,[R9 + #80 + RDX << #3]
3b6     load_vector XMM4,[R9 + #48 + RDX << #3]
3bd     load_vector XMM8,[R9 + #16 + RDX << #3]
3c4     vsubpd  XMM6,XMM1,XMM14	! sub packedD
3c9     vsubpd  XMM8,XMM8,XMM0	! sub packedD
3cd     vsubpd  XMM9,XMM4,XMM0	! sub packedD
3d1     vmulpd  XMM1,XMM8,XMM8	! mul packedD
3d6     vmulpd  XMM4,XMM9,XMM9	! mul packedD
3db     vsubpd  XMM11,XMM7,XMM0	! sub packedD
3df     vsubpd  XMM7,XMM5,XMM0	! sub packedD
3e3     vmulpd  XMM5,XMM11,XMM11	! mul packedD
3e8     vmulpd  XMM6,XMM6,XMM7	! mul packedD
3ec     vmulpd  XMM7,XMM7,XMM7	! mul packedD
3f0     vsubpd  XMM13,XMM13,XMM14	! sub packedD
3f5     vsubpd  XMM12,XMM12,XMM14	! sub packedD
3fa     vmulpd  XMM8,XMM13,XMM8	! mul packedD
3ff     vmulpd  XMM9,XMM12,XMM9	! mul packedD
404     vsubpd  XMM10,XMM10,XMM14	! sub packedD
409     vmulpd  XMM10,XMM10,XMM11	! mul packedD
40e     vector_reduction_double XMM2,XMM1 ; using XMM13, XMM15 as TEMP
432     vector_reduction_double XMM2,XMM4 ; using XMM1, XMM13 as TEMP
455     vector_reduction_double XMM2,XMM5 ; using XMM1, XMM4 as TEMP
475     vector_reduction_double XMM2,XMM7 ; using XMM1, XMM4 as TEMP
495     vector_reduction_double XMM3,XMM8 ; using XMM1, XMM4 as TEMP
4b7     vector_reduction_double XMM3,XMM9 ; using XMM1, XMM4 as TEMP
4d9     vector_reduction_double XMM3,XMM10 ; using XMM1, XMM4 as TEMP
4fb     vector_reduction_double XMM3,XMM6 ; using XMM12, XMM11 as TEMP
51f     addl    RDX, #16	# int
522     cmpl    RDX, RSI
524     jl     B52	# loop end  P=0.999999 C=10001024.000000

52a     B53: #	out( B50 B54 ) <- in( B52 )  Freq: 986866
52a     movq    RSI, [R15 + #304 (32-bit)]	# ptr
531     testl   rax, [RSI]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:128 (line 25) L[0]=R11 L[1]=R9 L[2]=RBX L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=R8 L[8]=_ L[9]=RDI L[10]=_ L[11]=XMM2 L[12]=_ L[13]=XMM3 L[14]=_ L[15]=RDX
        # OopMap {r11=Oop r9=Oop rbx=Oop off=1329/0x531}
533     cmpl    RDX, RCX
535     jl     B50  P=0.999999 C=10001024.000000

53b     B54: #	out( B57 B55 ) <- in( B53 )  Freq: 0.999971
53b     movl    RCX, R10	# spill
53e     addl    RCX, #-3	# int
541     cmpl    RDX, RCX
543     jge,s   B57  P=0.500000 C=-1.000000

545     B55: #	out( B56 ) <- in( B54 )  Freq: 0.499985
545     # castII of RDX
        nop 	# 3 bytes pad for loops and calls

548     B56: #	out( B56 B57 ) <- in( B55 B56 ) Loop( B56-B56 inner post of N1412) Freq: 0.999971
548     load_vector XMM1,[R9 + #16 + RDX << #3]
54f     load_vector XMM4,[RBX + #16 + RDX << #3]
555     vsubpd  XMM1,XMM1,XMM0	! sub packedD
559     vsubpd  XMM4,XMM4,XMM14	! sub packedD
55e     vmulpd  XMM5,XMM1,XMM1	! mul packedD
562     vmulpd  XMM1,XMM4,XMM1	! mul packedD
566     vector_reduction_double XMM2,XMM5 ; using XMM7, XMM6 as TEMP
586     vector_reduction_double XMM3,XMM1 ; using XMM5, XMM4 as TEMP
5a6     addl    RDX, #4	# int
5a9     cmpl    RDX, RCX
5ab     jl,s   B56	# loop end  P=0.500000 C=10001024.000000

5ad     B57: #	out( B58 ) <- in( B56 B54 )  Freq: 0.999971
5ad     movdq   XMM1, R8	# spill
5b2     movdq   XMM4, RDI	# spill

5b7     B58: #	out( B61 B59 ) <- in( B41 B57 )  Freq: 0.999972
5b7     cmpl    RDX, R10
5ba     jge,s   B61  P=0.500000 C=-1.000000

5bc     B59: #	out( B60 ) <- in( B58 )  Freq: 0.499986
5bc     # castII of RDX

5bc     B60: #	out( B60 B61 ) <- in( B59 B60 ) Loop( B60-B60 inner post of N529) Freq: 0.999972
5bc     movsd   XMM5, [R9 + #16 + RDX << #3]	# double
5c3     movsd   XMM6, [RBX + #16 + RDX << #3]	# double
5c9     vsubsd  XMM5, XMM5, XMM1
5cd     vsubsd  XMM0, XMM6, XMM4
5d1     vmulsd  XMM6, XMM5, XMM5
5d5     vmulsd  XMM0, XMM0, XMM5
5d9     vaddsd  XMM2, XMM2, XMM6
5dd     vaddsd  XMM3, XMM3, XMM0
5e1     incl    RDX	# int
5e3     cmpl    RDX, R10
5e6     jl,s   B60	# loop end  P=0.500000 C=10001024.000000

5e8     B61: #	out( B91 B62 ) <- in( B60 B58 B87 )  Freq: 0.999973
5e8     vdivsd  XMM0, XMM3, XMM2
5ec     movsd   [R11 + #24 (8-bit)], XMM0	# double ! Field: org/jml/regression/linear/DoubleLinearRegression.slope
5f2     NullCheck R11

5f2     B62: #	out( N827 ) <- in( B61 )  Freq: 0.999972
5f2     vmulsd  XMM0, XMM1, XMM0
5f6     vsubsd  XMM0, XMM4, XMM0
5fa     movsd   [R11 + #16 (8-bit)], XMM0	# double ! Field: org/jml/regression/linear/DoubleLinearRegression.intercept
600     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

615     ret

616     B63: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
616     xorl    R11, R11	# ptr
619     jmp     B4

61e     B64: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
61e     xorl    R9, R9	# ptr
621     jmp     B7

626     B65: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
626     xorl    RBX, RBX	# ptr
628     jmp     B10

62d     B66: #	out( B68 ) <- in( B14 )  Freq: 2.02654e-06
62d     movq    [rsp + #0], R14	# spill
631     movq    RBP, [rsp + #24]	# spill
636     jmp,s   B68

638     B67: #	out( B68 ) <- in( B31 )  Freq: 1.01326e-06
638     movsd   [rsp + #0], XMM1	# spill
63d     movdq   RBP, XMM2	# spill

642     B68: #	out( N827 ) <- in( B67 B66 )  Freq: 3.0398e-06
642     movl    RSI, #-28	# int
647     movq    [rsp + #8], R11	# spill
64c     movq    [rsp + #24], RBX	# spill
651     movq    [rsp + #40], R9	# spill
656     movl    [rsp + #36], R12	# spill
        nop 	# 1 bytes pad for loops and calls
65c     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:36 (line 16) L[0]=rsp + #8 L[1]=rsp + #40 L[2]=rsp + #24 L[3]=_ L[4]=_ L[5]=RBP L[6]=_ L[7]=rsp + #36 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #40 STK[3]=rsp + #36
        # OopMap {[8]=Oop [24]=Oop [40]=Oop off=1636/0x664}
664     stop	# ShouldNotReachHere

678     B69: #	out( B71 ) <- in( B15 )  Freq: 2.02654e-06
678     movsd   XMM0, [rsp + #24]	# spill
67e     movsd   [rsp + #0], XMM0	# spill
683     movdq   RBP, XMM1	# spill
688     jmp,s   B71

68a     B70: #	out( B71 ) <- in( B32 )  Freq: 1.01326e-06
68a     movsd   [rsp + #0], XMM2	# spill
68f     movdq   RBP, XMM1	# spill

694     B71: #	out( N827 ) <- in( B70 B69 )  Freq: 3.0398e-06
694     movl    RSI, #-28	# int
699     movq    [rsp + #8], R11	# spill
69e     movq    [rsp + #16], R9	# spill
6a3     movq    [rsp + #40], RBX	# spill
6a8     movl    [rsp + #36], R12	# spill
        nop 	# 3 bytes pad for loops and calls
6b0     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:44 (line 17) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #40 L[3]=RBP L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #36 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #40 STK[3]=rsp + #36
        # OopMap {[8]=Oop [16]=Oop [40]=Oop off=1720/0x6b8}
6b8     stop	# ShouldNotReachHere

6cc     B72: #	out( B34 ) <- in( B12 )  Freq: 1.01327e-06
6cc     movdq   XMM1, R14	# spill
6d1     movsd   XMM2, [rsp + #24]	# spill
6d7     jmp     B34

6dc     B73: #	out( N827 ) <- in( B19 )  Freq: 1.01327e-06
6dc     stop	# ShouldNotReachHere

6f0     B74: #	out( N827 ) <- in( B20 )  Freq: 1.01327e-06
6f0     stop	# ShouldNotReachHere

704     B75: #	out( N827 ) <- in( B21 )  Freq: 1.01327e-06
704     stop	# ShouldNotReachHere

718     B76: #	out( N827 ) <- in( B22 )  Freq: 1.01326e-06
718     stop	# ShouldNotReachHere

72c     B77: #	out( N827 ) <- in( B23 )  Freq: 1.01326e-06
72c     stop	# ShouldNotReachHere

740     B78: #	out( N827 ) <- in( B24 )  Freq: 1.01326e-06
740     stop	# ShouldNotReachHere

754     B79: #	out( N827 ) <- in( B37 B36 B35 )  Freq: 3.0265e-06
754     movl    RSI, #-138	# int
759     movq    RBP, R11	# spill
75c     movq    [rsp + #0], R9	# spill
760     movq    [rsp + #8], RBX	# spill
765     movsd   [rsp + #16], XMM1	# spill
76b     movsd   [rsp + #24], XMM4	# spill
771     movl    [rsp + #32], R10	# spill
        nop 	# 2 bytes pad for loops and calls
778     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:82 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=_ L[9]=rsp + #24 L[10]=_ L[11]=#0.000000D L[12]=_ L[13]=#0.000000D L[14]=_ L[15]=#0 STK[0]=#0 STK[1]=rsp + #32
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1920/0x780}
780     stop	# ShouldNotReachHere

794     B80: #	out( N827 ) <- in( B42 )  Freq: 1.01326e-06
794     stop	# ShouldNotReachHere

7a8     B81: #	out( N827 ) <- in( B43 )  Freq: 1.01326e-06
7a8     stop	# ShouldNotReachHere

7bc     B82: #	out( N827 ) <- in( B44 )  Freq: 1.01325e-06
7bc     stop	# ShouldNotReachHere

7d0     B83: #	out( N827 ) <- in( B45 )  Freq: 1.01325e-06
7d0     stop	# ShouldNotReachHere

7e4     B84: #	out( N827 ) <- in( B46 )  Freq: 1.01325e-06
7e4     stop	# ShouldNotReachHere

7f8     B85: #	out( N827 ) <- in( B47 )  Freq: 1.01325e-06
7f8     stop	# ShouldNotReachHere

80c     B86: #	out( N827 ) <- in( B48 )  Freq: 1.01325e-06
80c     stop	# ShouldNotReachHere

820     B87: #	out( B61 ) <- in( B34 )  Freq: 9.99983e-07
820     xorpd   XMM3, XMM3	# double 0.0
824     jmp     B61

829     B88: #	out( N827 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
829     movl    RSI, #-115	# int
82e     movq    [rsp + #0], RBX	# spill
832     movq    [rsp + #8], R14	# spill
837     movsd   XMM0, [rsp + #24]	# spill
83d     movsd   [rsp + #16], XMM0	# spill
843     movl    [rsp + #24], R12	# spill
848     movq    [rsp + #32], R13	# spill
        nop 	# 3 bytes pad for loops and calls
850     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:25 (line 15) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #16 L[6]=_ L[7]=rsp + #24 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=2136/0x858}
858     stop	# ShouldNotReachHere

86c     B89: #	out( N827 ) <- in( B10 )  Freq: 1.01328e-06
86c     movl    RSI, #-138	# int
871     movq    RBP, R11	# spill
874     movq    [rsp + #0], R9	# spill
878     movq    [rsp + #8], RBX	# spill
87d     movq    [rsp + #16], R14	# spill
882     movl    [rsp + #32], R12	# spill
        nop 	# 1 bytes pad for loops and calls
888     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:25 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=2192/0x890}
890     stop	# ShouldNotReachHere

8a4     B90: #	out( N827 ) <- in( B11 )  Freq: 1.01327e-06
8a4     movl    RSI, #-66	# int
8a9     movq    RBP, R11	# spill
8ac     movq    [rsp + #0], R9	# spill
8b0     movq    [rsp + #8], RBX	# spill
8b5     movq    [rsp + #16], R14	# spill
8ba     movl    [rsp + #32], R12	# spill
        nop 	# 1 bytes pad for loops and calls
8c0     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:25 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #24 L[6]=_ L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=2248/0x8c8}
8c8     stop	# ShouldNotReachHere

8dc     B91: #	out( N827 ) <- in( B61 )  Freq: 1.01325e-06
8dc     movl    RSI, #-10	# int
8e1     movdq   RBP, XMM0	# spill
        nop 	# 2 bytes pad for loops and calls
8e8     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:137 (line 31) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=#NULL STK[1]=RBP STK[2]=_
        # OopMap {off=2288/0x8f0}
8f0     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2739  985 %     4       org.jml.regression.linear.DoubleLinearRegression::fit @ 25 (155 bytes)
 total in heap  [0x000000011f393290,0x000000011f394530] = 4768
 relocation     [0x000000011f393408,0x000000011f393528] = 288
 main code      [0x000000011f393540,0x000000011f393e60] = 2336
 stub code      [0x000000011f393e60,0x000000011f393e78] = 24
 oops           [0x000000011f393e78,0x000000011f393e80] = 8
 metadata       [0x000000011f393e80,0x000000011f393e98] = 24
 scopes data    [0x000000011f393e98,0x000000011f394098] = 512
 scopes pcs     [0x000000011f394098,0x000000011f394508] = 1136
 dependencies   [0x000000011f394508,0x000000011f394510] = 8
 nul chk table  [0x000000011f394510,0x000000011f394530] = 32

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
 ;; N827: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f393540: ;   {runtime_call os::breakpoint()}
  0x000000011f393540: e85b 8adb | ee90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B63 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f393550: 8984 2400 | a0fe ff55 | 4883 ec40 | 4c8b 6e78 | 488b 6e70 | 448b 6640 | 488b 5e68 | c5fb 1046 
  0x000000011f393570: 58c4 c1f9 | 7ec6 c5fb | 1046 48c5 | fb11 4424 | 1848 8bfe | c5f8 7749 | baa0 5025 | 0e01 0000 
  0x000000011f393590: 0041 ffd2 | 4d85 ed0f | 84b9 0500 | 0045 8b5d 

  0x000000011f3935a0: ;   {metadata('org/jml/regression/linear/DoubleLinearRegression')}
  0x000000011f3935a0: 0841 81fb | 201d 1246 | 0f85 bb07 | 0000 4d8b | dd48 85ed | 0f84 a405 | 0000 448b | 5508 9090 
  0x000000011f3935c0: ;   {metadata({type array double})}
  0x000000011f3935c0: 4181 fac3 | 8010 460f | 859c 0700 | 004c 8bcd 
 ;; B7: #	out( B65 B8 ) <- in( B6 B64 )  Freq: 0.999998
  0x000000011f3935d0: 4885 db0f | 848d 0500 | 0044 8b53 | 0890 9090 

  0x000000011f3935e0: ;   {metadata({type array double})}
  0x000000011f3935e0: 4181 fac3 | 8010 460f | 857c 0700 

  0x000000011f3935ec: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f3935ec: 0045 8b51 

  0x000000011f3935f0: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
  0x000000011f3935f0: 0c8b 7b0c 
 ;; B12: #	out( B72 B13 ) <- in( B11 )  Freq: 0.999995
  0x000000011f3935f4: 33c0 453b | e20f 8d0d 

  0x000000011f3935fc: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f3935fc: 0600 0045 | 8bc4 41ff | c044 3bc0 | 440f 4cc0 | 453b c245 

  0x000000011f393610: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f393610: 0f4f c245 | 3be2 0f83 | 5105 0000 
 ;; B15: #	out( B69 B16 ) <- in( B14 )  Freq: 1.99998
  0x000000011f39361c: c4c1 f96e | c6c4 817b 

  0x000000011f393624: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f393624: 584c e110 | 443b e70f | 8387 0500 | 00c5 fb10 | 4424 18c4 | a17b 5854 

  0x000000011f39363c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f39363c: e310 41ff 

  0x000000011f393640: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f393640: c445 3be0 

  0x000000011f393644: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f393644: 7d0d c4c1 | f97e cec5 | fb11 5424 | 18eb c044 | 3bd7 418b | d20f 4fd7 | 448b c241 | 83c0 f9be 
  0x000000011f393664: 0000 0080 | 413b d044 | 0f4c c645 | 3be0 0f8d | f100 0000 
 ;; B19: #	out( B73 B20 ) <- in( B18 )  Freq: 0.999989
  0x000000011f393678: 453b e290 | 9090 9090 | 0f83 9605 | 0000 443b | e70f 83a1 | 0500 0041 | 8bcc 83c1 | 073b cf0f 
  0x000000011f393698: 83a7 0500 | 0090 9090 | 443b e70f | 83af 0500 | 0041 3bca | 0f83 ba05 | 0000 453b | e20f 83c5 
  0x000000011f3936b8: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x000000011f3936b8: 0500 00b9 | 401f 0000 
 ;; B26: #	out( B27 ) <- in( B25 B28 ) Loop( B26-B28 ) Freq: 986878
  0x000000011f3936c0: 418b d041 | 2bd4 453b | c40f 4cd0 | 81fa 401f | 0000 0f47 | d141 03d4 | 9090 9090 

  0x000000011f3936dc: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x000000011f3936dc: 9090 9090 
 ;; B27: #	out( B27 B28 ) <- in( B26 B27 ) Loop( B27-B27 inner main of N230 strip mined) Freq: 9.73945e+11
  0x000000011f3936e0: c4a1 6b58 | 44e3 10c4 | 8173 584c | e110 4963 | f4c4 c173 | 584c f118 | c5fb 5844 | f318 c4c1 
  0x000000011f393700: 7358 4cf1 | 20c5 fb58 | 44f3 20c4 | c173 584c | f128 c5fb | 5844 f328 | c4c1 7358 | 4cf1 30c5 
  0x000000011f393720: fb58 44f3 | 30c4 c173 | 584c f138 | c5fb 5844 | f338 c4c1 | 7358 4cf1 | 40c5 fb58 | 44f3 40c4 
  0x000000011f393740: c173 584c 

  0x000000011f393744: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f393744: f148 c5fb 

  0x000000011f393748: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f393748: 5854 f348 

  0x000000011f39374c: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f39374c: 4183 c408 | 443b e27c 

  0x000000011f393754: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f393754: 8b49 8baf 

  0x000000011f393758: ; ImmutableOopMap {r11=Oop r9=Oop rbx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x000000011f393758: 3001 0000 

  0x000000011f39375c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x000000011f39375c: 8545 0090 | 453b e00f | 8c57 ffff | ff45 3be2 

  0x000000011f39376c: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f39376c: 7d2a 9090 
 ;; B31: #	out( B67 B32 ) <- in( B30 B33 ) Loop( B31-B33 inner post of N699) Freq: 0.999982
  0x000000011f393770: 453b e20f | 83ff 0300 | 00c4 8173 

  0x000000011f39377c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f39377c: 584c e110 | 443b e70f | 8341 0400 | 00c4 a16b 

  0x000000011f39378c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f39378c: 5854 e310 

  0x000000011f393790: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f393790: 41ff c445 

  0x000000011f393794: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f393794: 3be2 7cd8 
 ;; B34: #	out( B87 B35 ) <- in( B72 B33 B29 )  Freq: 0.999983
  0x000000011f393798: c4c1 7b2a 

  0x000000011f39379c: ;*i2d {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@57 (line 20)
  0x000000011f39379c: c2c5 f35e 

  0x000000011f3937a0: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
  0x000000011f3937a0: c8c5 eb5e 

  0x000000011f3937a4: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@66 (line 21)
  0x000000011f3937a4: e0c5 e957 | d245 85d2 | 0f86 ae05 

  0x000000011f3937b0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f3937b0: 0000 458b | c241 ffc8 | 453b c290 | 9090 9090 | 0f83 ce04 | 0000 85ff | 0f86 c604 | 0000 443b 
  0x000000011f3937d0: c70f 83bd | 0400 0044 | 8be3 41c1 | ec03 4183 | e403 41b8 | 0100 0000 | 452b c441 | 83e0 0341 
  0x000000011f3937f0: ffc0 453b | c245 0f4f | c233 f6c5 

  0x000000011f3937fc: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f3937fc: e157 dbc5 | fb10 6cf3 | 10c4 c17b | 1074 f110 | c5d3 5cec 

  0x000000011f393810: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f393810: c5cb 5cc1 | c5fb 59f0 | c5d3 59c0 

  0x000000011f39381c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f39381c: c5eb 58d6 

  0x000000011f393820: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f393820: c5e3 58d8 

  0x000000011f393824: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f393824: 8bd6 ffc2 | 413b d07d 

  0x000000011f39382c: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f39382c: 048b f2eb | ce41 8bca | 83c1 f13b | d10f 8db8 | 0200 0090 | 3bd7 0f83 | 8c04 0000 
 ;; B43: #	out( B81 B44 ) <- in( B42 )  Freq: 0.999977
  0x000000011f393848: 413b d20f | 8397 0400 | 0041 3bd2 | 0f83 a204 | 0000 9090 | 9090 9090 | 413b d20f | 83a7 0400 
  0x000000011f393868: 0083 c610 | 413b f20f | 83af 0400 | 003b d70f | 83bb 0400 | 0090 9090 | 3bf7 0f83 

  0x000000011f393884: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x000000011f393884: c404 0000 
 ;; B49: #	out( B51 ) <- in( B48 )  Freq: 0.999971
  0x000000011f393888: c462 7d19 | f4c4 e27d | 19c1 41bc | 803e 0000 | eb0a c4c1 | f96e c8c4 | e1f9 6ee7 
 ;; B51: #	out( B52 ) <- in( B49 B50 ) Loop( B51-B50 ) Freq: 986866
  0x000000011f3938a4: 418b f22b | f283 c6f1 | 3bca 0f4c | f081 fe80 | 3e00 0041 | 0f47 f403 | f2c4 c1f9 | 7ec8 c4e1 
  0x000000011f3938c4: f97e e790 | 9090 9090 

  0x000000011f3938cc: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f3938cc: 9090 9090 
 ;; B52: #	out( B52 B53 ) <- in( B51 B52 ) Loop( B52-B52 inner main of N307 strip mined) Freq: 9.73933e+11
  0x000000011f3938d0: c5fe 6f4c | d370 c57e | 6f54 d350 | c57e 6f64 | d330 c57e | 6f6c d310 | c4c1 7e6f | 6cd1 70c4 
  0x000000011f3938f0: c17e 6f7c | d150 c4c1 | 7e6f 64d1 | 30c4 417e | 6f44 d110 | c4c1 755c | f6c5 3d5c | c0c5 5d5c 
  0x000000011f393910: c8c4 c13d | 59c8 c4c1 | 3559 e1c5 | 455c d8c5 

  0x000000011f393920: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f393920: d55c f8c4 | c125 59eb | c5cd 59f7 | c5c5 59ff | c441 155c | eec4 411d | 5ce6 c441 | 1559 c0c4 
  0x000000011f393940: 411d 59c9 | c441 2d5c | d6c4 412d | 59d3 c5eb | 58d1 c579 | 70f9 0ec4 | c16b 58d7 | c4c3 7d19 
  0x000000011f393960: cf01 c4c1 | 6b58 d7c4 | 4179 70ef | 0ec4 c16b | 58d5 c5eb | 58d4 c579 | 70ec 0ec4 | c16b 58d5 
  0x000000011f393980: c4c3 7d19 | e501 c4c1 | 6b58 d5c4 | c179 70cd | 0ec5 eb58 | d1c5 eb58 | d5c5 f970 | e50e c5eb 
  0x000000011f3939a0: 58d4 c4e3 | 7d19 ec01 | c5eb 58d4 | c5f9 70cc | 0ec5 eb58 | d1c5 eb58 | d7c5 f970 | e70e c5eb 
  0x000000011f3939c0: 58d4 c4e3 | 7d19 fc01 | c5eb 58d4 | c5f9 70cc | 0ec5 eb58 

  0x000000011f3939d4: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f3939d4: d1c4 c163 | 58d8 c4c1 | 7970 e00e | c5e3 58dc | c463 7d19 | c401 c5e3 | 58dc c5f9 | 70cc 0ec5 
  0x000000011f3939f4: e358 d9c4 | c163 58d9 | c4c1 7970 | e10e c5e3 | 58dc c463 | 7d19 cc01 | c5e3 58dc | c5f9 70cc 
  0x000000011f393a14: 0ec5 e358 | d9c4 c163 | 58da c4c1 | 7970 e20e | c5e3 58dc | c463 7d19 | d401 c5e3 | 58dc c5f9 
  0x000000011f393a34: 70cc 0ec5 | e358 d9c5 | e358 dec5 | 7970 de0e | c4c1 6358 | dbc4 c37d | 19f3 01c4 | c163 58db 
  0x000000011f393a54: c441 7970 | e30e c4c1 

  0x000000011f393a5c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f393a5c: 6358 dc83 

  0x000000011f393a60: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f393a60: c210 3bd6 | 0f8c 66fe 

  0x000000011f393a68: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f393a68: ffff 498b | b730 0100 

  0x000000011f393a70: ; ImmutableOopMap {r11=Oop r9=Oop rbx=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {poll}
  0x000000011f393a70: 0085 063b | d10f 8c1f | feff ff41 | 8bca 83c1 | fd3b d17d 

  0x000000011f393a84: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f393a84: 6890 9090 
 ;; B56: #	out( B56 B57 ) <- in( B55 B56 ) Loop( B56-B56 inner post of N1412) Freq: 0.999971
  0x000000011f393a88: c4c1 7e6f | 4cd1 10c5 | fe6f 64d3 | 10c5 f55c 

  0x000000011f393a98: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f393a98: c8c4 c15d | 5ce6 c5f5 | 59e9 c5dd | 59c9 c5eb | 58d5 c5f9 | 70f5 0ec5 | eb58 d6c4 | e37d 19ee 
  0x000000011f393ab8: 01c5 eb58 | d6c5 f970 | fe0e c5eb 

  0x000000011f393ac4: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f393ac4: 58d7 c5e3 | 58d9 c5f9 | 70e1 0ec5 | e358 dcc4 | e37d 19cc | 01c5 e358 | dcc5 f970 | ec0e c5e3 
  0x000000011f393ae4: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f393ae4: 58dd 83c2 

  0x000000011f393ae8: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f393ae8: 043b d17c 

  0x000000011f393aec: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f393aec: 9bc4 c1f9 | 6ec8 c4e1 | f96e e741 

  0x000000011f393af8: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f393af8: 3bd2 7d2c 
 ;; B59: #	out( B60 ) <- in( B58 )  Freq: 0.499986
 ;; B60: #	out( B60 B61 ) <- in( B59 B60 ) Loop( B60-B60 inner post of N529) Freq: 0.999972
  0x000000011f393afc: c4c1 7b10 | 6cd1 10c5 | fb10 74d3 | 10c5 d35c 

  0x000000011f393b0c: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f393b0c: e9c5 cb5c | c4c5 d359 | f5c5 fb59 | c5c5 eb58 

  0x000000011f393b1c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f393b1c: d6c5 e358 

  0x000000011f393b20: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f393b20: d8ff c241 

  0x000000011f393b24: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f393b24: 3bd2 7cd4 
 ;; B61: #	out( B91 B62 ) <- in( B60 B58 B87 )  Freq: 0.999973
  0x000000011f393b28: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
  0x000000011f393b28: c5e3 5ec2 

  0x000000011f393b2c: ; implicit exception: dispatches to 0x000000011f393e1c
  0x000000011f393b2c: c4c1 7b11 

  0x000000011f393b30: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f393b30: 4318 c5f3 | 59c0 c5db | 5cc0 c4c1 

  0x000000011f393b3c: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
  0x000000011f393b3c: 7b11 4310 | c5f8 7748 | 83c4 405d 

  0x000000011f393b48: ;   {poll_return}
  0x000000011f393b48: 493b a728 | 0100 000f | 87ef 0200 | 00c3 4533 | dbe9 53fa | ffff 4533 | c9e9 6afa | ffff 33db 
  0x000000011f393b68: e980 faff | ff4c 8934 | 2448 8b6c | 2418 eb0a 
 ;; B67: #	out( B68 ) <- in( B31 )  Freq: 1.01326e-06
  0x000000011f393b78: c5fb 110c | 24c4 e1f9 | 7ed5 bee4 | ffff ff4c | 895c 2408 | 4889 5c24 | 184c 894c | 2428 4489 
  0x000000011f393b98: 6424 2490 

  0x000000011f393b9c: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393b9c: c5f8 77e8 

  0x000000011f393ba0: ; ImmutableOopMap {[8]=Oop [24]=Oop [40]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x000000011f393ba0: 9c29 58f8 

  0x000000011f393ba4: ;   {external_word}
  0x000000011f393ba4: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393bb0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393bb0: e4f0 e899 

  0x000000011f393bb4: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
  0x000000011f393bb4: 13c2 eef4 
 ;; B69: #	out( B71 ) <- in( B15 )  Freq: 2.02654e-06
  0x000000011f393bb8: c5fb 1044 | 2418 c5fb | 1104 24c4 | e1f9 7ecd | eb0a c5fb | 1114 24c4 | e1f9 7ecd 
 ;; B71: #	out( N827 ) <- in( B70 B69 )  Freq: 3.0398e-06
  0x000000011f393bd4: bee4 ffff | ff4c 895c | 2408 4c89 | 4c24 1048 | 895c 2428 | 4489 6424 | 2490 9090 

  0x000000011f393bf0: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393bf0: c5f8 77e8 

  0x000000011f393bf4: ; ImmutableOopMap {[8]=Oop [16]=Oop [40]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f393bf4: 4829 58f8 

  0x000000011f393bf8: ;   {external_word}
  0x000000011f393bf8: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393c04: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c04: e4f0 e845 

  0x000000011f393c08: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
  0x000000011f393c08: 13c2 eef4 
 ;; B72: #	out( B34 ) <- in( B12 )  Freq: 1.01327e-06
  0x000000011f393c0c: c4c1 f96e | cec5 fb10 | 5424 18e9 | 7cfb ffff 
 ;; B73: #	out( N827 ) <- in( B19 )  Freq: 1.01327e-06
  0x000000011f393c1c: ;   {external_word}
  0x000000011f393c1c: 48bf a66d | 6f0e 0100 | 0000 4883 

  0x000000011f393c28: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c28: e4f0 e821 | 13c2 eef4 
 ;; B74: #	out( N827 ) <- in( B20 )  Freq: 1.01327e-06
  0x000000011f393c30: ;   {external_word}
  0x000000011f393c30: 48bf a66d | 6f0e 0100 | 0000 4883 

  0x000000011f393c3c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c3c: e4f0 e80d | 13c2 eef4 
 ;; B75: #	out( N827 ) <- in( B21 )  Freq: 1.01327e-06
  0x000000011f393c44: ;   {external_word}
  0x000000011f393c44: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393c50: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c50: e4f0 e8f9 | 12c2 eef4 
 ;; B76: #	out( N827 ) <- in( B22 )  Freq: 1.01326e-06
  0x000000011f393c58: ;   {external_word}
  0x000000011f393c58: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393c64: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c64: e4f0 e8e5 | 12c2 eef4 
 ;; B77: #	out( N827 ) <- in( B23 )  Freq: 1.01326e-06
  0x000000011f393c6c: ;   {external_word}
  0x000000011f393c6c: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393c78: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c78: e4f0 e8d1 | 12c2 eef4 
 ;; B78: #	out( N827 ) <- in( B24 )  Freq: 1.01326e-06
  0x000000011f393c80: ;   {external_word}
  0x000000011f393c80: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393c8c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393c8c: e4f0 e8bd 

  0x000000011f393c90: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f393c90: 12c2 eef4 
 ;; B79: #	out( N827 ) <- in( B37 B36 B35 )  Freq: 3.0265e-06
  0x000000011f393c94: be76 ffff | ff49 8beb | 4c89 0c24 | 4889 5c24 | 08c5 fb11 | 4c24 10c5 | fb11 6424 | 1844 8954 
  0x000000011f393cb4: 2420 9090 

  0x000000011f393cb8: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393cb8: c5f8 77e8 

  0x000000011f393cbc: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f393cbc: 8028 58f8 

  0x000000011f393cc0: ;   {external_word}
  0x000000011f393cc0: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393ccc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393ccc: e4f0 e87d 

  0x000000011f393cd0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f393cd0: 12c2 eef4 
 ;; B80: #	out( N827 ) <- in( B42 )  Freq: 1.01326e-06
  0x000000011f393cd4: ;   {external_word}
  0x000000011f393cd4: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393ce0: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393ce0: e4f0 e869 | 12c2 eef4 
 ;; B81: #	out( N827 ) <- in( B43 )  Freq: 1.01326e-06
  0x000000011f393ce8: ;   {external_word}
  0x000000011f393ce8: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393cf4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393cf4: e4f0 e855 | 12c2 eef4 
 ;; B82: #	out( N827 ) <- in( B44 )  Freq: 1.01325e-06
  0x000000011f393cfc: ;   {external_word}
  0x000000011f393cfc: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393d08: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393d08: e4f0 e841 | 12c2 eef4 
 ;; B83: #	out( N827 ) <- in( B45 )  Freq: 1.01325e-06
  0x000000011f393d10: ;   {external_word}
  0x000000011f393d10: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393d1c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393d1c: e4f0 e82d | 12c2 eef4 
 ;; B84: #	out( N827 ) <- in( B46 )  Freq: 1.01325e-06
  0x000000011f393d24: ;   {external_word}
  0x000000011f393d24: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393d30: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393d30: e4f0 e819 | 12c2 eef4 
 ;; B85: #	out( N827 ) <- in( B47 )  Freq: 1.01325e-06
  0x000000011f393d38: ;   {external_word}
  0x000000011f393d38: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393d44: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393d44: e4f0 e805 | 12c2 eef4 
 ;; B86: #	out( N827 ) <- in( B48 )  Freq: 1.01325e-06
  0x000000011f393d4c: ;   {external_word}
  0x000000011f393d4c: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f393d58: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393d58: e4f0 e8f1 | 11c2 eef4 
 ;; B87: #	out( B61 ) <- in( B34 )  Freq: 9.99983e-07
  0x000000011f393d60: c5e1 57db | e9bf fdff | ffbe 8dff | ffff 4889 | 1c24 4c89 | 7424 08c5 | fb10 4424 | 18c5 fb11 
  0x000000011f393d80: 4424 1044 | 8964 2418 | 4c89 6c24 | 2090 9090 

  0x000000011f393d90: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393d90: c5f8 77e8 

  0x000000011f393d94: ; ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f393d94: a827 58f8 

  0x000000011f393d98: ;   {external_word}
  0x000000011f393d98: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393da4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393da4: e4f0 e8a5 | 11c2 eef4 
 ;; B89: #	out( N827 ) <- in( B10 )  Freq: 1.01328e-06
  0x000000011f393dac: be76 ffff | ff49 8beb | 4c89 0c24 | 4889 5c24 | 084c 8974 | 2410 4489 | 6424 2090 

  0x000000011f393dc8: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393dc8: c5f8 77e8 

  0x000000011f393dcc: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f393dcc: 7027 58f8 

  0x000000011f393dd0: ;   {external_word}
  0x000000011f393dd0: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393ddc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393ddc: e4f0 e86d | 11c2 eef4 
 ;; B90: #	out( N827 ) <- in( B11 )  Freq: 1.01327e-06
  0x000000011f393de4: bebe ffff | ff49 8beb | 4c89 0c24 | 4889 5c24 | 084c 8974 | 2410 4489 | 6424 2090 

  0x000000011f393e00: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393e00: c5f8 77e8 

  0x000000011f393e04: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
  0x000000011f393e04: 3827 58f8 

  0x000000011f393e08: ;   {external_word}
  0x000000011f393e08: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393e14: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393e14: e4f0 e835 

  0x000000011f393e18: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f393e18: 11c2 eef4 
 ;; B91: #	out( N827 ) <- in( B61 )  Freq: 1.01325e-06
  0x000000011f393e1c: bef6 ffff | ffc4 e1f9 | 7ec5 9090 

  0x000000011f393e28: ;   {runtime_call UncommonTrapBlob}
  0x000000011f393e28: c5f8 77e8 

  0x000000011f393e2c: ; ImmutableOopMap {}
                      ;*putfield slope {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f393e2c: 1027 58f8 

  0x000000011f393e30: ;   {external_word}
  0x000000011f393e30: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f393e3c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f393e3c: e4f0 e80d 

  0x000000011f393e40: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f393e40: 11c2 eef4 

  0x000000011f393e44: ;   {internal_word}
  0x000000011f393e44: 49ba 483b | 391f 0100 | 0000 4d89 | 97e8 0300 

  0x000000011f393e54: ;   {runtime_call SafepointBlob}
  0x000000011f393e54: 00e9 c633 | 58f8 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011f393e60: ;   {no_reloc}
  0x000000011f393e60: e9bb d24c | f8e8 0000 | 0000 4883 

  0x000000011f393e6c: ;   {runtime_call DeoptimizationBlob}
  0x000000011f393e6c: 2c24 05e9 | ec29 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011f393e78:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011f393e80:   0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
  0x000000011f393e88:   0x0000000230840618 {type array double}
  0x000000011f393e90:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011f39353f offset=ffffffff bits=0):
PcDesc(pc=0x000000011f3935ed offset=ad bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
PcDesc(pc=0x000000011f3935f1 offset=b1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
PcDesc(pc=0x000000011f3935f4 offset=b4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f3935ff offset=bf bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f393613 offset=d3 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f393628 offset=e8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f39363e offset=fe bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f393641 offset=101 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f393646 offset=106 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f3936bb offset=17b bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f3936e0 offset=1a0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
PcDesc(pc=0x000000011f393746 offset=206 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f39374c offset=20c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f393750 offset=210 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f393755 offset=215 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f39375c offset=21c bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg r9 [18],oop
    - l2: reg rbx [6],oop
    - l3: 0
    - l4: reg xmm1 [64],double
    - l5: 0
    - l6: reg xmm2 [80],double
    - l7: reg r12 [24],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f39375f offset=21f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f393770 offset=230 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f393780 offset=240 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f393790 offset=250 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f393793 offset=253 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f393798 offset=258 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f39379d offset=25d bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@57 (line 20)
PcDesc(pc=0x000000011f3937a1 offset=261 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
PcDesc(pc=0x000000011f3937a5 offset=265 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@66 (line 21)
PcDesc(pc=0x000000011f3937b2 offset=272 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f3937ff offset=2bf bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f393814 offset=2d4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f393820 offset=2e0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f393824 offset=2e4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f393828 offset=2e8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f39382d offset=2ed bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f393888 offset=348 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f3938d0 offset=390 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f393923 offset=3e3 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f3939d5 offset=495 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f393a5f offset=51f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f393a62 offset=522 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f393a6a offset=52a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f393a71 offset=531 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg r9 [18],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg r8 [16],double
    - l9: 0
    - l10: reg rdi [14],double
    - l11: 0
    - l12: reg xmm2 [80],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rdx [4],int
PcDesc(pc=0x000000011f393a73 offset=533 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f393a88 offset=548 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f393a99 offset=559 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f393ac6 offset=586 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f393ae6 offset=5a6 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f393ae9 offset=5a9 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f393aed offset=5ad bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f393afc offset=5bc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f393b0d offset=5cd bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f393b1d offset=5dd bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f393b21 offset=5e1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f393b23 offset=5e3 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f393b28 offset=5e8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f393b2c offset=5ec bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
PcDesc(pc=0x000000011f393b32 offset=5f2 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f393b40 offset=600 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
PcDesc(pc=0x000000011f393ba4 offset=664 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
   Locals
    - l0: stack[8],oop
    - l1: stack[40],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],double
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
PcDesc(pc=0x000000011f393bb8 offset=678 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
PcDesc(pc=0x000000011f393bf8 offset=6b8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[40],oop
    - l3: 0
    - l4: reg rbp [10],double
    - l5: empty
    - l6: empty
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
PcDesc(pc=0x000000011f393c0c offset=6cc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
PcDesc(pc=0x000000011f393c94 offset=754 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f393cc0 offset=780 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: 0.000000
    - l13: 0
    - l14: 0.000000
    - l15: 0
   Expression stack
    - @0: 0
    - @1: stack[32]
PcDesc(pc=0x000000011f393cd4 offset=794 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f393d98 offset=858 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: 0
    - l4: stack[8],double
    - l5: 0
    - l6: stack[16],double
    - l7: stack[24]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f393dd0 offset=890 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: stack[16],double
    - l5: 0
    - l6: stack[24],double
    - l7: stack[32]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f393e08 offset=8c8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: stack[16],double
    - l5: 0
    - l6: stack[24],double
    - l7: stack[32]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f393e1c offset=8dc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f393e30 offset=8f0 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: NULL
    - @1: 0
    - @2: reg rbp [10],double
PcDesc(pc=0x000000011f393e44 offset=904 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f393e79 offset=939 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 9 OopMaps

ImmutableOopMap {r11=Oop r9=Oop rbx=Oop } pc offsets: 540 1329 
ImmutableOopMap {[8]=Oop [24]=Oop [40]=Oop } pc offsets: 1636 
ImmutableOopMap {[8]=Oop [16]=Oop [40]=Oop } pc offsets: 1720 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1920 
ImmutableOopMap {rbp=Oop [0]=Oop [32]=Oop } pc offsets: 2136 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 2192 2248 
ImmutableOopMap {} pc offsets: 2288 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011f3935ed offset=ad):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
ScopeDesc(pc=0x000000011f3935f1 offset=b1):
   org.jml.regression.linear.DoubleLinearRegression::fit@28 (line 15)
ScopeDesc(pc=0x000000011f3935f4 offset=b4):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f3935ff offset=bf):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f393613 offset=d3):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f393628 offset=e8):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f39363e offset=fe):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f393641 offset=101):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f393646 offset=106):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f3936bb offset=17b):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f3936e0 offset=1a0):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x000000011f393746 offset=206):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f39374c offset=20c):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f393750 offset=210):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f393755 offset=215):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f39375c offset=21c):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg r9 [18],oop
    - l2: reg rbx [6],oop
    - l3: 0
    - l4: reg xmm1 [64],double
    - l5: 0
    - l6: reg xmm2 [80],double
    - l7: reg r12 [24],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f39375f offset=21f):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f393770 offset=230):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f393780 offset=240):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f393790 offset=250):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f393793 offset=253):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f393798 offset=258):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f39379d offset=25d):
   org.jml.regression.linear.DoubleLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x000000011f3937a1 offset=261):
   org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
ScopeDesc(pc=0x000000011f3937a5 offset=265):
   org.jml.regression.linear.DoubleLinearRegression::fit@66 (line 21)
ScopeDesc(pc=0x000000011f3937b2 offset=272):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f3937ff offset=2bf):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f393814 offset=2d4):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f393820 offset=2e0):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f393824 offset=2e4):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f393828 offset=2e8):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f39382d offset=2ed):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f393888 offset=348):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f3938d0 offset=390):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f393923 offset=3e3):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f3939d5 offset=495):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f393a5f offset=51f):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f393a62 offset=522):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f393a6a offset=52a):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f393a71 offset=531):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg r9 [18],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg r8 [16],double
    - l9: 0
    - l10: reg rdi [14],double
    - l11: 0
    - l12: reg xmm2 [80],double
    - l13: 0
    - l14: reg xmm3 [96],double
    - l15: reg rdx [4],int
ScopeDesc(pc=0x000000011f393a73 offset=533):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f393a88 offset=548):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f393a99 offset=559):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f393ac6 offset=586):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f393ae6 offset=5a6):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f393ae9 offset=5a9):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f393aed offset=5ad):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f393afc offset=5bc):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f393b0d offset=5cd):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f393b1d offset=5dd):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f393b21 offset=5e1):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f393b23 offset=5e3):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f393b28 offset=5e8):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f393b2c offset=5ec):
   org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
ScopeDesc(pc=0x000000011f393b32 offset=5f2):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x000000011f393b40 offset=600):
   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
ScopeDesc(pc=0x000000011f393ba4 offset=664):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
   Locals
    - l0: stack[8],oop
    - l1: stack[40],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],double
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
ScopeDesc(pc=0x000000011f393bb8 offset=678):
   org.jml.regression.linear.DoubleLinearRegression::fit@36 (line 16)
ScopeDesc(pc=0x000000011f393bf8 offset=6b8):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
   Locals
    - l0: stack[8],oop
    - l1: stack[16],oop
    - l2: stack[40],oop
    - l3: 0
    - l4: reg rbp [10],double
    - l5: empty
    - l6: empty
    - l7: stack[36]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[40],oop
    - @3: stack[36]
ScopeDesc(pc=0x000000011f393c0c offset=6cc):
   org.jml.regression.linear.DoubleLinearRegression::fit@44 (line 17)
ScopeDesc(pc=0x000000011f393c94 offset=754):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f393cc0 offset=780):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: 0.000000
    - l13: 0
    - l14: 0.000000
    - l15: 0
   Expression stack
    - @0: 0
    - @1: stack[32]
ScopeDesc(pc=0x000000011f393cd4 offset=794):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f393d98 offset=858):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: 0
    - l4: stack[8],double
    - l5: 0
    - l6: stack[16],double
    - l7: stack[24]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f393dd0 offset=890):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: stack[16],double
    - l5: 0
    - l6: stack[24],double
    - l7: stack[32]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f393e08 offset=8c8):
   org.jml.regression.linear.DoubleLinearRegression::fit@25 (line 15)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: stack[16],double
    - l5: 0
    - l6: stack[24],double
    - l7: stack[32]
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f393e1c offset=8dc):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x000000011f393e30 offset=8f0):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: NULL
    - @1: 0
    - @2: reg rbp [10],double
ScopeDesc(pc=0x000000011f393e44 offset=904):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011f393408: 6400
relocInfo@0x000000011f393408 [type=6(runtime_call) addr=0x000000011f393540 offset=0 format=1] | [destination=0x000000010e14bfa0]
         @0x000000011f39340a: f001cc61
relocInfo@0x000000011f39340c [type=12(metadata) addr=0x000000011f3935a1 offset=97 format=3 data=1] | [metadata_addr=0x000000011f393e80 *=0x000000023090e900 offset=0]metadata_value=0x000000023090e900: 'org/jml/regression/linear/DoubleLinearRegression'
         @0x000000011f39340e: f002cc1f
relocInfo@0x000000011f393410 [type=12(metadata) addr=0x000000011f3935c0 offset=31 format=3 data=2] | [metadata_addr=0x000000011f393e88 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f393412: f002cc20
relocInfo@0x000000011f393414 [type=12(metadata) addr=0x000000011f3935e0 offset=32 format=3 data=2] | [metadata_addr=0x000000011f393e88 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f393416: a17c
relocInfo@0x000000011f393416 [type=10(poll) addr=0x000000011f39375c offset=380]
         @0x000000011f393418: a315
relocInfo@0x000000011f393418 [type=10(poll) addr=0x000000011f393a71 offset=789]
         @0x000000011f39341a: b0d7
relocInfo@0x000000011f39341a [type=11(poll_return) addr=0x000000011f393b48 offset=215]
         @0x000000011f39341c: 6457
relocInfo@0x000000011f39341c [type=6(runtime_call) addr=0x000000011f393b9f offset=87 format=1] | [destination=0x0000000117916540]
         @0x000000011f39341e: f8030e67b77700017005
relocInfo@0x000000011f393426 [type=7(external_word) addr=0x000000011f393ba4 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f393428: 640e
relocInfo@0x000000011f393428 [type=6(runtime_call) addr=0x000000011f393bb2 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39342a: 6441
relocInfo@0x000000011f39342a [type=6(runtime_call) addr=0x000000011f393bf3 offset=65 format=1] | [destination=0x0000000117916540]
         @0x000000011f39342c: f8030e67b77700017005
relocInfo@0x000000011f393434 [type=7(external_word) addr=0x000000011f393bf8 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f393436: 640e
relocInfo@0x000000011f393436 [type=6(runtime_call) addr=0x000000011f393c06 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f393438: f8030e6f6da600017016
relocInfo@0x000000011f393440 [type=7(external_word) addr=0x000000011f393c1c offset=22 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f393442: 640e
relocInfo@0x000000011f393442 [type=6(runtime_call) addr=0x000000011f393c2a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f393444: f8030e6f6da600017006
relocInfo@0x000000011f39344c [type=7(external_word) addr=0x000000011f393c30 offset=6 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f39344e: 640e
relocInfo@0x000000011f39344e [type=6(runtime_call) addr=0x000000011f393c3e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f393450: f8030e6f653100017006
relocInfo@0x000000011f393458 [type=7(external_word) addr=0x000000011f393c44 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f39345a: 640e
relocInfo@0x000000011f39345a [type=6(runtime_call) addr=0x000000011f393c52 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39345c: f8030e6f653100017006
relocInfo@0x000000011f393464 [type=7(external_word) addr=0x000000011f393c58 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f393466: 640e
relocInfo@0x000000011f393466 [type=6(runtime_call) addr=0x000000011f393c66 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f393468: f8030e6f653100017006
relocInfo@0x000000011f393470 [type=7(external_word) addr=0x000000011f393c6c offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f393472: 640e
relocInfo@0x000000011f393472 [type=6(runtime_call) addr=0x000000011f393c7a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f393474: f8030e6f653100017006
relocInfo@0x000000011f39347c [type=7(external_word) addr=0x000000011f393c80 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f39347e: 640e
relocInfo@0x000000011f39347e [type=6(runtime_call) addr=0x000000011f393c8e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f393480: 642d
relocInfo@0x000000011f393480 [type=6(runtime_call) addr=0x000000011f393cbb offset=45 format=1] | [destination=0x0000000117916540]
         @0x000000011f393482: f8030e67b77700017005
relocInfo@0x000000011f39348a [type=7(external_word) addr=0x000000011f393cc0 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f39348c: 640e
relocInfo@0x000000011f39348c [type=6(runtime_call) addr=0x000000011f393cce offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39348e: f8030e6f653100017006
relocInfo@0x000000011f393496 [type=7(external_word) addr=0x000000011f393cd4 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f393498: 640e
relocInfo@0x000000011f393498 [type=6(runtime_call) addr=0x000000011f393ce2 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39349a: f8030e6f653100017006
relocInfo@0x000000011f3934a2 [type=7(external_word) addr=0x000000011f393ce8 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3934a4: 640e
relocInfo@0x000000011f3934a4 [type=6(runtime_call) addr=0x000000011f393cf6 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934a6: f8030e6f653100017006
relocInfo@0x000000011f3934ae [type=7(external_word) addr=0x000000011f393cfc offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3934b0: 640e
relocInfo@0x000000011f3934b0 [type=6(runtime_call) addr=0x000000011f393d0a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934b2: f8030e6f653100017006
relocInfo@0x000000011f3934ba [type=7(external_word) addr=0x000000011f393d10 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3934bc: 640e
relocInfo@0x000000011f3934bc [type=6(runtime_call) addr=0x000000011f393d1e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934be: f8030e6f653100017006
relocInfo@0x000000011f3934c6 [type=7(external_word) addr=0x000000011f393d24 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3934c8: 640e
relocInfo@0x000000011f3934c8 [type=6(runtime_call) addr=0x000000011f393d32 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934ca: f8030e6f653100017006
relocInfo@0x000000011f3934d2 [type=7(external_word) addr=0x000000011f393d38 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3934d4: 640e
relocInfo@0x000000011f3934d4 [type=6(runtime_call) addr=0x000000011f393d46 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934d6: f8030e6f653100017006
relocInfo@0x000000011f3934de [type=7(external_word) addr=0x000000011f393d4c offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3934e0: 640e
relocInfo@0x000000011f3934e0 [type=6(runtime_call) addr=0x000000011f393d5a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934e2: 6439
relocInfo@0x000000011f3934e2 [type=6(runtime_call) addr=0x000000011f393d93 offset=57 format=1] | [destination=0x0000000117916540]
         @0x000000011f3934e4: f8030e67b77700017005
relocInfo@0x000000011f3934ec [type=7(external_word) addr=0x000000011f393d98 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f3934ee: 640e
relocInfo@0x000000011f3934ee [type=6(runtime_call) addr=0x000000011f393da6 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934f0: 6425
relocInfo@0x000000011f3934f0 [type=6(runtime_call) addr=0x000000011f393dcb offset=37 format=1] | [destination=0x0000000117916540]
         @0x000000011f3934f2: f8030e67b77700017005
relocInfo@0x000000011f3934fa [type=7(external_word) addr=0x000000011f393dd0 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f3934fc: 640e
relocInfo@0x000000011f3934fc [type=6(runtime_call) addr=0x000000011f393dde offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3934fe: 6425
relocInfo@0x000000011f3934fe [type=6(runtime_call) addr=0x000000011f393e03 offset=37 format=1] | [destination=0x0000000117916540]
         @0x000000011f393500: f8030e67b77700017005
relocInfo@0x000000011f393508 [type=7(external_word) addr=0x000000011f393e08 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f39350a: 640e
relocInfo@0x000000011f39350a [type=6(runtime_call) addr=0x000000011f393e16 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39350c: 6415
relocInfo@0x000000011f39350c [type=6(runtime_call) addr=0x000000011f393e2b offset=21 format=1] | [destination=0x0000000117916540]
         @0x000000011f39350e: f8030e67b77700017005
relocInfo@0x000000011f393516 [type=7(external_word) addr=0x000000011f393e30 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f393518: 640e
relocInfo@0x000000011f393518 [type=6(runtime_call) addr=0x000000011f393e3e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39351a: f2fc8006
relocInfo@0x000000011f39351c [type=8(internal_word) addr=0x000000011f393e44 offset=6 data=764] | [target=0x000000011f393b48]
         @0x000000011f39351e: 6411
relocInfo@0x000000011f39351e [type=6(runtime_call) addr=0x000000011f393e55 offset=17 format=1] | [destination=0x0000000117917220]
         @0x000000011f393520: 000b
relocInfo@0x000000011f393520 [type=0(none) addr=0x000000011f393e60 offset=11]
         @0x000000011f393522: 6400
relocInfo@0x000000011f393522 [type=6(runtime_call) addr=0x000000011f393e60 offset=0 format=1] | [destination=0x0000000117861120]
         @0x000000011f393524: 640f
relocInfo@0x000000011f393524 [type=6(runtime_call) addr=0x000000011f393e6f offset=15 format=1] | [destination=0x0000000117916860]
         @0x000000011f393526: 0000
relocInfo@0x000000011f393526 [type=0(none) addr=0x000000011f393e6f offset=0]
         @0x000000011f393528: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.DoubleLinearRegression
   [nmethod<=klass]org.jml.regression.linear.DoubleLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x000000011f3935ed, 0x000000011f393dac > < 0x000000011f3935f1, 0x000000011f393de4 > < 0x000000011f393b2c, 0x000000011f393e1c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
#2: 0x0000000230840618 {type array double}
#3: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
46.906 ms/op
# Warmup Iteration   4: 
============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 986 ------------------------
{method}
 - this oop:          0x0000000272c8fa60
 - method holder:     'org/jml/regression/linear/DoubleLinearRegression'
 - constants:         0x0000000272c8f518 constant pool [71]/operands[5] {0x0000000272c8f518} for 'org/jml/regression/linear/DoubleLinearRegression' cache=0x0000000272c8fe20
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([D[D)V'
 - max stack:         9
 - max locals:        16
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x000000011780de20
 - adapters:          AHE@0x00007fa51303fe70: 0xbbb00000 i2c: 0x0000000117885ee0 c2i: 0x0000000117885fbf c2iUV: 0x0000000117885f92 c2iNCI: 0x0000000117885ffc
 - compiled entry     0x0000000117f30a40
 - code size:         155
 - code start:        0x0000000272c8f928
 - code end (excl):   0x0000000272c8f9c3
 - method data:       0x0000000272f04000
 - checked ex length: 0
 - linenumber start:  0x0000000272c8f9c3
 - localvar length:   11
 - localvar start:    0x0000000272c8f9da
 - compiled code: nmethod   2770  982       3       org.jml.regression.linear.DoubleLinearRegression::fit (155 bytes)

------------------------ OptoAssembly for Compile_id = 986 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r583 rsp+108: in_preserve
#r582 rsp+104: return address
#r581 rsp+100: in_preserve
#r580 rsp+96: saved fp register
#r579 rsp+92: pad2, stack alignment
#r578 rsp+88: pad2, stack alignment
#r577 rsp+84: Fixed slot 1
#r576 rsp+80: Fixed slot 0
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N635: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B42 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

01c     movq    R13, [RSI + #120 (8-bit)]	# ptr
020     movq    RBP, [RSI + #112 (8-bit)]	# ptr
024     movl    R12, [RSI]	# int
027     movq    RBX, [RSI + #104 (8-bit)]	# ptr
02b     movsd   XMM0, [RSI + #56 (8-bit)]	# double
030     movsd   [rsp + #40], XMM0	# spill
036     movsd   XMM0, [RSI + #40 (8-bit)]	# double
03b     movsd   [rsp + #48], XMM0	# spill
041     movsd   XMM0, [RSI + #24 (8-bit)]	# double
046     movdq   R14, XMM0	# spill
04b     movsd   XMM0, [RSI + #8 (8-bit)]	# double
050     movsd   [rsp + #56], XMM0	# spill
056     movq    RDI, RSI	# spill
        nop 	# 7 bytes pad for loops and calls
060     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
070     testq   R13, R13	# ptr
073     je     B42  P=0.001000 C=-1.000000

079     B2: #	out( B58 B3 ) <- in( B1 )  Freq: 0.999
079     movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass org/jml/regression/linear/DoubleLinearRegression: 0x00007fa518049a20:Constant:exact *	# compressed klass ptr
087     jne,u   B58  P=0.000001 C=-1.000000

08d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
08d     movq    RAX, R13	# spill
090     # checkcastPP of RAX

090     B4: #	out( B43 B5 ) <- in( B3 B42 )  Freq: 0.999999
090     testq   RBP, RBP	# ptr
093     je     B43  P=0.001000 C=-1.000000

099     B5: #	out( B58 B6 ) <- in( B4 )  Freq: 0.998999
099     movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R11, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
0a7     jne,u   B58  P=0.000001 C=-1.000000

0ad     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
0ad     movq    RDX, RBP	# spill
0b0     # checkcastPP of RDX

0b0     B7: #	out( B44 B8 ) <- in( B6 B43 )  Freq: 0.999998
0b0     testq   RBX, RBX	# ptr
0b3     je     B44  P=0.001000 C=-1.000000

0b9     B8: #	out( B58 B9 ) <- in( B7 )  Freq: 0.998998
0b9     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0c0     cmpl    R10, narrowklass: precise klass [D: 0x00007fa516712730:Constant:exact *	# compressed klass ptr
0c7     jne,u   B58  P=0.000001 C=-1.000000

0cd     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0cd     # checkcastPP of RBX

0cd     B10: #	out( B59 B11 ) <- in( B9 B44 )  Freq: 0.999997
0cd     movl    R10, [RDX + #12 (8-bit)]	# range
0d1     NullCheck RDX

0d1     B11: #	out( B60 B12 ) <- in( B10 )  Freq: 0.999996
0d1     movl    R8, [RBX + #12 (8-bit)]	# range
0d5     NullCheck RBX

0d5     B12: #	out( B51 B13 ) <- in( B11 )  Freq: 0.999995
0d5     cmpl    R12, R10
0d8     jge     B51  P=0.000001 C=19677602.000000

0de     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999994
0de     movl    R11, RBX	# ptr -> int
0e1     movl    RDI, R12	# spill
0e4     incl    RDI	# int
0e6     shrl    R11, #3
0ea     andl    R11, #3	# int
0ee     xorl    R9, R9	# int
0f1     cmpl    RDI, R9
0f4     cmovllt RDI, R9	# max
0f8     cmpl    RDI, R10
0fb     cmovlgt RDI, R10	# min
0ff     addl    R11, RDI	# int
102     movl    RCX, #2	# int
107     subl    RCX, R11	# int
10a     andl    RCX, #3	# int
10d     addl    RCX, RDI	# int
10f     cmpl    RCX, R10
112     cmovlgt RCX, R10	# min

116     B14: #	out( B45 B15 ) <- in( B13 B17 ) Loop( B14-B17 inner pre of N465) Freq: 1.99998
116     cmpl    R12, R10	# unsigned
119     jnb,u   B45  P=0.000001 C=-1.000000

11f     B15: #	out( B48 B16 ) <- in( B14 )  Freq: 1.99998
11f     movsd   XMM0, [RDX + #16 + R12 << #3]	# double
126     vsubsd  XMM1, XMM0, [RSP + #40 (32-bit)]
12c     vmulsd  XMM0, XMM1, XMM1
130     movdq   XMM2, R14	# spill
135     vaddsd  XMM0, XMM2, XMM0
139     cmpl    R12, R8	# unsigned
        nop 	# 4 bytes pad for loops and calls
140     jnb,u   B48  P=0.000001 C=-1.000000

146     B16: #	out( B18 B17 ) <- in( B15 )  Freq: 1.99998
146     movsd   XMM2, [RBX + #16 + R12 << #3]	# double
14d     vsubsd  XMM2, XMM2, [RSP + #48 (32-bit)]
153     vmulsd  XMM1, XMM2, XMM1
157     movsd   XMM2, [rsp + #56]	# spill
15d     vaddsd  XMM2, XMM2, XMM1
161     incl    R12	# int
164     cmpl    R12, RCX
167     jge,s   B18	# loop end  P=0.500000 C=19677602.000000

169     B17: #	out( B14 ) <- in( B16 )  Freq: 0.99999
169     movdq   R14, XMM0	# spill
16e     movsd   [rsp + #56], XMM2	# spill
174     jmp,s   B14

176     B18: #	out( B35 B19 ) <- in( B16 )  Freq: 0.99999
176     cmpl    R10, R8
179     movl    R11, R10	# spill
17c     cmovlgt R11, R8	# min
180     movl    RDI, R11	# spill
183     addl    RDI, #-15	# int
186     movl    RCX, #-2147483648	# int
18b     cmpl    R11, RDI
18e     cmovll RDI, RCX	# signed, int
191     cmpl    R12, RDI
194     jge     B35  P=0.000001 C=-1.000000

19a     B19: #	out( B52 B20 ) <- in( B18 )  Freq: 0.999989
19a     # castII of R12
        nop 	# 6 bytes pad for loops and calls
1a0     cmpl    R12, R10	# unsigned
1a3     jnb,u   B52  P=0.000001 C=-1.000000

1a9     B20: #	out( B53 B21 ) <- in( B19 )  Freq: 0.999988
1a9     cmpl    R12, R8	# unsigned
1ac     jnb,u   B53  P=0.000001 C=-1.000000

1b2     B21: #	out( B54 B22 ) <- in( B20 )  Freq: 0.999987
1b2     movl    RSI, R12	# spill
1b5     addl    RSI, #15	# int
1b8     cmpl    RSI, R8	# unsigned
        nop 	# 5 bytes pad for loops and calls
1c0     jnb,u   B54  P=0.000001 C=-1.000000

1c6     B22: #	out( B55 B23 ) <- in( B21 )  Freq: 0.999986
1c6     cmpl    R12, R8	# unsigned
1c9     jnb,u   B55  P=0.000001 C=-1.000000

1cf     B23: #	out( B56 B24 ) <- in( B22 )  Freq: 0.999985
1cf     cmpl    RSI, R10	# unsigned
1d2     jnb,u   B56  P=0.000001 C=-1.000000

1d8     B24: #	out( B57 B25 ) <- in( B23 )  Freq: 0.999984
1d8     cmpl    R12, R10	# unsigned
        nop 	# 5 bytes pad for loops and calls
1e0     jnb,u   B57  P=0.000001 C=-1.000000

1e6     B25: #	out( B30 ) <- in( B24 )  Freq: 0.999983
1e6     replicateD XMM4,[RSP + #40 (32-bit)]
1ed     replicateD XMM5,[RSP + #48 (32-bit)]
1f4     movl    RSI, #16000	# int
1f9     # TLS is in R15
1f9     jmp     B30

1fe     B26: #	out( B27 ) <- in( B33 )  Freq: 0.499991
1fe     # castII of R12

1fe     B27: #	out( B35 B28 ) <- in( B26 B28 ) Loop( B27-B28 inner post of N882) Freq: 0.999983
1fe     load_vector XMM0,[RBX + #16 + R12 << #3]
205     load_vector XMM1,[RDX + #16 + R12 << #3]
20c     vsubpd  XMM0,XMM0,XMM5	! sub packedD
210     vsubpd  XMM1,XMM1,XMM4	! sub packedD
214     vmulpd  XMM2,XMM1,XMM1	! mul packedD
218     vmulpd  XMM1,XMM0,XMM1	! mul packedD
21c     movdq   XMM0, R13	# spill
221     vector_reduction_double XMM0,XMM2 ; using XMM7, XMM6 as TEMP
241     movsd   XMM2, [rsp + #0]	# spill
246     vector_reduction_double XMM2,XMM1 ; using XMM6, XMM3 as TEMP
266     addl    R12, #4	# int
26a     cmpl    R12, RDI
26d     jge     B35	# loop end  P=0.500000 C=19677602.000000

273     B28: #	out( B27 ) <- in( B27 )  Freq: 0.499991
273     movdq   R13, XMM0	# spill
278     movsd   [rsp + #0], XMM2	# spill
        nop 	# 3 bytes pad for loops and calls
280     jmp     B27

285     B29: #	out( B30 ) <- in( B32 ) top-of-loop Freq: 986877
285     movdq   XMM0, R13	# spill
28a     movsd   XMM2, [rsp + #0]	# spill

28f     B30: #	out( B31 ) <- in( B25 B29 ) Loop( B30-B29 ) Freq: 986878
28f     movl    RBP, RDI	# spill
291     subl    RBP, R12	# int
294     cmpl    RDI, R12
297     cmovll RBP, R9	# signed, int
29b     cmpl    RBP, #16000	# unsigned
2a1     cmovlnbe RBP, RSI	# unsigned, int
2a4     addl    RBP, R12	# int
2a7     movdq   R13, XMM0	# spill
2ac     movsd   [rsp + #0], XMM2	# spill

2b1     B31: #	out( B31 B32 ) <- in( B30 B31 ) Loop( B31-B31 inner main of N204 strip mined) Freq: 9.73945e+11
2b1     load_vector XMM0,[RBX + #16 + R12 << #3]
2b8     load_vector XMM1,[RDX + #16 + R12 << #3]
2bf     vsubpd  XMM0,XMM0,XMM5	! sub packedD
2c3     vsubpd  XMM1,XMM1,XMM4	! sub packedD
2c7     vmulpd  XMM12,XMM1,XMM1	! mul packedD
2cb     vmulpd  XMM9,XMM0,XMM1	! mul packedD
2cf     movslq  R14, R12	# i2l
2d2     load_vector XMM0,[RDX + #48 + R14 << #3]
2d9     load_vector XMM6,[RBX + #112 + R14 << #3]
2e0     load_vector XMM7,[RDX + #80 + R14 << #3]
2e7     load_vector XMM1,[RDX + #112 + R14 << #3]
2ee     load_vector XMM2,[RBX + #48 + R14 << #3]
2f5     load_vector XMM3,[RBX + #80 + R14 << #3]
2fc     vsubpd  XMM0,XMM0,XMM4	! sub packedD
300     vsubpd  XMM3,XMM3,XMM5	! sub packedD
304     vmulpd  XMM13,XMM0,XMM0	! mul packedD
308     vsubpd  XMM2,XMM2,XMM5	! sub packedD
30c     vsubpd  XMM10,XMM1,XMM4	! sub packedD
310     vmulpd  XMM8,XMM2,XMM0	! mul packedD
314     vmulpd  XMM1,XMM10,XMM10	! mul packedD
319     vsubpd  XMM0,XMM7,XMM4	! sub packedD
31d     vsubpd  XMM2,XMM6,XMM5	! sub packedD
321     vmulpd  XMM7,XMM3,XMM0	! mul packedD
325     vmulpd  XMM2,XMM2,XMM10	! mul packedD
32a     vmulpd  XMM11,XMM0,XMM0	! mul packedD
32e     movdq   XMM0, R13	# spill
333     vector_reduction_double XMM0,XMM12 ; using XMM14, XMM15 as TEMP
359     vector_reduction_double XMM0,XMM13 ; using XMM12, XMM14 as TEMP
37f     vector_reduction_double XMM0,XMM11 ; using XMM12, XMM13 as TEMP
3a5     vector_reduction_double XMM0,XMM1 ; using XMM11, XMM10 as TEMP
3c9     movdq   R13, XMM0	# spill
3ce     movsd   XMM0, [rsp + #0]	# spill
3d3     vector_reduction_double XMM0,XMM9 ; using XMM1, XMM10 as TEMP
3f8     vector_reduction_double XMM0,XMM8 ; using XMM1, XMM9 as TEMP
41d     vector_reduction_double XMM0,XMM7 ; using XMM1, XMM8 as TEMP
440     vector_reduction_double XMM0,XMM2 ; using XMM6, XMM3 as TEMP
460     movsd   [rsp + #0], XMM0	# spill
465     addl    R12, #16	# int
469     cmpl    R12, RBP
46c     jl     B31	# loop end  P=0.999999 C=19677602.000000

472     B32: #	out( B29 B33 ) <- in( B31 )  Freq: 986878
472     movq    RBP, [R15 + #304 (32-bit)]	# ptr
479     testl   rax, [RBP]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:128 (line 25) L[0]=RAX L[1]=RDX L[2]=RBX L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #40 L[8]=_ L[9]=rsp + #48 L[10]=_ L[11]=R13 L[12]=_ L[13]=XMM0 L[14]=_ L[15]=R12
        # OopMap {rbx=Oop rdx=Oop rax=Oop off=1145/0x479}
        nop 	# 4 bytes pad for loops and calls
480     cmpl    R12, RDI
483     jl     B29  P=0.999999 C=19677602.000000

489     B33: #	out( B26 B34 ) <- in( B32 )  Freq: 0.999983
489     movl    RDI, R11	# spill
48c     addl    RDI, #-3	# int
48f     cmpl    R11, RDI
492     cmovll RDI, RCX	# signed, int
495     cmpl    R12, RDI
498     jl     B26  P=0.500000 C=-1.000000

49e     B34: #	out( B35 ) <- in( B33 )  Freq: 0.499991
49e     movdq   XMM0, R13	# spill
4a3     movsd   XMM2, [rsp + #0]	# spill

4a8     B35: #	out( B40 B36 ) <- in( B18 B27 B34 )  Freq: 0.999984
4a8     cmpl    R12, R10
4ab     jge     B40  P=0.500000 C=-1.000000

4b1     B36: #	out( B37 ) <- in( B35 )  Freq: 0.499992
4b1     # castII of R12
        nop 	# 3 bytes pad for loops and calls

4b4     B37: #	out( B46 B38 ) <- in( B36 B39 ) Loop( B37-B39 inner post of N465) Freq: 0.999982
4b4     cmpl    R12, R10	# unsigned
4b7     jnb,u   B46  P=0.000001 C=-1.000000

4bd     B38: #	out( B49 B39 ) <- in( B37 )  Freq: 0.999981
4bd     movsd   XMM1, [RDX + #16 + R12 << #3]	# double
4c4     vsubsd  XMM1, XMM1, [RSP + #40 (32-bit)]
4ca     vmulsd  XMM3, XMM1, XMM1
4ce     vaddsd  XMM0, XMM0, XMM3
4d2     cmpl    R12, R8	# unsigned
4d5     jnb,u   B49  P=0.000001 C=-1.000000

4db     B39: #	out( B37 B40 ) <- in( B38 )  Freq: 0.99998
4db     movsd   XMM3, [RBX + #16 + R12 << #3]	# double
4e2     vsubsd  XMM3, XMM3, [RSP + #48 (32-bit)]
4e8     vmulsd  XMM1, XMM3, XMM1
4ec     vaddsd  XMM2, XMM2, XMM1
4f0     incl    R12	# int
4f3     cmpl    R12, R10
4f6     jl,s   B37	# loop end  P=0.500000 C=19677602.000000

4f8     B40: #	out( B61 B41 ) <- in( B51 B39 B35 )  Freq: 0.999983
4f8     vdivsd  XMM0, XMM2, XMM0
        nop 	# 4 bytes pad for loops and calls
500     movsd   [RAX + #24 (8-bit)], XMM0	# double ! Field: org/jml/regression/linear/DoubleLinearRegression.slope
505     NullCheck RAX

505     B41: #	out( N635 ) <- in( B40 )  Freq: 0.999982
505     vmulsd  XMM0, XMM0, [RSP + #40 (32-bit)]
50b     movsd   XMM1, [rsp + #48]	# spill
511     vsubsd  XMM0, XMM1, XMM0
515     movsd   [RAX + #16 (8-bit)], XMM0	# double ! Field: org/jml/regression/linear/DoubleLinearRegression.intercept
51a     vzeroupper
	addq    rsp, 96	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

52f     ret

530     B42: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
530     xorl    RAX, RAX	# ptr
532     jmp     B4

537     B43: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
537     xorl    RDX, RDX	# ptr
539     jmp     B7

53e     B44: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
53e     xorl    RBX, RBX	# ptr
540     jmp     B10

545     B45: #	out( B47 ) <- in( B14 )  Freq: 2.02654e-06
545     movq    [rsp + #0], R14	# spill
549     movq    RBP, [rsp + #56]	# spill
54e     jmp,s   B47

550     B46: #	out( B47 ) <- in( B37 )  Freq: 1.01326e-06
550     movsd   [rsp + #0], XMM0	# spill
555     movdq   RBP, XMM2	# spill

55a     B47: #	out( N635 ) <- in( B46 B45 )  Freq: 3.0398e-06
55a     movl    RSI, #-28	# int
55f     movq    [rsp + #8], RAX	# spill
564     movq    [rsp + #24], RBX	# spill
569     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
573     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #40]
57d     movq    [rsp + #56], RDX	# spill
582     movl    [rsp + #52], R12	# spill
        nop 	# 1 bytes pad for loops and calls
588     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:90 (line 26) L[0]=rsp + #8 L[1]=rsp + #56 L[2]=rsp + #24 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #32 L[8]=_ L[9]=rsp + #40 L[10]=_ L[11]=_ L[12]=_ L[13]=RBP L[14]=_ L[15]=rsp + #52 STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #56 STK[3]=rsp + #52
        # OopMap {[8]=Oop [24]=Oop [56]=Oop off=1424/0x590}
590     stop	# ShouldNotReachHere

5a4     B48: #	out( B50 ) <- in( B15 )  Freq: 2.02654e-06
5a4     movsd   [rsp + #8], XMM1	# spill
5aa     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #0]
5b3     movdq   RBP, XMM0	# spill
5b8     jmp,s   B50

5ba     B49: #	out( B50 ) <- in( B38 )  Freq: 1.01326e-06
5ba     movsd   [rsp + #8], XMM1	# spill
5c0     movsd   [rsp + #0], XMM2	# spill
5c5     movdq   RBP, XMM0	# spill

5ca     B50: #	out( N635 ) <- in( B49 B48 )  Freq: 3.0398e-06
5ca     movl    RSI, #-28	# int
5cf     movq    [rsp + #16], RAX	# spill
5d4     movq    [rsp + #24], RDX	# spill
5d9     movq    [rsp + #64], RBX	# spill
5de     movl    [rsp + #60], R12	# spill
        nop 	# 1 bytes pad for loops and calls
5e4     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:117 (line 27) L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #64 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #40 L[8]=_ L[9]=rsp + #48 L[10]=_ L[11]=RBP L[12]=_ L[13]=_ L[14]=_ L[15]=rsp + #60 STK[0]=rsp + #0 STK[1]=_ STK[2]=rsp + #8 STK[3]=_ STK[4]=rsp + #64 STK[5]=rsp + #60
        # OopMap {[16]=Oop [24]=Oop [64]=Oop off=1516/0x5ec}
5ec     stop	# ShouldNotReachHere

600     B51: #	out( B40 ) <- in( B12 )  Freq: 1.01327e-06
600     movdq   XMM0, R14	# spill
605     movsd   XMM2, [rsp + #56]	# spill
60b     jmp     B40

610     B52: #	out( N635 ) <- in( B19 )  Freq: 1.01327e-06
610     stop	# ShouldNotReachHere

624     B53: #	out( N635 ) <- in( B20 )  Freq: 1.01327e-06
624     stop	# ShouldNotReachHere

638     B54: #	out( N635 ) <- in( B21 )  Freq: 1.01327e-06
638     stop	# ShouldNotReachHere

64c     B55: #	out( N635 ) <- in( B22 )  Freq: 1.01326e-06
64c     stop	# ShouldNotReachHere

660     B56: #	out( N635 ) <- in( B23 )  Freq: 1.01326e-06
660     stop	# ShouldNotReachHere

674     B57: #	out( N635 ) <- in( B24 )  Freq: 1.01326e-06
674     stop	# ShouldNotReachHere

688     B58: #	out( N635 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
688     movl    RSI, #-115	# int
68d     movq    [rsp + #0], RBX	# spill
691     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #8]
69b     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #16]
6a5     movq    [rsp + #24], R14	# spill
6aa     movl    [rsp + #40], R12	# spill
6af     movq    [rsp + #48], R13	# spill
6b4     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:78 (line 25) L[0]=rsp + #48 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #8 L[8]=_ L[9]=rsp + #16 L[10]=_ L[11]=rsp + #24 L[12]=_ L[13]=rsp + #56 L[14]=_ L[15]=rsp + #40
        # OopMap {rbp=Oop [0]=Oop [48]=Oop off=1724/0x6bc}
6bc     stop	# ShouldNotReachHere

6d0     B59: #	out( N635 ) <- in( B10 )  Freq: 1.01328e-06
6d0     movl    RSI, #-138	# int
6d5     movq    RBP, RAX	# spill
6d8     movq    [rsp + #0], RDX	# spill
6dc     movq    [rsp + #8], RBX	# spill
6e1     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #16]
6eb     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #24]
6f5     movq    [rsp + #32], R14	# spill
6fa     movl    [rsp + #48], R12	# spill
        nop 	# 1 bytes pad for loops and calls
700     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:78 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=_ L[9]=rsp + #24 L[10]=_ L[11]=rsp + #32 L[12]=_ L[13]=rsp + #56 L[14]=_ L[15]=rsp + #48
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1800/0x708}
708     stop	# ShouldNotReachHere

71c     B60: #	out( N635 ) <- in( B11 )  Freq: 1.01327e-06
71c     movl    RSI, #-66	# int
721     movq    RBP, RAX	# spill
724     movq    [rsp + #0], RDX	# spill
728     movq    [rsp + #8], RBX	# spill
72d     pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #16]
737     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #24]
741     movq    [rsp + #32], R14	# spill
746     movl    [rsp + #48], R12	# spill
        nop 	# 1 bytes pad for loops and calls
74c     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:78 (line 25) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=_ L[9]=rsp + #24 L[10]=_ L[11]=rsp + #32 L[12]=_ L[13]=rsp + #56 L[14]=_ L[15]=rsp + #48
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1876/0x754}
754     stop	# ShouldNotReachHere

768     B61: #	out( N635 ) <- in( B40 )  Freq: 1.01326e-06
768     movl    RSI, #-10	# int
76d     movdq   RBP, XMM0	# spill
        nop 	# 2 bytes pad for loops and calls
774     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:137 (line 31) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=#NULL STK[1]=RBP STK[2]=_
        # OopMap {off=1916/0x77c}
77c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2776  986 %     4       org.jml.regression.linear.DoubleLinearRegression::fit @ 78 (155 bytes)
 total in heap  [0x000000011f394590,0x000000011f395460] = 3792
 relocation     [0x000000011f394708,0x000000011f3947c8] = 192
 main code      [0x000000011f3947e0,0x000000011f394fa0] = 1984
 stub code      [0x000000011f394fa0,0x000000011f394fb8] = 24
 oops           [0x000000011f394fb8,0x000000011f394fc0] = 8
 metadata       [0x000000011f394fc0,0x000000011f394fd8] = 24
 scopes data    [0x000000011f394fd8,0x000000011f395158] = 384
 scopes pcs     [0x000000011f395158,0x000000011f395438] = 736
 dependencies   [0x000000011f395438,0x000000011f395440] = 8
 nul chk table  [0x000000011f395440,0x000000011f395460] = 32

[Constant Pool (empty)]

[MachCode]
[Verified Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
 ;; N635: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f3947e0: ;   {runtime_call os::breakpoint()}
  0x000000011f3947e0: e8bb 77db | ee90 9090 | 9090 9090 | 9090 9090 
 ;; B1: #	out( B42 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f3947f0: 8984 2400 | a0fe ff55 | 4883 ec60 | 4c8b 6e78 | 488b 6e70 | 448b 2648 | 8b5e 68c5 | fb10 4638 
  0x000000011f394810: c5fb 1144 | 2428 c5fb | 1046 28c5 | fb11 4424 | 30c5 fb10 | 4618 c4c1 | f97e c6c5 | fb10 4608 
  0x000000011f394830: c5fb 1144 | 2438 488b | fe90 9090 | 9090 9090 | c5f8 7749 | baa0 5025 | 0e01 0000 | 0041 ffd2 
  0x000000011f394850: 4d85 ed0f | 84b7 0400 | 0045 8b55 | 0890 9090 

  0x000000011f394860: ;   {metadata('org/jml/regression/linear/DoubleLinearRegression')}
  0x000000011f394860: 4181 fa20 | 1d12 460f | 85fb 0500 | 0049 8bc5 
 ;; B4: #	out( B43 B5 ) <- in( B3 B42 )  Freq: 0.999999
  0x000000011f394870: 4885 ed0f | 849e 0400 | 0044 8b5d | 0890 9090 

  0x000000011f394880: ;   {metadata({type array double})}
  0x000000011f394880: 4181 fbc3 | 8010 460f | 85db 0500 | 0048 8bd5 
 ;; B7: #	out( B44 B8 ) <- in( B6 B43 )  Freq: 0.999998
  0x000000011f394890: 4885 db0f | 8485 0400 | 0044 8b53 | 0890 9090 

  0x000000011f3948a0: ;   {metadata({type array double})}
  0x000000011f3948a0: 4181 fac3 | 8010 460f | 85bb 0500 

  0x000000011f3948ac: ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f3948ac: 0044 8b52 

  0x000000011f3948b0: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@81 (line 25)
  0x000000011f3948b0: 0c44 8b43 

  0x000000011f3948b4: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f3948b4: 0c45 3be2 | 0f8d 2205 

  0x000000011f3948bc: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f3948bc: 0000 448b | db41 8bfc | ffc7 41c1 | eb03 4183 | e303 4533 | c941 3bf9 | 410f 4cf9 | 413b fa41 
  0x000000011f3948dc: 0f4f fa44 | 03df b902 | 0000 0041 | 2bcb 83e1 | 0303 cf41 | 3bca 410f 

  0x000000011f3948f4: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f3948f4: 4fca 453b | e20f 8326 | 0400 00c4 | a17b 1044 | e210 c5fb 

  0x000000011f394908: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f394908: 5c4c 2428 | c5f3 59c1 | c4c1 f96e | d6c5 eb58 

  0x000000011f394918: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f394918: c045 3be0 | 9090 9090 | 0f83 5e04 | 0000 c4a1 | 7b10 54e3 | 10c5 eb5c | 5424 30c5 | eb59 c9c5 
  0x000000011f394938: fb10 5424 | 38c5 eb58 

  0x000000011f394940: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f394940: d141 ffc4 | 443b e17d 

  0x000000011f394948: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f394948: 0dc4 c1f9 | 7ec6 c5fb | 1154 2438 | eba0 453b | d045 8bda | 450f 4fd8 | 418b fb83 | c7f1 b900 
  0x000000011f394968: 0000 8044 | 3bdf 0f4c | f944 3be7 | 0f8d 0e03 | 0000 9090 | 9090 9090 | 453b e20f | 8367 0400 
  0x000000011f394988: 0045 3be0 | 0f83 7204 | 0000 418b | f483 c60f | 413b f090 | 9090 9090 | 0f83 7204 | 0000 453b 
  0x000000011f3949a8: e00f 837d | 0400 0041 | 3bf2 0f83 | 8804 0000 
 ;; B24: #	out( B57 B25 ) <- in( B23 )  Freq: 0.999984
  0x000000011f3949b8: 453b e290 | 9090 9090 | 0f83 8e04 | 0000 c4e2 | 7d19 6424 | 28c4 e27d | 196c 2430 | be80 3e00 
  0x000000011f3949d8: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
  0x000000011f3949d8: 00e9 9100 

  0x000000011f3949dc: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f3949dc: 0000 c4a1 | 7e6f 44e3 | 10c4 a17e | 6f4c e210 | c5fd 5cc5 

  0x000000011f3949f0: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f3949f0: c5f5 5ccc | c5f5 59d1 | c5fd 59c9 | c4c1 f96e | c5c5 fb58 | c2c5 f970 | f20e c5fb | 58c6 c4e3 
  0x000000011f394a10: 7d19 d601 | c5fb 58c6 | c5f9 70fe | 0ec5 fb58 

  0x000000011f394a20: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f394a20: c7c5 fb10 | 1424 c5eb | 58d1 c5f9 | 70d9 0ec5 | eb58 d3c4 | e37d 19cb | 01c5 eb58 | d3c5 f970 
  0x000000011f394a40: f30e c5eb 

  0x000000011f394a44: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f394a44: 58d6 4183 

  0x000000011f394a48: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f394a48: c404 443b | e70f 8d35 

  0x000000011f394a50: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f394a50: 0200 00c4 | c1f9 7ec5 | c5fb 1114 | 2490 9090 | e979 ffff | ffc4 c1f9 | 6ec5 c5fb | 1014 248b 
  0x000000011f394a70: ef41 2bec | 413b fc41 | 0f4c e981 | fd80 3e00 | 000f 47ee | 4103 ecc4 | c1f9 7ec5 | c5fb 1114 
  0x000000011f394a90: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f394a90: 24c4 a17e | 6f44 e310 | c4a1 7e6f | 4ce2 10c5 | fd5c c5c5 | f55c ccc5 | 7559 e1c5 | 7d59 c94d 
  0x000000011f394ab0: 63f4 c4a1 | 7e6f 44f2 | 30c4 a17e | 6f74 f370 | c4a1 7e6f | 7cf2 50c4 | a17e 6f4c | f270 c4a1 
  0x000000011f394ad0: 7e6f 54f3 | 30c4 a17e | 6f5c f350 | c5fd 5cc4 | c5e5 5cdd | c57d 59e8 | c5ed 5cd5 | c575 5cd4 
  0x000000011f394af0: c56d 59c0 | c4c1 2d59 | cac5 c55c 

  0x000000011f394afc: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f394afc: c4c5 cd5c | d5c5 e559 | f8c4 c16d | 59d2 c57d | 59d8 c4c1 | f96e c5c4 | c17b 58c4 | c441 7970 
  0x000000011f394b1c: fc0e c4c1 | 7b58 c7c4 | 437d 19e7 | 01c4 c17b | 58c7 c441 | 7970 f70e | c4c1 7b58 | c6c4 c17b 
  0x000000011f394b3c: 58c5 c441 | 7970 f50e | c4c1 7b58 | c6c4 437d | 19ee 01c4 | c17b 58c6 | c441 7970 | e60e c4c1 
  0x000000011f394b5c: 7b58 c4c4 | c17b 58c3 | c441 7970 | eb0e c4c1 | 7b58 c5c4 | 437d 19dd | 01c4 c17b | 58c5 c441 
  0x000000011f394b7c: 7970 e50e | c4c1 7b58 | c4c5 fb58 | c1c5 7970 | d10e c4c1 | 7b58 c2c4 | c37d 19ca | 01c4 c17b 
  0x000000011f394b9c: 58c2 c441 | 7970 da0e | c4c1 7b58 

  0x000000011f394ba8: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f394ba8: c3c4 c1f9 | 7ec5 c5fb | 1004 24c4 | c17b 58c1 | c441 7970 | d10e c4c1 | 7b58 c2c4 | 437d 19ca 
  0x000000011f394bc8: 01c4 c17b | 58c2 c4c1 | 7970 ca0e | c5fb 58c1 | c4c1 7b58 | c0c4 4179 | 70c8 0ec4 | c17b 58c1 
  0x000000011f394be8: c443 7d19 | c101 c4c1 | 7b58 c1c4 | c179 70c9 | 0ec5 fb58 | c1c5 fb58 | c7c5 7970 | c70e c4c1 
  0x000000011f394c08: 7b58 c0c4 | c37d 19f8 | 01c4 c17b | 58c0 c4c1 | 7970 c80e | c5fb 58c1 | c5fb 58c2 | c5f9 70da 
  0x000000011f394c28: 0ec5 fb58 | c3c4 e37d | 19d3 01c5 | fb58 c3c5 | f970 f30e 

  0x000000011f394c3c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f394c3c: c5fb 58c6 | c5fb 1104 | 2441 83c4 

  0x000000011f394c48: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f394c48: 1044 3be5 | 0f8c 3ffe 

  0x000000011f394c50: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f394c50: ffff 498b | af30 0100 

  0x000000011f394c58: ; ImmutableOopMap {rbx=Oop rdx=Oop rax=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {poll}
  0x000000011f394c58: 0085 4500 | 9090 9090 | 443b e70f | 8cfc fdff | ff41 8bfb | 83c7 fd44 | 3bdf 0f4c | f944 3be7 
  0x000000011f394c78: 0f8c 60fd | ffff c4c1 | f96e c5c5 | fb10 1424 
 ;; B35: #	out( B40 B36 ) <- in( B18 B27 B34 )  Freq: 0.999984
  0x000000011f394c88: 453b e20f | 8d47 0000 

  0x000000011f394c90: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x000000011f394c90: 0090 9090 
 ;; B37: #	out( B46 B38 ) <- in( B36 B39 ) Loop( B37-B39 inner post of N465) Freq: 0.999982
  0x000000011f394c94: 453b e20f | 8393 0000 | 00c4 a17b | 104c e210 | c5f3 5c4c 

  0x000000011f394ca8: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f394ca8: 2428 c5f3 | 59d9 c5fb 

  0x000000011f394cb0: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f394cb0: 58c3 453b | e00f 83df | 0000 00c4 | a17b 105c | e310 c5e3 | 5c5c 2430 | c5e3 59c9 

  0x000000011f394ccc: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f394ccc: c5eb 58d1 

  0x000000011f394cd0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f394cd0: 41ff c445 

  0x000000011f394cd4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f394cd4: 3be2 7cbc 
 ;; B40: #	out( B61 B41 ) <- in( B51 B39 B35 )  Freq: 0.999983
  0x000000011f394cd8: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
  0x000000011f394cd8: c5eb 5ec0 | 9090 9090 

  0x000000011f394ce0: ; implicit exception: dispatches to 0x000000011f394f48
  0x000000011f394ce0: c5fb 1140 

  0x000000011f394ce4: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f394ce4: 18c5 fb59 | 4424 28c5 | fb10 4c24 | 30c5 f35c | c0c5 fb11 

  0x000000011f394cf8: ;*putfield intercept {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
  0x000000011f394cf8: 4010 c5f8 | 7748 83c4 

  0x000000011f394d00: ;   {poll_return}
  0x000000011f394d00: 605d 493b | a728 0100 | 000f 8761 | 0200 00c3 
 ;; B42: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x000000011f394d10: 33c0 e959 | fbff ff33 | d2e9 72fb | ffff 33db | e988 fbff | ff4c 8934 | 2448 8b6c | 2438 eb0a 
 ;; B46: #	out( B47 ) <- in( B37 )  Freq: 1.01326e-06
  0x000000011f394d30: c5fb 1104 | 24c4 e1f9 | 7ed5 bee4 | ffff ff48 | 8944 2408 | 4889 5c24 | 1848 ff74 | 2428 488f 
  0x000000011f394d50: 4424 2048 | ff74 2430 | 488f 4424 | 2848 8954 | 2438 4489 | 6424 3490 

  0x000000011f394d68: ;   {runtime_call UncommonTrapBlob}
  0x000000011f394d68: c5f8 77e8 

  0x000000011f394d6c: ; ImmutableOopMap {[8]=Oop [24]=Oop [56]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x000000011f394d6c: d017 58f8 

  0x000000011f394d70: ;   {external_word}
  0x000000011f394d70: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f394d7c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394d7c: e4f0 e8cd 

  0x000000011f394d80: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
  0x000000011f394d80: 01c2 eef4 
 ;; B48: #	out( B50 ) <- in( B15 )  Freq: 2.02654e-06
  0x000000011f394d84: c5fb 114c | 2408 48ff | 7424 3848 | 8f04 24c4 | e1f9 7ec5 | eb10 c5fb | 114c 2408 | c5fb 1114 
  0x000000011f394da4: 24c4 e1f9 | 7ec5 bee4 | ffff ff48 | 8944 2410 | 4889 5424 | 1848 895c | 2440 4489 | 6424 3c90 
  0x000000011f394dc4: ;   {runtime_call UncommonTrapBlob}
  0x000000011f394dc4: c5f8 77e8 

  0x000000011f394dc8: ; ImmutableOopMap {[16]=Oop [24]=Oop [64]=Oop }
                      ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f394dc8: 7417 58f8 

  0x000000011f394dcc: ;   {external_word}
  0x000000011f394dcc: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f394dd8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394dd8: e4f0 e871 

  0x000000011f394ddc: ;*daload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
  0x000000011f394ddc: 01c2 eef4 
 ;; B51: #	out( B40 ) <- in( B12 )  Freq: 1.01327e-06
  0x000000011f394de0: c4c1 f96e | c6c5 fb10 | 5424 38e9 | e8fe ffff 
 ;; B52: #	out( N635 ) <- in( B19 )  Freq: 1.01327e-06
  0x000000011f394df0: ;   {external_word}
  0x000000011f394df0: 48bf a66d | 6f0e 0100 | 0000 4883 

  0x000000011f394dfc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394dfc: e4f0 e84d | 01c2 eef4 
 ;; B53: #	out( N635 ) <- in( B20 )  Freq: 1.01327e-06
  0x000000011f394e04: ;   {external_word}
  0x000000011f394e04: 48bf a66d | 6f0e 0100 | 0000 4883 

  0x000000011f394e10: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394e10: e4f0 e839 | 01c2 eef4 
 ;; B54: #	out( N635 ) <- in( B21 )  Freq: 1.01327e-06
  0x000000011f394e18: ;   {external_word}
  0x000000011f394e18: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f394e24: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394e24: e4f0 e825 | 01c2 eef4 
 ;; B55: #	out( N635 ) <- in( B22 )  Freq: 1.01326e-06
  0x000000011f394e2c: ;   {external_word}
  0x000000011f394e2c: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f394e38: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394e38: e4f0 e811 | 01c2 eef4 
 ;; B56: #	out( N635 ) <- in( B23 )  Freq: 1.01326e-06
  0x000000011f394e40: ;   {external_word}
  0x000000011f394e40: 48bf 3165 | 6f0e 0100 | 0000 4883 

  0x000000011f394e4c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394e4c: e4f0 e8fd | 00c2 eef4 
 ;; B57: #	out( N635 ) <- in( B24 )  Freq: 1.01326e-06
  0x000000011f394e54: ;   {external_word}
  0x000000011f394e54: 48bf 3165 | 6f0e 0100 | 0000 4883 22.672 ms/op


  0x000000011f394e60: # Warmup Iteration   5: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394e60: e4f0 e8e9 | 00c2 eef4 
 ;; B58: #	out( N635 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
  0x000000011f394e68: be8d ffff | ff48 891c | 2448 ff74 | 2428 488f | 4424 0848 | ff74 2430 | 488f 4424 | 104c 8974 
  0x000000011f394e88: 2418 4489 | 6424 284c | 896c 2430 

  0x000000011f394e94: ;   {runtime_call UncommonTrapBlob}
  0x000000011f394e94: c5f8 77e8 

  0x000000011f394e98: ; ImmutableOopMap {rbp=Oop [0]=Oop [48]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f394e98: a416 58f8 

  0x000000011f394e9c: ;   {external_word}
  0x000000011f394e9c: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f394ea8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394ea8: e4f0 e8a1 | 00c2 eef4 
 ;; B59: #	out( N635 ) <- in( B10 )  Freq: 1.01328e-06
  0x000000011f394eb0: be76 ffff | ff48 8be8 | 4889 1424 | 4889 5c24 | 0848 ff74 | 2428 488f | 4424 1048 | ff74 2430 
  0x000000011f394ed0: 488f 4424 | 184c 8974 | 2420 4489 | 6424 3090 

  0x000000011f394ee0: ;   {runtime_call UncommonTrapBlob}
  0x000000011f394ee0: c5f8 77e8 

  0x000000011f394ee4: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f394ee4: 5816 58f8 

  0x000000011f394ee8: ;   {external_word}
  0x000000011f394ee8: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f394ef4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394ef4: e4f0 e855 | 00c2 eef4 
 ;; B60: #	out( N635 ) <- in( B11 )  Freq: 1.01327e-06
  0x000000011f394efc: bebe ffff | ff48 8be8 | 4889 1424 | 4889 5c24 | 0848 ff74 | 2428 488f | 4424 1048 | ff74 2430 
  0x000000011f394f1c: 488f 4424 | 184c 8974 | 2420 4489 | 6424 3090 

  0x000000011f394f2c: ;   {runtime_call UncommonTrapBlob}
  0x000000011f394f2c: c5f8 77e8 

  0x000000011f394f30: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*iload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
  0x000000011f394f30: 0c16 58f8 

  0x000000011f394f34: ;   {external_word}
  0x000000011f394f34: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f394f40: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394f40: e4f0 e809 

  0x000000011f394f44: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f394f44: 00c2 eef4 
 ;; B61: #	out( N635 ) <- in( B40 )  Freq: 1.01326e-06
  0x000000011f394f48: bef6 ffff | ffc4 e1f9 | 7ec5 9090 

  0x000000011f394f54: ;   {runtime_call UncommonTrapBlob}
  0x000000011f394f54: c5f8 77e8 

  0x000000011f394f58: ; ImmutableOopMap {}
                      ;*putfield slope {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f394f58: e415 58f8 

  0x000000011f394f5c: ;   {external_word}
  0x000000011f394f5c: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f394f68: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f394f68: e4f0 e8e1 

  0x000000011f394f6c: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f394f6c: ffc1 eef4 

  0x000000011f394f70: ;   {internal_word}
  0x000000011f394f70: 49ba 024d | 391f 0100 | 0000 4d89 | 97e8 0300 

  0x000000011f394f80: ;   {runtime_call SafepointBlob}
  0x000000011f394f80: 00e9 9a22 | 58f8 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011f394fa0: ;   {no_reloc}
  0x000000011f394fa0: e97b c14c | f8e8 0000 | 0000 4883 

  0x000000011f394fac: ;   {runtime_call DeoptimizationBlob}
  0x000000011f394fac: 2c24 05e9 | ac18 58f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011f394fb8:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011f394fc0:   0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
  0x000000011f394fc8:   0x0000000230840618 {type array double}
  0x000000011f394fd0:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011f3947df offset=ffffffff bits=0):
PcDesc(pc=0x000000011f3948ad offset=cd bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
PcDesc(pc=0x000000011f3948b1 offset=d1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@81 (line 25)
PcDesc(pc=0x000000011f3948b5 offset=d5 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f3948be offset=de bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f3948f6 offset=116 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f39490c offset=12c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f394919 offset=139 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f394941 offset=161 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f394944 offset=164 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f394949 offset=169 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f3949d9 offset=1f9 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f3949de offset=1fe bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f3949f4 offset=214 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f394a21 offset=241 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f394a46 offset=266 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f394a4a offset=26a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f394a53 offset=273 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f394a91 offset=2b1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f394afd offset=31d bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f394ba9 offset=3c9 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f394c40 offset=460 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f394c49 offset=469 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f394c52 offset=472 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f394c59 offset=479 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rax [0],oop
    - l1: reg rdx [4],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg r13 [26],double
    - l13: 0
    - l14: reg xmm0 [48],double
    - l15: reg r12 [24],int
PcDesc(pc=0x000000011f394c5c offset=47c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f394c94 offset=4b4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
PcDesc(pc=0x000000011f394caa offset=4ca bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f394cb2 offset=4d2 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f394cd0 offset=4f0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f394cd3 offset=4f3 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f394cd8 offset=4f8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f394cdc offset=4fc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
PcDesc(pc=0x000000011f394ce5 offset=505 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f394cfa offset=51a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
PcDesc(pc=0x000000011f394d70 offset=590 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
   Locals
    - l0: stack[8],oop
    - l1: stack[56],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[32],double
    - l9: 0
    - l10: stack[40],double
    - l11: empty
    - l12: empty
    - l13: 0
    - l14: reg rbp [10],double
    - l15: stack[52]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[56],oop
    - @3: stack[52]
PcDesc(pc=0x000000011f394d84 offset=5a4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
PcDesc(pc=0x000000011f394dcc offset=5ec bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: stack[16],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: empty
    - l14: empty
    - l15: stack[60]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: 0
    - @3: stack[8],double
    - @4: stack[64],oop
    - @5: stack[60]
PcDesc(pc=0x000000011f394de0 offset=600 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
PcDesc(pc=0x000000011f394e9c offset=6bc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[8],double
    - l9: 0
    - l10: stack[16],double
    - l11: 0
    - l12: stack[24],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[40]
PcDesc(pc=0x000000011f394ee8 offset=708 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: stack[32],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[48]
PcDesc(pc=0x000000011f394f34 offset=754 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: stack[32],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[48]
PcDesc(pc=0x000000011f394f48 offset=768 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f394f5c offset=77c bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: NULL
    - @1: 0
    - @2: reg rbp [10],double
PcDesc(pc=0x000000011f394f70 offset=790 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f394fb9 offset=7d9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 7 OopMaps

ImmutableOopMap {rbx=Oop rdx=Oop rax=Oop } pc offsets: 1145 
ImmutableOopMap {[8]=Oop [24]=Oop [56]=Oop } pc offsets: 1424 
ImmutableOopMap {[16]=Oop [24]=Oop [64]=Oop } pc offsets: 1516 
ImmutableOopMap {rbp=Oop [0]=Oop [48]=Oop } pc offsets: 1724 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1800 1876 
ImmutableOopMap {} pc offsets: 1916 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011f3948ad offset=cd):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
ScopeDesc(pc=0x000000011f3948b1 offset=d1):
   org.jml.regression.linear.DoubleLinearRegression::fit@81 (line 25)
ScopeDesc(pc=0x000000011f3948b5 offset=d5):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f3948be offset=de):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f3948f6 offset=116):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f39490c offset=12c):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f394919 offset=139):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f394941 offset=161):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f394944 offset=164):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f394949 offset=169):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f3949d9 offset=1f9):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f3949de offset=1fe):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f3949f4 offset=214):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f394a21 offset=241):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f394a46 offset=266):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f394a4a offset=26a):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f394a53 offset=273):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f394a91 offset=2b1):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f394afd offset=31d):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f394ba9 offset=3c9):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f394c40 offset=460):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f394c49 offset=469):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f394c52 offset=472):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f394c59 offset=479):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rax [0],oop
    - l1: reg rdx [4],oop
    - l2: reg rbx [6],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg r13 [26],double
    - l13: 0
    - l14: reg xmm0 [48],double
    - l15: reg r12 [24],int
ScopeDesc(pc=0x000000011f394c5c offset=47c):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f394c94 offset=4b4):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
ScopeDesc(pc=0x000000011f394caa offset=4ca):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f394cb2 offset=4d2):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f394cd0 offset=4f0):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f394cd3 offset=4f3):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f394cd8 offset=4f8):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f394cdc offset=4fc):
   org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
ScopeDesc(pc=0x000000011f394ce5 offset=505):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x000000011f394cfa offset=51a):
   org.jml.regression.linear.DoubleLinearRegression::fit@151 (line 32)
ScopeDesc(pc=0x000000011f394d70 offset=590):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
   Locals
    - l0: stack[8],oop
    - l1: stack[56],oop
    - l2: stack[24],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[32],double
    - l9: 0
    - l10: stack[40],double
    - l11: empty
    - l12: empty
    - l13: 0
    - l14: reg rbp [10],double
    - l15: stack[52]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: stack[56],oop
    - @3: stack[52]
ScopeDesc(pc=0x000000011f394d84 offset=5a4):
   org.jml.regression.linear.DoubleLinearRegression::fit@90 (line 26)
ScopeDesc(pc=0x000000011f394dcc offset=5ec):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
   Locals
    - l0: stack[16],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[40],double
    - l9: 0
    - l10: stack[48],double
    - l11: 0
    - l12: reg rbp [10],double
    - l13: empty
    - l14: empty
    - l15: stack[60]
   Expression stack
    - @0: 0
    - @1: stack[0],double
    - @2: 0
    - @3: stack[8],double
    - @4: stack[64],oop
    - @5: stack[60]
ScopeDesc(pc=0x000000011f394de0 offset=600):
   org.jml.regression.linear.DoubleLinearRegression::fit@117 (line 27)
ScopeDesc(pc=0x000000011f394e9c offset=6bc):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[8],double
    - l9: 0
    - l10: stack[16],double
    - l11: 0
    - l12: stack[24],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[40]
ScopeDesc(pc=0x000000011f394ee8 offset=708):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: stack[32],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[48]
ScopeDesc(pc=0x000000011f394f34 offset=754):
   org.jml.regression.linear.DoubleLinearRegression::fit@78 (line 25)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: stack[16],double
    - l9: 0
    - l10: stack[24],double
    - l11: 0
    - l12: stack[32],double
    - l13: 0
    - l14: stack[56],double
    - l15: stack[48]
ScopeDesc(pc=0x000000011f394f48 offset=768):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x000000011f394f5c offset=77c):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: NULL
    - @1: 0
    - @2: reg rbp [10],double
ScopeDesc(pc=0x000000011f394f70 offset=790):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011f394708: 6400
relocInfo@0x000000011f394708 [type=6(runtime_call) addr=0x000000011f3947e0 offset=0 format=1] | [destination=0x000000010e14bfa0]
         @0x000000011f39470a: f001cc80
relocInfo@0x000000011f39470c [type=12(metadata) addr=0x000000011f394860 offset=128 format=3 data=1] | [metadata_addr=0x000000011f394fc0 *=0x000000023090e900 offset=0]metadata_value=0x000000023090e900: 'org/jml/regression/linear/DoubleLinearRegression'
         @0x000000011f39470e: f002cc20
relocInfo@0x000000011f394710 [type=12(metadata) addr=0x000000011f394880 offset=32 format=3 data=2] | [metadata_addr=0x000000011f394fc8 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f394712: f002cc20
relocInfo@0x000000011f394714 [type=12(metadata) addr=0x000000011f3948a0 offset=32 format=3 data=2] | [metadata_addr=0x000000011f394fc8 *=0x0000000230840618 offset=0]metadata_value=0x0000000230840618: {type array double}
         @0x000000011f394716: a3b9
relocInfo@0x000000011f394716 [type=10(poll) addr=0x000000011f394c59 offset=953]
         @0x000000011f394718: b0a9
relocInfo@0x000000011f394718 [type=11(poll_return) addr=0x000000011f394d02 offset=169]
         @0x000000011f39471a: 6469
relocInfo@0x000000011f39471a [type=6(runtime_call) addr=0x000000011f394d6b offset=105 format=1] | [destination=0x0000000117916540]
         @0x000000011f39471c: f8030e67b77700017005
relocInfo@0x000000011f394724 [type=7(external_word) addr=0x000000011f394d70 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f394726: 640e
relocInfo@0x000000011f394726 [type=6(runtime_call) addr=0x000000011f394d7e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f394728: 6449
relocInfo@0x000000011f394728 [type=6(runtime_call) addr=0x000000011f394dc7 offset=73 format=1] | [destination=0x0000000117916540]
         @0x000000011f39472a: f8030e67b77700017005
relocInfo@0x000000011f394732 [type=7(external_word) addr=0x000000011f394dcc offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f394734: 640e
relocInfo@0x000000011f394734 [type=6(runtime_call) addr=0x000000011f394dda offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f394736: f8030e6f6da600017016
relocInfo@0x000000011f39473e [type=7(external_word) addr=0x000000011f394df0 offset=22 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f394740: 640e
relocInfo@0x000000011f394740 [type=6(runtime_call) addr=0x000000011f394dfe offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f394742: f8030e6f6da600017006
relocInfo@0x000000011f39474a [type=7(external_word) addr=0x000000011f394e04 offset=6 data={0e6f6da60001}] | [target=0x000000010e6f6da6]
         @0x000000011f39474c: 640e
relocInfo@0x000000011f39474c [type=6(runtime_call) addr=0x000000011f394e12 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39474e: f8030e6f653100017006
relocInfo@0x000000011f394756 [type=7(external_word) addr=0x000000011f394e18 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f394758: 640e
relocInfo@0x000000011f394758 [type=6(runtime_call) addr=0x000000011f394e26 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39475a: f8030e6f653100017006
relocInfo@0x000000011f394762 [type=7(external_word) addr=0x000000011f394e2c offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f394764: 640e
relocInfo@0x000000011f394764 [type=6(runtime_call) addr=0x000000011f394e3a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f394766: f8030e6f653100017006
relocInfo@0x000000011f39476e [type=7(external_word) addr=0x000000011f394e40 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f394770: 640e
relocInfo@0x000000011f394770 [type=6(runtime_call) addr=0x000000011f394e4e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f394772: f8030e6f653100017006
relocInfo@0x000000011f39477a [type=7(external_word) addr=0x000000011f394e54 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f39477c: 640e
relocInfo@0x000000011f39477c [type=6(runtime_call) addr=0x000000011f394e62 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39477e: 6435
relocInfo@0x000000011f39477e [type=6(runtime_call) addr=0x000000011f394e97 offset=53 format=1] | [destination=0x0000000117916540]
         @0x000000011f394780: f8030e67b77700017005
relocInfo@0x000000011f394788 [type=7(external_word) addr=0x000000011f394e9c offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f39478a: 640e
relocInfo@0x000000011f39478a [type=6(runtime_call) addr=0x000000011f394eaa offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39478c: 6439
relocInfo@0x000000011f39478c [type=6(runtime_call) addr=0x000000011f394ee3 offset=57 format=1] | [destination=0x0000000117916540]
         @0x000000011f39478e: f8030e67b77700017005
relocInfo@0x000000011f394796 [type=7(external_word) addr=0x000000011f394ee8 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f394798: 640e
relocInfo@0x000000011f394798 [type=6(runtime_call) addr=0x000000011f394ef6 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39479a: 6439
relocInfo@0x000000011f39479a [type=6(runtime_call) addr=0x000000011f394f2f offset=57 format=1] | [destination=0x0000000117916540]
         @0x000000011f39479c: f8030e67b77700017005
relocInfo@0x000000011f3947a4 [type=7(external_word) addr=0x000000011f394f34 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f3947a6: 640e
relocInfo@0x000000011f3947a6 [type=6(runtime_call) addr=0x000000011f394f42 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3947a8: 6415
relocInfo@0x000000011f3947a8 [type=6(runtime_call) addr=0x000000011f394f57 offset=21 format=1] | [destination=0x0000000117916540]
         @0x000000011f3947aa: f8030e67b77700017005
relocInfo@0x000000011f3947b2 [type=7(external_word) addr=0x000000011f394f5c offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f3947b4: 640e
relocInfo@0x000000011f3947b4 [type=6(runtime_call) addr=0x000000011f394f6a offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3947b6: f26e8006
relocInfo@0x000000011f3947b8 [type=8(internal_word) addr=0x000000011f394f70 offset=6 data=622] | [target=0x000000011f394d02]
         @0x000000011f3947ba: 6411
relocInfo@0x000000011f3947ba [type=6(runtime_call) addr=0x000000011f394f81 offset=17 format=1] | [destination=0x0000000117917220]
         @0x000000011f3947bc: 001f
relocInfo@0x000000011f3947bc [type=0(none) addr=0x000000011f394fa0 offset=31]
         @0x000000011f3947be: 6400
relocInfo@0x000000011f3947be [type=6(runtime_call) addr=0x000000011f394fa0 offset=0 format=1] | [destination=0x0000000117861120]
         @0x000000011f3947c0: 640f
relocInfo@0x000000011f3947c0 [type=6(runtime_call) addr=0x000000011f394faf offset=15 format=1] | [destination=0x0000000117916860]
         @0x000000011f3947c2: 0000
relocInfo@0x000000011f3947c2 [type=0(none) addr=0x000000011f394faf offset=0]
         @0x000000011f3947c4: 0000
relocInfo@0x000000011f3947c4 [type=0(none) addr=0x000000011f394faf offset=0]
         @0x000000011f3947c6: 0000
relocInfo@0x000000011f3947c6 [type=0(none) addr=0x000000011f394faf offset=0]
         @0x000000011f3947c8: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type leaf_type
  context = org.jml.regression.linear.DoubleLinearRegression
   [nmethod<=klass]org.jml.regression.linear.DoubleLinearRegression
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x000000011f3948ad, 0x000000011f394eb0 > < 0x000000011f3948b1, 0x000000011f394efc > < 0x000000011f394ce0, 0x000000011f394f48 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000023090e900 'org/jml/regression/linear/DoubleLinearRegression'
#2: 0x0000000230840618 {type array double}
#3: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
23.220 ms/op
# Warmup Iteration   6: 
============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 995 ------------------------
{method}
 - this oop:          0x0000000272c8fa60
 - method holder:     'org/jml/regression/linear/DoubleLinearRegression'
 - constants:         0x0000000272c8f518 constant pool [71]/operands[5] {0x0000000272c8f518} for 'org/jml/regression/linear/DoubleLinearRegression' cache=0x0000000272c8fe20
 - access:            0xc1000001  public 
 - name:              'fit'
 - signature:         '([D[D)V'
 - max stack:         9
 - max locals:        16
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x000000011780de20
 - adapters:          AHE@0x00007fa51303fe70: 0xbbb00000 i2c: 0x0000000117885ee0 c2i: 0x0000000117885fbf c2iUV: 0x0000000117885f92 c2iNCI: 0x0000000117885ffc
 - compiled entry     0x0000000117f30a40
 - code size:         155
 - code start:        0x0000000272c8f928
 - code end (excl):   0x0000000272c8f9c3
 - method data:       0x0000000272f04000
 - checked ex length: 0
 - linenumber start:  0x0000000272c8f9c3
 - localvar length:   11
 - localvar start:    0x0000000272c8f9da
 - compiled code: nmethod   2826  982       3       org.jml.regression.linear.DoubleLinearRegression::fit (155 bytes)

------------------------ OptoAssembly for Compile_id = 995 -----------------------
#
#  void ( org/jml/regression/linear/DoubleLinearRegression:NotNull *, double[int:>=0]:exact *, double[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: org/jml/regression/linear/DoubleLinearRegression:NotNull *
#r016 rdx:rdx   : parm 1: double[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: double[int:>=0]:exact *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N606: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 12 bytes pad for loops and calls

020     B1: #	out( B63 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    RBP, RSI	# spill
02f     movl    R12, [RDX + #12 (8-bit)]	# range
033     NullCheck RDX

033     B2: #	out( B64 B3 ) <- in( B1 )  Freq: 0.999999
033     movl    RBX, [RCX + #12 (8-bit)]	# range
036     NullCheck RCX

036     B3: #	out( B56 B4 ) <- in( B2 )  Freq: 0.999998
036     cmpl    R12, RBX
039     jne     B56  P=0.000001 C=-1.000000

03f     B4: #	out( B57 B5 ) <- in( B3 )  Freq: 0.999997
03f     cvtsi2sdl XMM4, R12	# i2d
044     xorpd   XMM0, XMM0	# double 0.0
048     testl   R12, R12	# unsigned
04b     jbe,u   B57  P=0.000001 C=19902916.000000

051     B5: #	out( B46 B6 ) <- in( B4 )  Freq: 0.999996
051     movl    R11, R12	# spill
054     decl    R11	# int
057     cmpl    R11, R12	# unsigned
        nop 	# 6 bytes pad for loops and calls
060     jnb,u   B46  P=0.000001 C=-1.000000

066     B6: #	out( B46 B7 ) <- in( B5 )  Freq: 0.999995
066     testl   RBX, RBX	# unsigned
068     jbe,u   B46  P=0.000001 C=-1.000000

06e     B7: #	out( B46 B8 ) <- in( B6 )  Freq: 0.999994
06e     cmpl    R11, RBX	# unsigned
071     jnb,u   B46  P=0.000001 C=-1.000000

077     B8: #	out( B47 B9 ) <- in( B7 )  Freq: 0.999993
077     vaddsd  XMM1, XMM0, [RDX + #16 (8-bit)]
07c     vaddsd  XMM2, XMM0, [RCX + #16 (8-bit)]
081     movl    R10, R12	# spill
084     addl    R10, #-7	# int
088     movl    RAX, #1	# int
08d     xorl    RDI, RDI	# int
08f     # TLS is in R15
08f     cmpl    R10, #1
093     jle     B47  P=0.000001 C=-1.000000

099     B9: #	out( B58 B10 ) <- in( B8 )  Freq: 0.999992
099     cmpl    RBX, #1	# unsigned
        nop 	# 4 bytes pad for loops and calls
0a0     jbe,u   B58  P=0.000001 C=-1.000000

0a6     B10: #	out( B59 B11 ) <- in( B9 )  Freq: 0.999991
0a6     cmpl    R12, #1	# unsigned
0aa     jbe,u   B59  P=0.000001 C=-1.000000

0b0     B11: #	out( B60 B12 ) <- in( B10 )  Freq: 0.99999
0b0     cmpl    R12, #8	# unsigned
0b4     jbe,u   B60  P=0.000001 C=-1.000000

0ba     B12: #	out( B61 B13 ) <- in( B11 )  Freq: 0.999989
        nop 	# 6 bytes pad for loops and calls
0c0     cmpl    RBX, #1	# unsigned
0c3     jbe,u   B61  P=0.000001 C=-1.000000

0c9     B13: #	out( B62 B14 ) <- in( B12 )  Freq: 0.999988
0c9     cmpl    RBX, #8	# unsigned
0cc     jbe,u   B62  P=0.000001 C=-1.000000

0d2     B14: #	out( B15 ) <- in( B13 )  Freq: 0.999987
0d2     movl    R11, #8000	# int
0d8     movl    R9, #1	# int

0de     B15: #	out( B16 ) <- in( B14 B17 ) Loop( B15-B17 ) Freq: 986882
0de     movl    R8, R12	# spill
0e1     subl    R8, R9	# int
0e4     addl    R8, #-7	# int
0e8     cmpl    R10, R9
0eb     cmovll R8, RDI	# signed, int
0ef     cmpl    R8, #8000	# unsigned
0f6     cmovlnbe R8, R11	# unsigned, int
0fa     addl    R8, R9	# int
        nop 	# 3 bytes pad for loops and calls

100     B16: #	out( B16 B17 ) <- in( B15 B16 ) Loop( B16-B16 inner main of N123 strip mined) Freq: 9.73949e+11
100     vaddsd  XMM1, XMM1, [RDX + #16 + R9 << #3]
107     vaddsd  XMM2, XMM2, [RCX + #16 + R9 << #3]
10e     vaddsd  XMM1, XMM1, [RDX + #24 + R9 << #3]
115     vaddsd  XMM2, XMM2, [RCX + #24 + R9 << #3]
11c     vaddsd  XMM1, XMM1, [RDX + #32 + R9 << #3]
123     vaddsd  XMM2, XMM2, [RCX + #32 + R9 << #3]
12a     vaddsd  XMM1, XMM1, [RDX + #40 + R9 << #3]
131     vaddsd  XMM2, XMM2, [RCX + #40 + R9 << #3]
138     vaddsd  XMM1, XMM1, [RDX + #48 + R9 << #3]
13f     vaddsd  XMM2, XMM2, [RCX + #48 + R9 << #3]
146     vaddsd  XMM1, XMM1, [RDX + #56 + R9 << #3]
14d     vaddsd  XMM2, XMM2, [RCX + #56 + R9 << #3]
154     vaddsd  XMM1, XMM1, [RDX + #64 + R9 << #3]
15b     vaddsd  XMM2, XMM2, [RCX + #64 + R9 << #3]
162     vaddsd  XMM1, XMM1, [RDX + #72 + R9 << #3]
169     vaddsd  XMM2, XMM2, [RCX + #72 + R9 << #3]
170     addl    R9, #8	# int
174     cmpl    R9, R8
177     jl,s   B16	# loop end  P=0.999999 C=19902912.000000

179     B17: #	out( B15 B18 ) <- in( B16 )  Freq: 986882
179     movq    RSI, [R15 + #304 (32-bit)]	# ptr
180     testl   rax, [RSI]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:51 (line 15) L[0]=RBP L[1]=RDX L[2]=RCX L[3]=XMM1 L[4]=_ L[5]=XMM2 L[6]=_ L[7]=R9 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {rcx=Oop rdx=Oop rbp=Oop off=384/0x180}
182     cmpl    R9, R10
185     jl     B15  P=0.999999 C=19902912.000000

18b     B18: #	out( B21 B19 ) <- in( B47 B17 )  Freq: 0.999988
18b     cmpl    R9, R12
18e     jge,s   B21  P=0.500000 C=-1.000000

190     B19: #	out( B20 ) <- in( B18 )  Freq: 0.499994
190     # castII of R9

190     B20: #	out( B20 B21 ) <- in( B19 B20 ) Loop( B20-B20 inner post of N417) Freq: 0.999988
190     vaddsd  XMM1, XMM1, [RDX + #16 + R9 << #3]
197     vaddsd  XMM2, XMM2, [RCX + #16 + R9 << #3]
19e     incl    R9	# int
1a1     cmpl    R9, R12
1a4     jl,s   B20	# loop end  P=0.500000 C=19902912.000000

1a6     B21: #	out( B22 ) <- in( B20 B18 )  Freq: 0.999988
1a6     vdivsd  XMM3, XMM2, XMM4
1aa     vdivsd  XMM4, XMM1, XMM4
1ae     movl    R11, RCX	# ptr -> int
1b1     shrl    R11, #3
1b5     andl    R11, #3	# int
1b9     subl    RAX, R11	# int
1bc     andl    RAX, #3	# int
1bf     incl    RAX	# int
1c1     cmpl    RAX, R12
1c4     cmovlgt RAX, R12	# min
1c8     xorl    R8, R8	# int
1cb     xorpd   XMM1, XMM1	# double 0.0

1cf     B22: #	out( B24 B23 ) <- in( B21 B23 ) Loop( B22-B23 inner pre of N427) Freq: 1.99998
1cf     movsd   XMM5, [RCX + #16 + R8 << #3]	# double
1d6     movsd   XMM6, [RDX + #16 + R8 << #3]	# double
1dd     vsubsd  XMM5, XMM5, XMM3
1e1     vsubsd  XMM2, XMM6, XMM4
1e5     vmulsd  XMM6, XMM2, XMM2
1e9     vmulsd  XMM2, XMM5, XMM2
1ed     vaddsd  XMM0, XMM0, XMM6
1f1     vaddsd  XMM1, XMM1, XMM2
1f5     movl    R10, R8	# spill
1f8     incl    R10	# int
        nop 	# 5 bytes pad for loops and calls
200     cmpl    R10, RAX
203     jge,s   B24	# loop end  P=0.500000 C=20001024.000000

205     B23: #	out( B22 ) <- in( B22 )  Freq: 0.999988
205     movl    R8, R10	# spill
208     jmp,s   B22

20a     B24: #	out( B42 B25 ) <- in( B22 )  Freq: 0.999988
20a     movl    R11, R12	# spill
20d     addl    R11, #-15	# int
211     cmpl    R10, R11
214     jge     B42  P=0.000001 C=-1.000000

21a     B25: #	out( B48 B26 ) <- in( B24 )  Freq: 0.999987
        nop 	# 6 bytes pad for loops and calls
220     cmpl    R10, RBX	# unsigned
223     jnb,u   B48  P=0.000001 C=-1.000000

229     B26: #	out( B49 B27 ) <- in( B25 )  Freq: 0.999986
229     cmpl    R10, RBX	# unsigned
22c     jnb,u   B49  P=0.000001 C=-1.000000

232     B27: #	out( B50 B28 ) <- in( B26 )  Freq: 0.999985
232     cmpl    R10, R12	# unsigned
235     jnb,u   B50  P=0.000001 C=-1.000000

23b     B28: #	out( B51 B29 ) <- in( B27 )  Freq: 0.999984
        nop 	# 5 bytes pad for loops and calls
240     cmpl    R10, R12	# unsigned
243     jnb,u   B51  P=0.000001 C=-1.000000

249     B29: #	out( B52 B30 ) <- in( B28 )  Freq: 0.999983
249     cmpl    R10, R12	# unsigned
24c     jnb,u   B52  P=0.000001 C=-1.000000

252     B30: #	out( B53 B31 ) <- in( B29 )  Freq: 0.999982
252     addl    R8, #16	# int
256     cmpl    R8, R12	# unsigned
259     jnb,u   B53  P=0.000001 C=-1.000000

25f     B31: #	out( B54 B32 ) <- in( B30 )  Freq: 0.999981
        nop 	# 1 bytes pad for loops and calls
260     cmpl    R10, RBX	# unsigned
263     jnb,u   B54  P=0.000001 C=-1.000000

269     B32: #	out( B55 B33 ) <- in( B31 )  Freq: 0.99998
269     cmpl    R8, RBX	# unsigned
26c     jnb,u   B55  P=0.000001 C=-1.000000

272     B33: #	out( B35 ) <- in( B32 )  Freq: 0.999979
272     replicateD XMM13,XMM3
277     replicateD XMM14,XMM4
27c     movl    R9, #16000	# int
282     jmp,s   B35

284     B34: #	out( B35 ) <- in( B37 ) top-of-loop Freq: 986873
284     movdq   XMM3, RBX	# spill
289     movdq   XMM4, RSI	# spill

28e     B35: #	out( B36 ) <- in( B33 B34 ) Loop( B35-B34 ) Freq: 986874
28e     movl    R8, R12	# spill
291     subl    R8, R10	# int
294     addl    R8, #-15	# int
298     cmpl    R11, R10
29b     cmovll R8, RDI	# signed, int
29f     cmpl    R8, #16000	# unsigned
2a6     cmovlnbe R8, R9	# unsigned, int
2aa     addl    R8, R10	# int
2ad     movdq   RBX, XMM3	# spill
2b2     movdq   RSI, XMM4	# spill
        nop 	# 9 bytes pad for loops and calls

2c0     B36: #	out( B36 B37 ) <- in( B35 B36 ) Loop( B36-B36 inner main of N251 strip mined) Freq: 9.73941e+11
2c0     load_vector XMM2,[RCX + #112 + R10 << #3]
2c7     load_vector XMM9,[RCX + #80 + R10 << #3]
2ce     load_vector XMM11,[RCX + #48 + R10 << #3]
2d5     load_vector XMM12,[RCX + #16 + R10 << #3]
2dc     load_vector XMM4,[RDX + #112 + R10 << #3]
2e3     load_vector XMM6,[RDX + #80 + R10 << #3]
2ea     load_vector XMM3,[RDX + #48 + R10 << #3]
2f1     load_vector XMM7,[RDX + #16 + R10 << #3]
2f8     vsubpd  XMM5,XMM2,XMM13	! sub packedD
2fd     vsubpd  XMM7,XMM7,XMM14	! sub packedD
302     vsubpd  XMM8,XMM3,XMM14	! sub packedD
307     vmulpd  XMM2,XMM7,XMM7	! mul packedD
30b     vmulpd  XMM3,XMM8,XMM8	! mul packedD
310     vsubpd  XMM10,XMM6,XMM14	! sub packedD
315     vsubpd  XMM6,XMM4,XMM14	! sub packedD
31a     vmulpd  XMM4,XMM10,XMM10	! mul packedD
31f     vmulpd  XMM5,XMM5,XMM6	! mul packedD
323     vmulpd  XMM6,XMM6,XMM6	! mul packedD
327     vsubpd  XMM12,XMM12,XMM13	! sub packedD
32c     vsubpd  XMM11,XMM11,XMM13	! sub packedD
331     vmulpd  XMM7,XMM12,XMM7	! mul packedD
335     vmulpd  XMM8,XMM11,XMM8	! mul packedD
33a     vsubpd  XMM9,XMM9,XMM13	! sub packedD
33f     vmulpd  XMM9,XMM9,XMM10	! mul packedD
344     vector_reduction_double XMM0,XMM2 ; using XMM12, XMM15 as TEMP
368     vector_reduction_double XMM0,XMM3 ; using XMM2, XMM12 as TEMP
38b     vector_reduction_double XMM0,XMM4 ; using XMM2, XMM3 as TEMP
3ab     vector_reduction_double XMM0,XMM6 ; using XMM2, XMM3 as TEMP
3cb     vector_reduction_double XMM1,XMM7 ; using XMM2, XMM3 as TEMP
3eb     vector_reduction_double XMM1,XMM8 ; using XMM2, XMM3 as TEMP
40d     vector_reduction_double XMM1,XMM9 ; using XMM2, XMM3 as TEMP
42f     vector_reduction_double XMM1,XMM5 ; using XMM11, XMM10 as TEMP
453     addl    R10, #16	# int
457     cmpl    R10, R8
        nop 	# 6 bytes pad for loops and calls
460     jl     B36	# loop end  P=0.999999 C=20001024.000000

466     B37: #	out( B34 B38 ) <- in( B36 )  Freq: 986874
466     movq    RAX, [R15 + #304 (32-bit)]	# ptr
46d     testl   rax, [RAX]	# Safepoint: poll for GC        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:128 (line 25) L[0]=RBP L[1]=RDX L[2]=RCX L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=RSI L[8]=_ L[9]=RBX L[10]=_ L[11]=XMM0 L[12]=_ L[13]=XMM1 L[14]=_ L[15]=R10
        # OopMap {rcx=Oop rdx=Oop rbp=Oop off=1133/0x46d}
46f     cmpl    R10, R11
472     jl     B34  P=0.999999 C=20001024.000000

478     B38: #	out( B41 B39 ) <- in( B37 )  Freq: 0.999979
478     movl    R8, R12	# spill
47b     addl    R8, #-3	# int
        nop 	# 1 bytes pad for loops and calls
480     cmpl    R10, R8
483     jge     B41  P=0.500000 C=-1.000000

489     B39: #	out( B40 ) <- in( B38 )  Freq: 0.499989
489     # castII of R10
        nop 	# 3 bytes pad for loops and calls

48c     B40: #	out( B40 B41 ) <- in( B39 B40 ) Loop( B40-B40 inner post of N1227) Freq: 0.999979
48c     load_vector XMM2,[RDX + #16 + R10 << #3]
493     load_vector XMM3,[RCX + #16 + R10 << #3]
49a     vsubpd  XMM2,XMM2,XMM14	! sub packedD
49f     vsubpd  XMM3,XMM3,XMM13	! sub packedD
4a4     vmulpd  XMM4,XMM2,XMM2	! mul packedD
4a8     vmulpd  XMM2,XMM3,XMM2	! mul packedD
4ac     vector_reduction_double XMM1,XMM2 ; using XMM5, XMM3 as TEMP
4cc     vector_reduction_double XMM0,XMM4 ; using XMM2, XMM3 as TEMP
4ec     addl    R10, #4	# int
4f0     cmpl    R10, R8
4f3     jl,s   B40	# loop end  P=0.500000 C=20001024.000000

4f5     B41: #	out( B42 ) <- in( B40 B38 )  Freq: 0.999979
4f5     movdq   XMM3, RBX	# spill
4fa     movdq   XMM4, RSI	# spill

4ff     B42: #	out( B45 B43 ) <- in( B24 B41 )  Freq: 0.99998
        nop 	# 1 bytes pad for loops and calls
500     cmpl    R10, R12
503     jge,s   B45  P=0.500000 C=-1.000000

505     B43: #	out( B44 ) <- in( B42 )  Freq: 0.49999
505     # castII of R10
        nop 	# 3 bytes pad for loops and calls

508     B44: #	out( B44 B45 ) <- in( B43 B44 ) Loop( B44-B44 inner post of N427) Freq: 0.99998
508     movsd   XMM5, [RDX + #16 + R10 << #3]	# double
50f     movsd   XMM6, [RCX + #16 + R10 << #3]	# double
516     vsubsd  XMM5, XMM5, XMM4
51a     vsubsd  XMM2, XMM6, XMM3
51e     vmulsd  XMM6, XMM5, XMM5
522     vmulsd  XMM2, XMM2, XMM5
526     vaddsd  XMM0, XMM0, XMM6
52a     vaddsd  XMM1, XMM1, XMM2
52e     incl    R10	# int
531     cmpl    R10, R12
534     jl,s   B44	# loop end  P=0.500000 C=20001024.000000

536     B45: #	out( N606 ) <- in( B44 B42 B57 )  Freq: 0.999981
536     vdivsd  XMM0, XMM1, XMM0
53a     movsd   [RBP + #24 (8-bit)], XMM0	# double ! Field: org/jml/regression/linear/DoubleLinearRegression.slope
53f     vmulsd  XMM0, XMM4, XMM0
543     vsubsd  XMM0, XMM3, XMM0
547     movsd   [RBP + #16 (8-bit)], XMM0	# double ! Field: org/jml/regression/linear/DoubleLinearRegression.intercept
54c     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

561     ret

562     B46: #	out( N606 ) <- in( B7 B6 B5 )  Freq: 3.02654e-06
562     movl    RSI, #-138	# int
567     movq    [rsp + #0], RDX	# spill
56b     movq    [rsp + #8], RCX	# spill
570     movl    [rsp + #16], R12	# spill
        nop 	# 3 bytes pad for loops and calls
578     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:29 (line 15) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#0.000000D L[4]=_ L[5]=#0.000000D L[6]=_ L[7]=#0 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=#0 STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1408/0x580}
580     stop	# ShouldNotReachHere

594     B47: #	out( B18 ) <- in( B8 )  Freq: 1.01327e-06
594     movl    R9, #1	# int
59a     jmp     B18

59f     B48: #	out( N606 ) <- in( B25 )  Freq: 1.01327e-06
59f     stop	# ShouldNotReachHere

5b3     B49: #	out( N606 ) <- in( B26 )  Freq: 1.01326e-06
5b3     stop	# ShouldNotReachHere

5c7     B50: #	out( N606 ) <- in( B27 )  Freq: 1.01326e-06
5c7     stop	# ShouldNotReachHere

5db     B51: #	out( N606 ) <- in( B28 )  Freq: 1.01326e-06
5db     stop	# ShouldNotReachHere

5ef     B52: #	out( N606 ) <- in( B29 )  Freq: 1.01326e-06
5ef     stop	# ShouldNotReachHere

603     B53: #	out( N606 ) <- in( B30 )  Freq: 1.01326e-06
603     stop	# ShouldNotReachHere

617     B54: #	out( N606 ) <- in( B31 )  Freq: 1.01326e-06
617     stop	# ShouldNotReachHere

62b     B55: #	out( N606 ) <- in( B32 )  Freq: 1.01326e-06
62b     stop	# ShouldNotReachHere

63f     B56: #	out( N606 ) <- in( B3 )  Freq: 9.99998e-07
63f     movl    RSI, #7	# int
644     call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='7' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:7 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_
        # OopMap {off=1612/0x64c}
64c     stop	# ShouldNotReachHere

660     B57: #	out( B45 ) <- in( B4 )  Freq: 9.99997e-07
660     vdivsd  XMM3, XMM0, XMM4
664     xorpd   XMM1, XMM1	# double 0.0
668     movapd  XMM4, XMM3	# spill
66c     jmp     B45

671     B58: #	out( N606 ) <- in( B9 )  Freq: 9.99992e-07
671     stop	# ShouldNotReachHere

685     B59: #	out( N606 ) <- in( B10 )  Freq: 9.99991e-07
685     stop	# ShouldNotReachHere

699     B60: #	out( N606 ) <- in( B11 )  Freq: 9.9999e-07
699     stop	# ShouldNotReachHere

6ad     B61: #	out( N606 ) <- in( B12 )  Freq: 9.99989e-07
6ad     stop	# ShouldNotReachHere

6c1     B62: #	out( N606 ) <- in( B13 )  Freq: 9.99988e-07
6c1     stop	# ShouldNotReachHere

6d5     B63: #	out( N606 ) <- in( B1 )  Freq: 1.01328e-06
6d5     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
6dc     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:1 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=#NULL
        # OopMap {off=1764/0x6e4}
6e4     stop	# ShouldNotReachHere

6f8     B64: #	out( N606 ) <- in( B2 )  Freq: 1.01328e-06
6f8     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
700     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # org.jml.regression.linear.DoubleLinearRegression::fit @ bci:3 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ L[14]=_ L[15]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=1800/0x708}
708     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2833  995       4       org.jml.regression.linear.DoubleLinearRegression::fit (155 bytes)
 total in heap  [0x000000011f396310,0x000000011f397260] = 3920
 relocation     [0x000000011f396488,0x000000011f396570] = 232
 main code      [0x000000011f396580,0x000000011f396cc0] = 1856
 stub code      [0x000000011f396cc0,0x000000011f396cd8] = 24
 oops           [0x000000011f396cd8,0x000000011f396ce0] = 8
 metadata       [0x000000011f396ce0,0x000000011f396ce8] = 8
 scopes data    [0x000000011f396ce8,0x000000011f396e40] = 344
 scopes pcs     [0x000000011f396e40,0x000000011f397240] = 1024
 dependencies   [0x000000011f397240,0x000000011f397248] = 8
 nul chk table  [0x000000011f397248,0x000000011f397260] = 24

[Constant Pool (empty)]

[MachCode]
[Entry Point]
  # {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
  # this:     rsi:rsi   = 'org/jml/regression/linear/DoubleLinearRegression'
  # parm0:    rdx:rdx   = '[D'
  # parm1:    rcx:rcx   = '[D'
  #           [sp+0x40]  (sp of caller)
 ;; N606: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f396580: 448b 5608 | 49c1 e203 

  0x000000011f396588: ;   {runtime_call ic_miss_stub}
  0x000000011f396588: 493b c20f | 858f f357 | f890 9090 | 9090 9090 | 9090 9090 | 9090 9090 
[Verified Entry Point]
 ;; B1: #	out( B63 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x000000011f3965a0: 8984 2400 | a0fe ff55 

  0x000000011f3965a8: ;*synchronization entry
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
  0x000000011f3965a8: 4883 ec30 | 488b ee44 

  0x000000011f3965b0: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
  0x000000011f3965b0: 8b62 0c8b 

  0x000000011f3965b4: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
  0x000000011f3965b4: 590c 443b | e30f 8500 

  0x000000011f3965bc: ;*if_icmpeq {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
  0x000000011f3965bc: 0600 00c4 

  0x000000011f3965c0: ;*i2d {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@57 (line 20)
  0x000000011f3965c0: c15b 2ae4 | c5f9 57c0 | 4585 e40f | 860f 0600 

  0x000000011f3965d0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f3965d0: 0045 8bdc | 41ff cb45 | 3bdc 9090 | 9090 9090 | 0f83 fc04 | 0000 85db | 0f86 f404 | 0000 443b 
  0x000000011f3965f0: db0f 83eb | 0400 00c5 

  0x000000011f3965f8: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f3965f8: fb58 4a10 | c5fb 5851 

  0x000000011f396600: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f396600: 1045 8bd4 | 4183 c2f9 | b801 0000 

  0x000000011f39660c: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x000000011f39660c: 0033 ff41 | 83fa 010f | 8efb 0400 | 0083 fb01 | 9090 9090 | 0f86 cb05 | 0000 4183 | fc01 0f86 
  0x000000011f39662c: d505 0000 
 ;; B11: #	out( B60 B12 ) <- in( B10 )  Freq: 0.99999
  0x000000011f396630: 4183 fc08 | 0f86 df05 | 0000 9090 | 9090 9090 | 83fb 010f | 86e4 0500 | 0083 fb08 | 0f86 ef05 
  0x000000011f396650: 0000 41bb | 401f 0000 | 41b9 0100 | 0000 458b | c445 2bc1 | 4183 c0f9 | 453b d144 | 0f4c c741 
  0x000000011f396670: 81f8 401f | 0000 450f | 47c3 4503 

  0x000000011f39667c: ;*dload_3 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@32 (line 16)
  0x000000011f39667c: c190 9090 
 ;; B16: #	out( B16 B17 ) <- in( B15 B16 ) Loop( B16-B16 inner main of N123 strip mined) Freq: 9.73949e+11
  0x000000011f396680: c4a1 7358 | 4cca 10c4 | a16b 5854 | c910 c4a1 | 7358 4cca | 18c4 a16b | 5854 c918 | c4a1 7358 
  0x000000011f3966a0: 4cca 20c4 | a16b 5854 | c920 c4a1 | 7358 4cca | 28c4 a16b | 5854 c928 | c4a1 7358 | 4cca 30c4 
  0x000000011f3966c0: a16b 5854 | c930 c4a1 | 7358 4cca | 38c4 a16b | 5854 c938 | c4a1 7358 | 4cca 40c4 | a16b 5854 
  0x000000011f3966e0: c940 c4a1 | 7358 4cca 

  0x000000011f3966e8: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f3966e8: 48c4 a16b 

  0x000000011f3966ec: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f3966ec: 5854 c948 

  0x000000011f3966f0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f3966f0: 4183 c108 | 453b c87c 

  0x000000011f3966f8: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f3966f8: 8749 8bb7 

  0x000000011f3966fc: ; ImmutableOopMap {rcx=Oop rdx=Oop rbp=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
  0x000000011f3966fc: 3001 0000 

  0x000000011f396700: ;*goto {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
                      ;   {poll}
  0x000000011f396700: 8506 453b | ca0f 8c53 | ffff ff45 

  0x000000011f39670c: ;*dload_3 {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@32 (line 16)
  0x000000011f39670c: 3bcc 7d16 
 ;; B19: #	out( B20 ) <- in( B18 )  Freq: 0.499994
 ;; B20: #	out( B20 B21 ) <- in( B19 B20 ) Loop( B20-B20 inner post of N417) Freq: 0.999988
  0x000000011f396710: c4a1 7358 

  0x000000011f396714: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
  0x000000011f396714: 4cca 10c4 | a16b 5854 

  0x000000011f39671c: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
  0x000000011f39671c: c910 41ff 

  0x000000011f396720: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
  0x000000011f396720: c145 3bcc 

  0x000000011f396724: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f396724: 7cea c5eb 

  0x000000011f396728: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@66 (line 21)
  0x000000011f396728: 5edc c5f3 

  0x000000011f39672c: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
  0x000000011f39672c: 5ee4 448b | d941 c1eb | 0341 83e3 | 0341 2bc3 | 83e0 03ff | c041 3bc4 | 410f 4fc4 | 4533 c0c5 
  0x000000011f39674c: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f39674c: f157 c9c4 | a17b 106c | c110 c4a1 | 7b10 74c2 | 10c5 d35c | ebc5 cb5c 

  0x000000011f396764: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f396764: d4c5 eb59 | f2c5 d359 | d2c5 fb58 

  0x000000011f396770: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f396770: c6c5 f358 

  0x000000011f396774: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f396774: ca45 8bd0 

  0x000000011f396778: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f396778: 41ff c290 | 9090 9090 | 443b d07d 

  0x000000011f396784: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f396784: 0545 8bc2 | ebc5 458b | dc41 83c3 | f145 3bd3 | 0f8d e502 | 0000 9090 | 9090 9090 | 443b d30f 
  0x000000011f3967a4: 8376 0300 | 0044 3bd3 | 0f83 8103 | 0000 453b | d40f 838c | 0300 0090 | 9090 9090 | 453b d40f 
  0x000000011f3967c4: 8392 0300 | 0045 3bd4 | 0f83 9d03 | 0000 4183 | c010 453b | c40f 83a4 | 0300 0090 | 443b d30f 
  0x000000011f3967e4: 83ae 0300 | 0044 3bc3 | 0f83 b903 | 0000 c462 | 7d19 ebc4 | 627d 19f4 | 41b9 803e | 0000 eb0a 
 ;; B34: #	out( B35 ) <- in( B37 ) top-of-loop Freq: 986873
  0x000000011f396804: c4e1 f96e | dbc4 e1f9 | 6ee6 458b | c445 2bc2 | 4183 c0f1 | 453b da44 | 0f4c28.836 ms/op
 c741 | 81f8 803e 
  0x000000011f396824: 0000 450f | 47c1 4503 | c2c4 e1f9 | 7edb c4e1 | f97e e690 | 9090 9090 

  0x000000011f39683c: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::# Warmup Iteration   7: fit@85 (line 26)
  0x000000011f39683c: 9090 9090 
 ;; B36: #	out( B36 B37 ) <- in( B35 B36 ) Loop( B36-B36 inner main of N251 strip mined) Freq: 9.73941e+11
  0x000000011f396840: c4a1 7e6f | 54d1 70c4 | 217e 6f4c | d150 c421 | 7e6f 5cd1 | 30c4 217e | 6f64 d110 | c4a1 7e6f 
  0x000000011f396860: 64d2 70c4 | a17e 6f74 | d250 c4a1 | 7e6f 5cd2 | 30c4 a17e | 6f7c d210 | c4c1 6d5c | edc4 c145 
  0x000000011f396880: 5cfe c441 | 655c c6c5 | c559 d7c4 | c13d 59d8 | c441 4d5c | d6c4 c15d 

  0x000000011f396898: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f396898: 5cf6 c4c1 | 2d59 e2c5 | d559 eec5 | cd59 f6c4 | 411d 5ce5 | c441 255c | ddc5 9d59 | ffc4 4125 
  0x000000011f3968b8: 59c0 c441 | 355c cdc4 | 4135 59ca | c5fb 58c2 | c579 70fa | 0ec4 c17b | 58c7 c4c3 | 7d19 d701 
  0x000000011f3968d8: c4c1 7b58 | c7c4 4179 | 70e7 0ec4 | c17b 58c4 | c5fb 58c3 | c579 70e3 | 0ec4 c17b | 58c4 c4c3 
  0x000000011f3968f8: 7d19 dc01 | c4c1 7b58 | c4c4 c179 | 70d4 0ec5 | fb58 c2c5 | fb58 c4c5 | f970 dc0e | c5fb 58c3 
  0x000000011f396918: c4e3 7d19 | e301 c5fb | 58c3 c5f9 | 70d3 0ec5 | fb58 c2c5 | fb58 c6c5 | f970 de0e | c5fb 58c3 
  0x000000011f396938: c4e3 7d19 | f301 c5fb | 58c3 c5f9 | 70d3 0ec5 

  0x000000011f396948: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f396948: fb58 c2c5 | f358 cfc5 | f970 df0e | c5f3 58cb | c4e3 7d19 | fb01 c5f3 | 58cb c5f9 | 70d3 0ec5 
  0x000000011f396968: f358 cac4 | c173 58c8 | c4c1 7970 | d80e c5f3 | 58cb c463 | 7d19 c301 | c5f3 58cb | c5f9 70d3 
  0x000000011f396988: 0ec5 f358 | cac4 c173 | 58c9 c4c1 | 7970 d90e | c5f3 58cb | c463 7d19 | cb01 c5f3 | 58cb c5f9 
  0x000000011f3969a8: 70d3 0ec5 | f358 cac5 | f358 cdc5 | 7970 d50e | c4c1 7358 | cac4 c37d | 19ea 01c4 | c173 58ca 
  0x000000011f3969c8: c441 7970 | da0e c4c1 

  0x000000011f3969d0: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f3969d0: 7358 cb41 

  0x000000011f3969d4: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f3969d4: 83c2 1045 | 3bd0 9090 | 9090 9090 | 0f8c 5afe 

  0x000000011f3969e4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f3969e4: ffff 498b | 8730 0100 

  0x000000011f3969ec: ; ImmutableOopMap {rcx=Oop rdx=Oop rbp=Oop }
                      ;*goto {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
                      ;   {poll}
  0x000000011f3969ec: 0085 0045 | 3bd3 0f8c | 0cfe ffff 
 ;; B38: #	out( B41 B39 ) <- in( B37 )  Freq: 0.999979
  0x000000011f3969f8: 458b c441 | 83c0 fd90 | 453b d00f | 8d6c 0000 

  0x000000011f396a08: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f396a08: 0090 9090 
 ;; B40: #	out( B40 B41 ) <- in( B39 B40 ) Loop( B40-B40 inner post of N1227) Freq: 0.999979
  0x000000011f396a0c: c4a1 7e6f | 54d2 10c4 | a17e 6f5c | d110 c4c1 

  0x000000011f396a1c: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f396a1c: 6d5c d6c4 | c165 5cdd | c5ed 59e2 | c5e5 59d2 | c5f3 58ca | c5f9 70da | 0ec5 f358 | cbc4 e37d 
  0x000000011f396a3c: 19d3 01c5 | f358 cbc5 | f970 eb0e 

  0x000000011f396a48: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f396a48: c5f3 58cd | c5fb 58c4 | c5f9 70dc | 0ec5 fb58 | c3c4 e37d | 19e3 01c5 | fb58 c3c5 | f970 d30e 
  0x000000011f396a68: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f396a68: c5fb 58c2 

  0x000000011f396a6c: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f396a6c: 4183 c204 | 453b d07c 

  0x000000011f396a74: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f396a74: 97c4 e1f9 | 6edb c4e1 | f96e e690 | 453b d47d 

  0x000000011f396a84: ;*dload {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
  0x000000011f396a84: 3190 9090 
 ;; B44: #	out( B44 B45 ) <- in( B43 B44 ) Loop( B44-B44 inner post of N427) Freq: 0.99998
  0x000000011f396a88: c4a1 7b10 | 6cd2 10c4 | a17b 1074 | d110 c5d3 

  0x000000011f396a98: ;*dsub {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
  0x000000011f396a98: 5cec c5cb | 5cd3 c5d3 | 59f5 c5eb | 59d5 c5fb 

  0x000000011f396aa8: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
  0x000000011f396aa8: 58c6 c5f3 

  0x000000011f396aac: ;*dadd {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
  0x000000011f396aac: 58ca 41ff 

  0x000000011f396ab0: ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
  0x000000011f396ab0: c245 3bd4 

  0x000000011f396ab4: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
  0x000000011f396ab4: 7cd2 c5f3 

  0x000000011f396ab8: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
  0x000000011f396ab8: 5ec0 c5fb 

  0x000000011f396abc: ;*putfield slope {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
  0x000000011f396abc: 1145 18c5 | db59 c0c5 | e35c c0c5 

  0x000000011f396ac8: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
  0x000000011f396ac8: fb11 4510 | c5f8 7748 | 83c4 305d 

  0x000000011f396ad4: ;   {poll_return}
  0x000000011f396ad4: 493b a728 | 0100 000f | 87bb 0100 

  0x000000011f396ae0: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f396ae0: 00c3 be76 | ffff ff48 | 8914 2448 | 894c 2408 | 4489 6424 | 1090 9090 

  0x000000011f396af8: ;   {runtime_call UncommonTrapBlob}
  0x000000011f396af8: c5f8 77e8 

  0x000000011f396afc: ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f396afc: 40fa 57f8 

  0x000000011f396b00: ;   {external_word}
  0x000000011f396b00: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f396b0c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b0c: e4f0 e83d 

  0x000000011f396b10: ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
  0x000000011f396b10: e4c1 eef4 
 ;; B47: #	out( B18 ) <- in( B8 )  Freq: 1.01327e-06
  0x000000011f396b14: 41b9 0100 | 0000 e9ec 

  0x000000011f396b1c: ;   {external_word}
  0x000000011f396b1c: fbff ff48 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396b2c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b2c: f0e8 1ee4 

  0x000000011f396b30: ;   {external_word}
  0x000000011f396b30: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396b40: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b40: f0e8 0ae4 

  0x000000011f396b44: ;   {external_word}
  0x000000011f396b44: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396b54: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b54: f0e8 f6e3 

  0x000000011f396b58: ;   {external_word}
  0x000000011f396b58: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396b68: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b68: f0e8 e2e3 

  0x000000011f396b6c: ;   {external_word}
  0x000000011f396b6c: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396b7c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b7c: f0e8 cee3 

  0x000000011f396b80: ;   {external_word}
  0x000000011f396b80: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396b90: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396b90: f0e8 bae3 

  0x000000011f396b94: ;   {external_word}
  0x000000011f396b94: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396ba4: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396ba4: f0e8 a6e3 

  0x000000011f396ba8: ;   {external_word}
  0x000000011f396ba8: c1ee f448 | bf31 656f | 0e01 0000 | 0048 83e4 

  0x000000011f396bb8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396bb8: f0e8 92e3 | c1ee f4be | 0700 0000 

  0x000000011f396bc4: ;   {runtime_call UncommonTrapBlob}
  0x000000011f396bc4: c5f8 77e8 

  0x000000011f396bc8: ; ImmutableOopMap {}
                      ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x000000011f396bc8: 74f9 57f8 

  0x000000011f396bcc: ;   {external_word}
  0x000000011f396bcc: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f396bd8: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396bd8: e4f0 e871 

  0x000000011f396bdc: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
  0x000000011f396bdc: e3c1 eef4 
 ;; B57: #	out( B45 ) <- in( B4 )  Freq: 9.99997e-07
  0x000000011f396be0: ;*ddiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
  0x000000011f396be0: c5fb 5edc | c5f1 57c9 | c5f9 28e3 | e9c5 feff 

  0x000000011f396bf0: ;   {external_word}
  0x000000011f396bf0: ff48 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f396bfc: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396bfc: 83e4 f0e8 | 4ce3 c1ee 

  0x000000011f396c04: ;   {external_word}
  0x000000011f396c04: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f396c10: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396c10: 83e4 f0e8 | 38e3 c1ee 

  0x000000011f396c18: ;   {external_word}
  0x000000011f396c18: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f396c24: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396c24: 83e4 f0e8 | 24e3 c1ee 

  0x000000011f396c2c: ;   {external_word}
  0x000000011f396c2c: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f396c38: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396c38: 83e4 f0e8 | 10e3 c1ee 

  0x000000011f396c40: ;   {external_word}
  0x000000011f396c40: f448 bf31 | 656f 0e01 | 0000 0048 

  0x000000011f396c4c: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396c4c: 83e4 f0e8 | fce2 c1ee | f4be f6ff | ffff 9090 

  0x000000011f396c5c: ;   {runtime_call UncommonTrapBlob}
  0x000000011f396c5c: c5f8 77e8 

  0x000000011f396c60: ; ImmutableOopMap {}
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
  0x000000011f396c60: dcf8 57f8 

  0x000000011f396c64: ;   {external_word}
  0x000000011f396c64: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f396c70: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396c70: e4f0 e8d9 

  0x000000011f396c74: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
  0x000000011f396c74: e2c1 eef4 
 ;; B64: #	out( N606 ) <- in( B2 )  Freq: 1.01328e-06
  0x000000011f396c78: bef6 ffff | ff90 9090 

  0x000000011f396c80: ;   {runtime_call UncommonTrapBlob}
  0x000000011f396c80: c5f8 77e8 

  0x000000011f396c84: ; ImmutableOopMap {}
                      ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
  0x000000011f396c84: b8f8 57f8 

  0x000000011f396c88: ;   {external_word}
  0x000000011f396c88: 48bf 77b7 | 670e 0100 | 0000 4883 

  0x000000011f396c94: ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011f396c94: e4f0 e8b5 

  0x000000011f396c98: ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                      ; - org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
  0x000000011f396c98: e2c1 eef4 

  0x000000011f396c9c: ;   {internal_word}
  0x000000011f396c9c: 49ba d46a | 391f 0100 | 0000 4d89 | 97e8 0300 

  0x000000011f396cac: ;   {runtime_call SafepointBlob}
  0x000000011f396cac: 00e9 6e05 | 58f8 f4f4 | f4f4 f4f4 | f4f4 f4f4 | f4f4 f4f4 
[Exception Handler]
  0x000000011f396cc0: ;   {no_reloc}
  0x000000011f396cc0: e95b a44c | f8e8 0000 | 0000 4883 

  0x000000011f396ccc: ;   {runtime_call DeoptimizationBlob}
  0x000000011f396ccc: 2c24 05e9 | 8cfb 57f8 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x000000011f396cd8:   0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x000000011f396ce0:   0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x000000011f39657f offset=ffffffff bits=0):
PcDesc(pc=0x000000011f3965ac offset=2c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
PcDesc(pc=0x000000011f3965b3 offset=33 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
PcDesc(pc=0x000000011f3965b6 offset=36 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
PcDesc(pc=0x000000011f3965bf offset=3f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
PcDesc(pc=0x000000011f3965c4 offset=44 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@57 (line 20)
PcDesc(pc=0x000000011f3965d1 offset=51 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f3965fc offset=7c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f396601 offset=81 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f39660f offset=8f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f396680 offset=100 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@32 (line 16)
PcDesc(pc=0x000000011f3966e9 offset=169 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f3966f0 offset=170 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f3966f4 offset=174 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f3966f9 offset=179 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f396700 offset=180 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm1 [64],double
    - l5: 0
    - l6: reg xmm2 [80],double
    - l7: reg r9 [18],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f396702 offset=182 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
PcDesc(pc=0x000000011f396710 offset=190 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@32 (line 16)
PcDesc(pc=0x000000011f396717 offset=197 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
PcDesc(pc=0x000000011f39671e offset=19e bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
PcDesc(pc=0x000000011f396721 offset=1a1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
PcDesc(pc=0x000000011f396726 offset=1a6 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f39672a offset=1aa bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@66 (line 21)
PcDesc(pc=0x000000011f39672e offset=1ae bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
PcDesc(pc=0x000000011f39674f offset=1cf bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f396765 offset=1e5 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f396771 offset=1f1 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f396775 offset=1f5 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f39677b offset=1fb bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f396785 offset=205 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f396840 offset=2c0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f39689a offset=31a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f39694b offset=3cb bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f3969d3 offset=453 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f3969d7 offset=457 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f3969e6 offset=466 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f3969ed offset=46d bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg rsi [12],double
    - l9: 0
    - l10: reg rbx [6],double
    - l11: 0
    - l12: reg xmm0 [48],double
    - l13: 0
    - l14: reg xmm1 [64],double
    - l15: reg r10 [20],int
PcDesc(pc=0x000000011f3969ef offset=46f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
PcDesc(pc=0x000000011f396a0c offset=48c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f396a1f offset=49f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f396a4c offset=4cc bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f396a6c offset=4ec bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f396a70 offset=4f0 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f396a75 offset=4f5 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f396a88 offset=508 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
PcDesc(pc=0x000000011f396a9a offset=51a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
PcDesc(pc=0x000000011f396aaa offset=52a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
PcDesc(pc=0x000000011f396aae offset=52e bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
PcDesc(pc=0x000000011f396ab1 offset=531 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
PcDesc(pc=0x000000011f396ab6 offset=536 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
PcDesc(pc=0x000000011f396aba offset=53a bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
PcDesc(pc=0x000000011f396abf offset=53f bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
PcDesc(pc=0x000000011f396acc offset=54c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
PcDesc(pc=0x000000011f396ae2 offset=562 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f396b00 offset=580 bits=1):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: 0.000000
    - l5: 0
    - l6: 0.000000
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[16]
PcDesc(pc=0x000000011f396b14 offset=594 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
PcDesc(pc=0x000000011f396bcc offset=64c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
PcDesc(pc=0x000000011f396be0 offset=660 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
PcDesc(pc=0x000000011f396be4 offset=664 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
PcDesc(pc=0x000000011f396c64 offset=6e4 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: NULL
PcDesc(pc=0x000000011f396c78 offset=6f8 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
PcDesc(pc=0x000000011f396c88 offset=708 bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: empty
    - @1: NULL
PcDesc(pc=0x000000011f396c9c offset=71c bits=0):   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
PcDesc(pc=0x000000011f396cd9 offset=759 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 6 OopMaps

ImmutableOopMap {rcx=Oop rdx=Oop rbp=Oop } pc offsets: 384 1133 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1408 
ImmutableOopMap {} pc offsets: 1612 1764 1800 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x000000011f3965ac offset=2c):
   org.jml.regression.linear.DoubleLinearRegression::fit@-1 (line 11)
ScopeDesc(pc=0x000000011f3965b3 offset=33):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x000000011f3965b6 offset=36):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x000000011f3965bf offset=3f):
   org.jml.regression.linear.DoubleLinearRegression::fit@4 (line 11)
ScopeDesc(pc=0x000000011f3965c4 offset=44):
   org.jml.regression.linear.DoubleLinearRegression::fit@57 (line 20)
ScopeDesc(pc=0x000000011f3965d1 offset=51):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f3965fc offset=7c):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f396601 offset=81):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f39660f offset=8f):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f396680 offset=100):
   org.jml.regression.linear.DoubleLinearRegression::fit@32 (line 16)
ScopeDesc(pc=0x000000011f3966e9 offset=169):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f3966f0 offset=170):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f3966f4 offset=174):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f3966f9 offset=179):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f396700 offset=180):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: 0
    - l4: reg xmm1 [64],double
    - l5: 0
    - l6: reg xmm2 [80],double
    - l7: reg r9 [18],int
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f396702 offset=182):
   org.jml.regression.linear.DoubleLinearRegression::fit@51 (line 15)
ScopeDesc(pc=0x000000011f396710 offset=190):
   org.jml.regression.linear.DoubleLinearRegression::fit@32 (line 16)
ScopeDesc(pc=0x000000011f396717 offset=197):
   org.jml.regression.linear.DoubleLinearRegression::fit@37 (line 16)
ScopeDesc(pc=0x000000011f39671e offset=19e):
   org.jml.regression.linear.DoubleLinearRegression::fit@45 (line 17)
ScopeDesc(pc=0x000000011f396721 offset=1a1):
   org.jml.regression.linear.DoubleLinearRegression::fit@48 (line 15)
ScopeDesc(pc=0x000000011f396726 offset=1a6):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f39672a offset=1aa):
   org.jml.regression.linear.DoubleLinearRegression::fit@66 (line 21)
ScopeDesc(pc=0x000000011f39672e offset=1ae):
   org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
ScopeDesc(pc=0x000000011f39674f offset=1cf):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f396765 offset=1e5):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f396771 offset=1f1):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f396775 offset=1f5):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f39677b offset=1fb):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f396785 offset=205):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f396840 offset=2c0):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f39689a offset=31a):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f39694b offset=3cb):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f3969d3 offset=453):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f3969d7 offset=457):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f3969e6 offset=466):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f3969ed offset=46d):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
    - l8: reg rsi [12],double
    - l9: 0
    - l10: reg rbx [6],double
    - l11: 0
    - l12: reg xmm0 [48],double
    - l13: 0
    - l14: reg xmm1 [64],double
    - l15: reg r10 [20],int
ScopeDesc(pc=0x000000011f3969ef offset=46f):
   org.jml.regression.linear.DoubleLinearRegression::fit@128 (line 25)
ScopeDesc(pc=0x000000011f396a0c offset=48c):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f396a1f offset=49f):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f396a4c offset=4cc):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f396a6c offset=4ec):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f396a70 offset=4f0):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f396a75 offset=4f5):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f396a88 offset=508):
   org.jml.regression.linear.DoubleLinearRegression::fit@85 (line 26)
ScopeDesc(pc=0x000000011f396a9a offset=51a):
   org.jml.regression.linear.DoubleLinearRegression::fit@93 (line 26)
ScopeDesc(pc=0x000000011f396aaa offset=52a):
   org.jml.regression.linear.DoubleLinearRegression::fit@102 (line 26)
ScopeDesc(pc=0x000000011f396aae offset=52e):
   org.jml.regression.linear.DoubleLinearRegression::fit@122 (line 27)
ScopeDesc(pc=0x000000011f396ab1 offset=531):
   org.jml.regression.linear.DoubleLinearRegression::fit@125 (line 25)
ScopeDesc(pc=0x000000011f396ab6 offset=536):
   org.jml.regression.linear.DoubleLinearRegression::fit@82 (line 25)
ScopeDesc(pc=0x000000011f396aba offset=53a):
   org.jml.regression.linear.DoubleLinearRegression::fit@136 (line 31)
ScopeDesc(pc=0x000000011f396abf offset=53f):
   org.jml.regression.linear.DoubleLinearRegression::fit@137 (line 31)
ScopeDesc(pc=0x000000011f396acc offset=54c):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
ScopeDesc(pc=0x000000011f396ae2 offset=562):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f396b00 offset=580):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
    - l4: 0.000000
    - l5: 0
    - l6: 0.000000
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: 0
    - @1: stack[16]
ScopeDesc(pc=0x000000011f396b14 offset=594):
   org.jml.regression.linear.DoubleLinearRegression::fit@29 (line 15)
ScopeDesc(pc=0x000000011f396bcc offset=64c):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
ScopeDesc(pc=0x000000011f396be0 offset=660):
   org.jml.regression.linear.DoubleLinearRegression::fit@7 (line 11)
ScopeDesc(pc=0x000000011f396be4 offset=664):
   org.jml.regression.linear.DoubleLinearRegression::fit@58 (line 20)
ScopeDesc(pc=0x000000011f396c64 offset=6e4):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x000000011f396c78 offset=6f8):
   org.jml.regression.linear.DoubleLinearRegression::fit@1 (line 11)
ScopeDesc(pc=0x000000011f396c88 offset=708):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
    - l14: empty
    - l15: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x000000011f396c9c offset=71c):
   org.jml.regression.linear.DoubleLinearRegression::fit@3 (line 11)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x000000011f396488: 600b
relocInfo@0x000000011f396488 [type=6(runtime_call) addr=0x000000011f39658b offset=11] | [destination=0x0000000117915920]
         @0x000000011f39648a: a175
relocInfo@0x000000011f39648a [type=10(poll) addr=0x000000011f396700 offset=373]
         @0x000000011f39648c: a2ed
relocInfo@0x000000011f39648c [type=10(poll) addr=0x000000011f3969ed offset=749]
         @0x000000011f39648e: b0e7
relocInfo@0x000000011f39648e [type=11(poll_return) addr=0x000000011f396ad4 offset=231]
         @0x000000011f396490: 6427
relocInfo@0x000000011f396490 [type=6(runtime_call) addr=0x000000011f396afb offset=39 format=1] | [destination=0x0000000117916540]
         @0x000000011f396492: f8030e67b77700017005
relocInfo@0x000000011f39649a [type=7(external_word) addr=0x000000011f396b00 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f39649c: 640e
relocInfo@0x000000011f39649c [type=6(runtime_call) addr=0x000000011f396b0e offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39649e: f8030e6f653100017011
relocInfo@0x000000011f3964a6 [type=7(external_word) addr=0x000000011f396b1f offset=17 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964a8: 640e
relocInfo@0x000000011f3964a8 [type=6(runtime_call) addr=0x000000011f396b2d offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964aa: f8030e6f653100017006
relocInfo@0x000000011f3964b2 [type=7(external_word) addr=0x000000011f396b33 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964b4: 640e
relocInfo@0x000000011f3964b4 [type=6(runtime_call) addr=0x000000011f396b41 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964b6: f8030e6f653100017006
relocInfo@0x000000011f3964be [type=7(external_word) addr=0x000000011f396b47 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964c0: 640e
relocInfo@0x000000011f3964c0 [type=6(runtime_call) addr=0x000000011f396b55 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964c2: f8030e6f653100017006
relocInfo@0x000000011f3964ca [type=7(external_word) addr=0x000000011f396b5b offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964cc: 640e
relocInfo@0x000000011f3964cc [type=6(runtime_call) addr=0x000000011f396b69 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964ce: f8030e6f653100017006
relocInfo@0x000000011f3964d6 [type=7(external_word) addr=0x000000011f396b6f offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964d8: 640e
relocInfo@0x000000011f3964d8 [type=6(runtime_call) addr=0x000000011f396b7d offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964da: f8030e6f653100017006
relocInfo@0x000000011f3964e2 [type=7(external_word) addr=0x000000011f396b83 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964e4: 640e
relocInfo@0x000000011f3964e4 [type=6(runtime_call) addr=0x000000011f396b91 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964e6: f8030e6f653100017006
relocInfo@0x000000011f3964ee [type=7(external_word) addr=0x000000011f396b97 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964f0: 640e
relocInfo@0x000000011f3964f0 [type=6(runtime_call) addr=0x000000011f396ba5 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964f2: f8030e6f653100017006
relocInfo@0x000000011f3964fa [type=7(external_word) addr=0x000000011f396bab offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f3964fc: 640e
relocInfo@0x000000011f3964fc [type=6(runtime_call) addr=0x000000011f396bb9 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f3964fe: 640e
relocInfo@0x000000011f3964fe [type=6(runtime_call) addr=0x000000011f396bc7 offset=14 format=1] | [destination=0x0000000117916540]
         @0x000000011f396500: f8030e67b77700017005
relocInfo@0x000000011f396508 [type=7(external_word) addr=0x000000011f396bcc offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f39650a: 640e
relocInfo@0x000000011f39650a [type=6(runtime_call) addr=0x000000011f396bda offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39650c: f8030e6f653100017017
relocInfo@0x000000011f396514 [type=7(external_word) addr=0x000000011f396bf1 offset=23 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f396516: 640e
relocInfo@0x000000011f396516 [type=6(runtime_call) addr=0x000000011f396bff offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f396518: f8030e6f653100017006
relocInfo@0x000000011f396520 [type=7(external_word) addr=0x000000011f396c05 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f396522: 640e
relocInfo@0x000000011f396522 [type=6(runtime_call) addr=0x000000011f396c13 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f396524: f8030e6f653100017006
relocInfo@0x000000011f39652c [type=7(external_word) addr=0x000000011f396c19 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f39652e: 640e
relocInfo@0x000000011f39652e [type=6(runtime_call) addr=0x000000011f396c27 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f396530: f8030e6f653100017006
relocInfo@0x000000011f396538 [type=7(external_word) addr=0x000000011f396c2d offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f39653a: 640e
relocInfo@0x000000011f39653a [type=6(runtime_call) addr=0x000000011f396c3b offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f39653c: f8030e6f653100017006
relocInfo@0x000000011f396544 [type=7(external_word) addr=0x000000011f396c41 offset=6 data={0e6f65310001}] | [target=0x000000010e6f6531]
         @0x000000011f396546: 640e
relocInfo@0x000000011f396546 [type=6(runtime_call) addr=0x000000011f396c4f offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f396548: 6410
relocInfo@0x000000011f396548 [type=6(runtime_call) addr=0x000000011f396c5f offset=16 format=1] | [destination=0x0000000117916540]
         @0x000000011f39654a: f8030e67b77700017005
relocInfo@0x000000011f396552 [type=7(external_word) addr=0x000000011f396c64 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f396554: 640e
relocInfo@0x000000011f396554 [type=6(runtime_call) addr=0x000000011f396c72 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f396556: 6411
relocInfo@0x000000011f396556 [type=6(runtime_call) addr=0x000000011f396c83 offset=17 format=1] | [destination=0x0000000117916540]
         @0x000000011f396558: f8030e67b77700017005
relocInfo@0x000000011f396560 [type=7(external_word) addr=0x000000011f396c88 offset=5 data={0e67b7770001}] | [target=0x000000010e67b777]
         @0x000000011f396562: 640e
relocInfo@0x000000011f396562 [type=6(runtime_call) addr=0x000000011f396c96 offset=14 format=1] | [destination=0x000000010dfb4f50]
         @0x000000011f396564: f1c88006
relocInfo@0x000000011f396566 [type=8(internal_word) addr=0x000000011f396c9c offset=6 data=456] | [target=0x000000011f396ad4]
         @0x000000011f396568: 6411
relocInfo@0x000000011f396568 [type=6(runtime_call) addr=0x000000011f396cad offset=17 format=1] | [destination=0x0000000117917220]
         @0x000000011f39656a: 0013
relocInfo@0x000000011f39656a [type=0(none) addr=0x000000011f396cc0 offset=19]
         @0x000000011f39656c: 6400
relocInfo@0x000000011f39656c [type=6(runtime_call) addr=0x000000011f396cc0 offset=0 format=1] | [destination=0x0000000117861120]
         @0x000000011f39656e: 640f
relocInfo@0x000000011f39656e [type=6(runtime_call) addr=0x000000011f396ccf offset=15 format=1] | [destination=0x0000000117916860]
         @0x000000011f396570: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x000000011f3965af, 0x000000011f396c55 > < 0x000000011f3965b3, 0x000000011f396c78 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000126b5a118 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000126b5a118}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000272c8fa60 {method} {0x0000000272c8fa60} 'fit' '([D[D)V' in 'org/jml/regression/linear/DoubleLinearRegression'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
29.556 ms/op
# Warmup Iteration   8: 30.750 ms/op
# Warmup Iteration   9: 29.443 ms/op
# Warmup Iteration  10: 26.667 ms/op
# Warmup Iteration  11: 25.607 ms/op
# Warmup Iteration  12: 26.480 ms/op
# Warmup Iteration  13: 25.644 ms/op
# Warmup Iteration  14: 25.539 ms/op
# Warmup Iteration  15: 25.632 ms/op
# Warmup Iteration  16: 25.566 ms/op
# Warmup Iteration  17: 25.542 ms/op
# Warmup Iteration  18: 25.527 ms/op
# Warmup Iteration  19: 25.518 ms/op
# Warmup Iteration  20: 25.531 ms/op
# Warmup Iteration  21: 25.538 ms/op
# Warmup Iteration  22: 25.529 ms/op
# Warmup Iteration  23: 25.564 ms/op
# Warmup Iteration  24: 25.523 ms/op
# Warmup Iteration  25: 25.535 ms/op
# Warmup Iteration  26: 25.571 ms/op
# Warmup Iteration  27: 25.567 ms/op
# Warmup Iteration  28: 25.496 ms/op
# Warmup Iteration  29: 25.667 ms/op
# Warmup Iteration  30: 25.472 ms/op
# Warmup Iteration  31: 25.535 ms/op
# Warmup Iteration  32: 25.566 ms/op
# Warmup Iteration  33: 25.519 ms/op
# Warmup Iteration  34: 25.622 ms/op
# Warmup Iteration  35: 25.784 ms/op
# Warmup Iteration  36: 25.581 ms/op
# Warmup Iteration  37: 25.538 ms/op
# Warmup Iteration  38: 25.509 ms/op
# Warmup Iteration  39: 25.512 ms/op
# Warmup Iteration  40: 25.503 ms/op
# Warmup Iteration  41: 25.505 ms/op
# Warmup Iteration  42: 25.604 ms/op
# Warmup Iteration  43: 25.504 ms/op
# Warmup Iteration  44: 25.506 ms/op
# Warmup Iteration  45: 25.514 ms/op
# Warmup Iteration  46: 25.508 ms/op
# Warmup Iteration  47: 25.702 ms/op
# Warmup Iteration  48: 25.605 ms/op
# Warmup Iteration  49: 25.538 ms/op
# Warmup Iteration  50: 25.481 ms/op
# Warmup Iteration  51: 25.504 ms/op
# Warmup Iteration  52: 25.647 ms/op
# Warmup Iteration  53: 25.528 ms/op
# Warmup Iteration  54: 25.612 ms/op
# Warmup Iteration  55: 25.608 ms/op
# Warmup Iteration  56: 25.526 ms/op
# Warmup Iteration  57: 25.498 ms/op
# Warmup Iteration  58: 25.496 ms/op
# Warmup Iteration  59: 25.512 ms/op
# Warmup Iteration  60: 25.498 ms/op
# Warmup Iteration  61: 25.491 ms/op
# Warmup Iteration  62: 25.508 ms/op
# Warmup Iteration  63: 25.494 ms/op
# Warmup Iteration  64: 25.535 ms/op
# Warmup Iteration  65: 25.566 ms/op
# Warmup Iteration  66: 25.497 ms/op
# Warmup Iteration  67: 25.481 ms/op
# Warmup Iteration  68: 25.573 ms/op
# Warmup Iteration  69: 25.559 ms/op
# Warmup Iteration  70: 25.494 ms/op
# Warmup Iteration  71: 25.487 ms/op
# Warmup Iteration  72: 25.481 ms/op
# Warmup Iteration  73: 25.597 ms/op
# Warmup Iteration  74: 25.584 ms/op
# Warmup Iteration  75: 25.607 ms/op
# Warmup Iteration  76: 25.611 ms/op
# Warmup Iteration  77: 25.459 ms/op
# Warmup Iteration  78: 25.397 ms/op
# Warmup Iteration  79: 25.497 ms/op
# Warmup Iteration  80: 25.538 ms/op
# Warmup Iteration  81: 25.503 ms/op
# Warmup Iteration  82: 25.491 ms/op
# Warmup Iteration  83: 25.505 ms/op
# Warmup Iteration  84: 25.505 ms/op
# Warmup Iteration  85: 25.581 ms/op
# Warmup Iteration  86: 25.698 ms/op
# Warmup Iteration  87: 25.522 ms/op
# Warmup Iteration  88: 25.531 ms/op
# Warmup Iteration  89: 25.677 ms/op
# Warmup Iteration  90: 25.553 ms/op
# Warmup Iteration  91: 25.530 ms/op
# Warmup Iteration  92: 25.531 ms/op
# Warmup Iteration  93: 25.581 ms/op
# Warmup Iteration  94: 25.690 ms/op
# Warmup Iteration  95: 25.550 ms/op
# Warmup Iteration  96: 25.499 ms/op
# Warmup Iteration  97: 25.540 ms/op
# Warmup Iteration  98: 25.495 ms/op
# Warmup Iteration  99: 25.508 ms/op
# Warmup Iteration 100: 25.485 ms/op
Iteration   1: 25.504 ms/op
Iteration   2: 25.634 ms/op
Iteration   3: 25.536 ms/op
Iteration   4: 25.504 ms/op
Iteration   5: 25.627 ms/op
Iteration   6: 25.602 ms/op
Iteration   7: 25.611 ms/op
Iteration   8: 25.509 ms/op
Iteration   9: 25.521 ms/op
Iteration  10: 25.487 ms/op
------------------------------------------------------------------------
org.jml.regression.linear.DoubleLinearRegression::fit([D[D)V
  interpreter_invocation_count:        6 
  invocation_counter:                  6 
  backedge_counter:             40025088 
  mdo size: 592 bytes

0 aload_1
1 arraylength
2 aload_2
3 arraylength
4 if_icmpeq 17
  0   bci: 4    BranchData          taken(5) displacement(48)
                                    not taken(0)
7 new 7 <java/lang/IllegalArgumentException>
10 dup
11 fast_aldc Arrays length are not equals
13 invokespecial 11 <java/lang/IllegalArgumentException.<init>(Ljava/lang/String;)V> 
  32  bci: 13   CounterData         count(0)
16 athrow
17 dconst_0
18 dstore_3
19 dconst_0
20 dstore #5
22 iconst_0
23 istore #7
25 fast_iload #7
27 aload_1
28 arraylength
29 if_icmpge 54
  48  bci: 29   BranchData          trap(intrinsic_or_type_checked_inlining recompiled) taken(3) displacement(56)
                                    not taken(19903229)
32 dload_3
33 aload_1
34 fast_iload #7
36 daload
37 dadd
38 dstore_3
39 dload #5
41 aload_2
42 fast_iload #7
44 daload
45 dadd
46 dstore #5
48 iinc #7 1
51 goto 25
  80  bci: 51   JumpData            taken(19903229) displacement(-32)
54 dload_3
55 aload_1
56 arraylength
57 i2d
58 ddiv
59 dstore #7
61 dload #5
63 aload_1
64 arraylength
65 i2d
66 ddiv
67 dstore #9
69 dconst_0
70 dstore #11
72 dconst_0
73 dstore #13
75 iconst_0
76 istore #15
78 fast_iload #15
80 aload_1
81 arraylength
82 if_icmpge 131
  104 bci: 82   BranchData          trap(intrinsic_or_type_checked_inlining recompiled) taken(3) displacement(56)
                                    not taken(20001024)
85 dload #11
87 aload_1
88 fast_iload #15
90 daload
91 dload #7
93 dsub
94 aload_1
95 fast_iload #15
97 daload
98 dload #7
100 dsub
101 dmul
102 dadd
103 dstore #11
105 dload #13
107 aload_1
108 fast_iload #15
110 daload
111 dload #7
113 dsub
114 aload_2
115 fast_iload #15
117 daload
118 dload #9
120 dsub
121 dmul
122 dadd
123 dstore #13
125 iinc #15 1
128 goto 78
  136 bci: 128  JumpData            taken(20001024) displacement(-32)
131 fast_aload_0
132 dload #13
134 dload #11
136 ddiv
137 fast_dputfield 14 <org/jml/regression/linear/DoubleLinearRegression.slope/D> 
140 fast_aload_0
141 dload #9
143 aload_0
144 fast_dgetfield 14 <org/jml/regression/linear/DoubleLinearRegression.slope/D> 
147 dload #7
149 dmul
150 dsub
151 fast_dputfield 20 <org/jml/regression/linear/DoubleLinearRegression.intercept/D> 
154 return
------------------------------------------------------------------------
Total MDO size: 592 bytes


Result "org.jml.regression.linear.BenchmarkLinearRegression.testDoubleLinearRegression":
  N = 10
  mean =     25.554 ±(99.9%) 0.088 ms/op

  Histogram, ms/op:
    [25.400, 25.425) = 0 
    [25.425, 25.450) = 0 
    [25.450, 25.475) = 0 
    [25.475, 25.500) = 1 
    [25.500, 25.525) = 4 
    [25.525, 25.550) = 1 
    [25.550, 25.575) = 0 
    [25.575, 25.600) = 0 
    [25.600, 25.625) = 2 
    [25.625, 25.650) = 2 
    [25.650, 25.675) = 0 
    [25.675, 25.700) = 0 

  Percentiles, ms/op:
      p(0.0000) =     25.487 ms/op
     p(50.0000) =     25.528 ms/op
     p(90.0000) =     25.634 ms/op
     p(95.0000) =     25.634 ms/op
     p(99.0000) =     25.634 ms/op
     p(99.9000) =     25.634 ms/op
     p(99.9900) =     25.634 ms/op
     p(99.9990) =     25.634 ms/op
     p(99.9999) =     25.634 ms/op
    p(100.0000) =     25.634 ms/op


# JMH version: 1.32
# VM version: JDK 16-internal, OpenJDK 64-Bit Server VM, 16-internal+0-adhoc.ominil.jdk16
# VM invoker: /Library/Java/JavaVirtualMachines/macosx-x86_64-server-fastdebug/jdk/bin/java
# VM options: --add-modules=jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*DoubleLinearRegression::fit -XX:PrintAssemblyOptions=intel -XX:-UseCompressedOops
# Blackhole mode: full + dont-inline hint
# Warmup: 100 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jml.regression.linear.BenchmarkLinearRegression.testDoubleVectorLinearRegression

# Run progress: 50.00% complete, ETA 00:00:05
# Fork: 1 of 1
CompileCommand: print *DoubleLinearRegression.fit bool print = true
OpenJDK 64-Bit Server VM warning: printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output
# Warmup Iteration   1: 578.238 ms/op
# Warmup Iteration   2: 195.486 ms/op
# Warmup Iteration   3: 16.057 ms/op
# Warmup Iteration   4: 16.610 ms/op
# Warmup Iteration   5: 17.015 ms/op
# Warmup Iteration   6: 17.282 ms/op
# Warmup Iteration   7: 17.347 ms/op
# Warmup Iteration   8: 17.517 ms/op
# Warmup Iteration   9: 17.363 ms/op
# Warmup Iteration  10: 17.112 ms/op
# Warmup Iteration  11: 17.355 ms/op
# Warmup Iteration  12: 16.998 ms/op
# Warmup Iteration  13: 16.759 ms/op
# Warmup Iteration  14: 16.885 ms/op
# Warmup Iteration  15: 16.858 ms/op
# Warmup Iteration  16: 16.912 ms/op
# Warmup Iteration  17: 17.043 ms/op
# Warmup Iteration  18: 17.326 ms/op
# Warmup Iteration  19: 17.536 ms/op
# Warmup Iteration  20: 16.959 ms/op
# Warmup Iteration  21: 17.189 ms/op
# Warmup Iteration  22: 17.042 ms/op
# Warmup Iteration  23: 17.219 ms/op
# Warmup Iteration  24: 16.974 ms/op
# Warmup Iteration  25: 17.018 ms/op
# Warmup Iteration  26: 17.162 ms/op
# Warmup Iteration  27: 17.260 ms/op
# Warmup Iteration  28: 17.006 ms/op
# Warmup Iteration  29: 17.646 ms/op
# Warmup Iteration  30: 16.851 ms/op
# Warmup Iteration  31: 16.865 ms/op
# Warmup Iteration  32: 17.135 ms/op
# Warmup Iteration  33: 17.299 ms/op
# Warmup Iteration  34: 17.009 ms/op
# Warmup Iteration  35: 17.098 ms/op
# Warmup Iteration  36: 17.262 ms/op
# Warmup Iteration  37: 17.103 ms/op
# Warmup Iteration  38: 16.989 ms/op
# Warmup Iteration  39: 16.959 ms/op
# Warmup Iteration  40: 17.071 ms/op
# Warmup Iteration  41: 17.344 ms/op
# Warmup Iteration  42: 17.518 ms/op
# Warmup Iteration  43: 17.039 ms/op
# Warmup Iteration  44: 17.606 ms/op
# Warmup Iteration  45: 16.784 ms/op
# Warmup Iteration  46: 17.585 ms/op
# Warmup Iteration  47: 17.169 ms/op
# Warmup Iteration  48: 17.470 ms/op
# Warmup Iteration  49: 17.014 ms/op
# Warmup Iteration  50: 16.876 ms/op
# Warmup Iteration  51: 17.319 ms/op
# Warmup Iteration  52: 17.063 ms/op
# Warmup Iteration  53: 16.517 ms/op
# Warmup Iteration  54: 16.290 ms/op
# Warmup Iteration  55: 17.394 ms/op
# Warmup Iteration  56: 17.079 ms/op
# Warmup Iteration  57: 17.233 ms/op
# Warmup Iteration  58: 16.785 ms/op
# Warmup Iteration  59: 16.701 ms/op
# Warmup Iteration  60: 16.805 ms/op
# Warmup Iteration  61: 17.227 ms/op
# Warmup Iteration  62: 16.869 ms/op
# Warmup Iteration  63: 17.388 ms/op
# Warmup Iteration  64: 17.880 ms/op
# Warmup Iteration  65: 17.595 ms/op
# Warmup Iteration  66: 16.950 ms/op
# Warmup Iteration  67: 16.871 ms/op
# Warmup Iteration  68: 17.336 ms/op
# Warmup Iteration  69: 17.266 ms/op
# Warmup Iteration  70: 17.076 ms/op
# Warmup Iteration  71: 17.197 ms/op
# Warmup Iteration  72: 17.041 ms/op
# Warmup Iteration  73: 17.265 ms/op
# Warmup Iteration  74: 22.786 ms/op
# Warmup Iteration  75: 17.452 ms/op
# Warmup Iteration  76: 17.125 ms/op
# Warmup Iteration  77: 17.959 ms/op
# Warmup Iteration  78: 16.813 ms/op
# Warmup Iteration  79: 16.804 ms/op
# Warmup Iteration  80: 17.034 ms/op
# Warmup Iteration  81: 17.129 ms/op
# Warmup Iteration  82: 17.266 ms/op
# Warmup Iteration  83: 17.127 ms/op
# Warmup Iteration  84: 17.090 ms/op
# Warmup Iteration  85: 17.059 ms/op
# Warmup Iteration  86: 17.250 ms/op
# Warmup Iteration  87: 17.589 ms/op
# Warmup Iteration  88: 16.908 ms/op
# Warmup Iteration  89: 17.128 ms/op
# Warmup Iteration  90: 17.300 ms/op
# Warmup Iteration  91: 17.413 ms/op
# Warmup Iteration  92: 16.829 ms/op
# Warmup Iteration  93: 17.304 ms/op
# Warmup Iteration  94: 17.430 ms/op
# Warmup Iteration  95: 16.999 ms/op
# Warmup Iteration  96: 17.432 ms/op
# Warmup Iteration  97: 17.469 ms/op
# Warmup Iteration  98: 17.242 ms/op
# Warmup Iteration  99: 16.838 ms/op
# Warmup Iteration 100: 16.773 ms/op
Iteration   1: 17.305 ms/op
Iteration   2: 17.226 ms/op
Iteration   3: 16.822 ms/op
Iteration   4: 17.273 ms/op
Iteration   5: 17.061 ms/op
Iteration   6: 17.110 ms/op
Iteration   7: 16.802 ms/op
Iteration   8: 16.723 ms/op
Iteration   9: 16.506 ms/op
Iteration  10: 16.848 ms/op


Result "org.jml.regression.linear.BenchmarkLinearRegression.testDoubleVectorLinearRegression":
  N = 10
  mean =     16.968 ±(99.9%) 0.403 ms/op

  Histogram, ms/op:
    [16.500, 16.550) = 1 
    [16.550, 16.600) = 0 
    [16.600, 16.650) = 0 
    [16.650, 16.700) = 0 
    [16.700, 16.750) = 1 
    [16.750, 16.800) = 0 
    [16.800, 16.850) = 3 
    [16.850, 16.900) = 0 
    [16.900, 16.950) = 0 
    [16.950, 17.000) = 0 
    [17.000, 17.050) = 0 
    [17.050, 17.100) = 1 
    [17.100, 17.150) = 1 
    [17.150, 17.200) = 0 
    [17.200, 17.250) = 1 
    [17.250, 17.300) = 1 
    [17.300, 17.350) = 1 
    [17.350, 17.400) = 0 

  Percentiles, ms/op:
      p(0.0000) =     16.506 ms/op
     p(50.0000) =     16.955 ms/op
     p(90.0000) =     17.302 ms/op
     p(95.0000) =     17.305 ms/op
     p(99.0000) =     17.305 ms/op
     p(99.9000) =     17.305 ms/op
     p(99.9900) =     17.305 ms/op
     p(99.9990) =     17.305 ms/op
     p(99.9999) =     17.305 ms/op
    p(100.0000) =     17.305 ms/op


# Run complete. Total time: 00:00:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt   Score   Error  Units
BenchmarkLinearRegression.testDoubleLinearRegression          ss   10  25.554 ± 0.088  ms/op
BenchmarkLinearRegression.testDoubleVectorLinearRegression    ss   10  16.968 ± 0.403  ms/op
